{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GetMoreOperation = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst utils_1 = require(\"../utils\");\n\nconst operation_1 = require(\"./operation\");\n/** @internal */\n\n\nclass GetMoreOperation extends operation_1.AbstractOperation {\n  constructor(ns, cursorId, server) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super(options);\n    this.options = options;\n    this.ns = ns;\n    this.cursorId = cursorId;\n    this.server = server;\n  }\n  /**\n   * Although there is a server already associated with the get more operation, the signature\n   * for execute passes a server so we will just use that one.\n   */\n\n\n  execute(server, session, callback) {\n    if (server !== this.server) {\n      return callback(new error_1.MongoRuntimeError('Getmore must run on the same server operation began on'));\n    }\n\n    const collection = this.ns.collection;\n\n    if (collection == null) {\n      // Cursors should have adopted the namespace returned by MongoDB\n      // which should always defined a collection name (even a pseudo one, ex. db.aggregate())\n      return callback(new error_1.MongoRuntimeError('A collection name must be determined before getMore'));\n    }\n\n    const getMoreCmd = {\n      getMore: this.cursorId,\n      collection\n    };\n\n    if (typeof this.options.batchSize === 'number') {\n      getMoreCmd.batchSize = Math.abs(this.options.batchSize);\n    }\n\n    if (typeof this.options.maxAwaitTimeMS === 'number') {\n      getMoreCmd.maxTimeMS = this.options.maxAwaitTimeMS;\n    } // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n\n\n    if (this.options.comment !== undefined && (0, utils_1.maxWireVersion)(server) >= 9) {\n      getMoreCmd.comment = this.options.comment;\n    }\n\n    const commandOptions = {\n      returnFieldSelector: null,\n      documentsReturnedIn: 'nextBatch',\n      ...this.options\n    };\n    server.command(this.ns, getMoreCmd, commandOptions, callback);\n  }\n\n}\n\nexports.GetMoreOperation = GetMoreOperation;\n(0, operation_1.defineAspects)(GetMoreOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.MUST_SELECT_SAME_SERVER]);","map":{"version":3,"mappings":";;;;;;;AACA;;AAGA;;AACA;AA+BA;;;AACA,MAAaA,gBAAb,SAAsCC,6BAAtC,CAAuD;AAIrDC,cAAYC,EAAZ,EAAkCC,QAAlC,EAAkDC,MAAlD,EAA8F;AAAA,QAA5BC,OAA4B,uEAAF,EAAE;AAC5F,UAAMA,OAAN;AAEA,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKH,EAAL,GAAUA,EAAV;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;AAED;;;;;;AAISE,SAAO,CACdF,MADc,EAEdG,OAFc,EAGdC,QAHc,EAGc;AAE5B,QAAIJ,MAAM,KAAK,KAAKA,MAApB,EAA4B;AAC1B,aAAOI,QAAQ,CACb,IAAIC,yBAAJ,CAAsB,wDAAtB,CADa,CAAf;AAGD;;AAED,UAAMC,UAAU,GAAG,KAAKR,EAAL,CAAQQ,UAA3B;;AACA,QAAIA,UAAU,IAAI,IAAlB,EAAwB;AACtB;AACA;AACA,aAAOF,QAAQ,CAAC,IAAIC,yBAAJ,CAAsB,qDAAtB,CAAD,CAAf;AACD;;AAED,UAAME,UAAU,GAAmB;AACjCC,aAAO,EAAE,KAAKT,QADmB;AAEjCO;AAFiC,KAAnC;;AAKA,QAAI,OAAO,KAAKL,OAAL,CAAaQ,SAApB,KAAkC,QAAtC,EAAgD;AAC9CF,gBAAU,CAACE,SAAX,GAAuBC,IAAI,CAACC,GAAL,CAAS,KAAKV,OAAL,CAAaQ,SAAtB,CAAvB;AACD;;AAED,QAAI,OAAO,KAAKR,OAAL,CAAaW,cAApB,KAAuC,QAA3C,EAAqD;AACnDL,gBAAU,CAACM,SAAX,GAAuB,KAAKZ,OAAL,CAAaW,cAApC;AACD,KA1B2B,CA4B5B;AACA;;;AACA,QAAI,KAAKX,OAAL,CAAaa,OAAb,KAAyBC,SAAzB,IAAsC,4BAAef,MAAf,KAA0B,CAApE,EAAuE;AACrEO,gBAAU,CAACO,OAAX,GAAqB,KAAKb,OAAL,CAAaa,OAAlC;AACD;;AAED,UAAME,cAAc,GAAG;AACrBC,yBAAmB,EAAE,IADA;AAErBC,yBAAmB,EAAE,WAFA;AAGrB,SAAG,KAAKjB;AAHa,KAAvB;AAMAD,UAAM,CAACmB,OAAP,CAAe,KAAKrB,EAApB,EAAwBS,UAAxB,EAAoCS,cAApC,EAAoDZ,QAApD;AACD;;AA7DoD;;AAAvDgB;AAgEA,+BAAczB,gBAAd,EAAgC,CAACC,mBAAOyB,cAAR,EAAwBzB,mBAAO0B,uBAA/B,CAAhC","names":["GetMoreOperation","operation_1","constructor","ns","cursorId","server","options","execute","session","callback","error_1","collection","getMoreCmd","getMore","batchSize","Math","abs","maxAwaitTimeMS","maxTimeMS","comment","undefined","commandOptions","returnFieldSelector","documentsReturnedIn","command","exports","READ_OPERATION","MUST_SELECT_SAME_SERVER"],"sources":["C:\\Users\\AnÄ‘elo\\node_modules\\mongodb\\src\\operations\\get_more.ts"],"sourcesContent":["import type { Document, Long } from '../bson';\nimport { MongoRuntimeError } from '../error';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { Callback, maxWireVersion, MongoDBNamespace } from '../utils';\nimport { AbstractOperation, Aspect, defineAspects, OperationOptions } from './operation';\n\n/** @internal */\nexport interface GetMoreOptions extends OperationOptions {\n  /** Set the batchSize for the getMoreCommand when iterating over the query results. */\n  batchSize?: number;\n  /**\n   * Comment to apply to the operation.\n   *\n   * getMore only supports 'comment' in server versions 4.4 and above.\n   */\n  comment?: unknown;\n  /** Number of milliseconds to wait before aborting the query. */\n  maxTimeMS?: number;\n  /** TODO(NODE-4413): Address bug with maxAwaitTimeMS not being passed in from the cursor correctly */\n  maxAwaitTimeMS?: number;\n}\n\n/**\n * GetMore command: https://www.mongodb.com/docs/manual/reference/command/getMore/\n * @internal\n */\nexport interface GetMoreCommand {\n  getMore: Long;\n  collection: string;\n  batchSize?: number;\n  maxTimeMS?: number;\n  /** Only supported on wire versions 10 or greater */\n  comment?: unknown;\n}\n\n/** @internal */\nexport class GetMoreOperation extends AbstractOperation {\n  cursorId: Long;\n  override options: GetMoreOptions;\n\n  constructor(ns: MongoDBNamespace, cursorId: Long, server: Server, options: GetMoreOptions = {}) {\n    super(options);\n\n    this.options = options;\n    this.ns = ns;\n    this.cursorId = cursorId;\n    this.server = server;\n  }\n\n  /**\n   * Although there is a server already associated with the get more operation, the signature\n   * for execute passes a server so we will just use that one.\n   */\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document>\n  ): void {\n    if (server !== this.server) {\n      return callback(\n        new MongoRuntimeError('Getmore must run on the same server operation began on')\n      );\n    }\n\n    const collection = this.ns.collection;\n    if (collection == null) {\n      // Cursors should have adopted the namespace returned by MongoDB\n      // which should always defined a collection name (even a pseudo one, ex. db.aggregate())\n      return callback(new MongoRuntimeError('A collection name must be determined before getMore'));\n    }\n\n    const getMoreCmd: GetMoreCommand = {\n      getMore: this.cursorId,\n      collection\n    };\n\n    if (typeof this.options.batchSize === 'number') {\n      getMoreCmd.batchSize = Math.abs(this.options.batchSize);\n    }\n\n    if (typeof this.options.maxAwaitTimeMS === 'number') {\n      getMoreCmd.maxTimeMS = this.options.maxAwaitTimeMS;\n    }\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (this.options.comment !== undefined && maxWireVersion(server) >= 9) {\n      getMoreCmd.comment = this.options.comment;\n    }\n\n    const commandOptions = {\n      returnFieldSelector: null,\n      documentsReturnedIn: 'nextBatch',\n      ...this.options\n    };\n\n    server.command(this.ns, getMoreCmd, commandOptions, callback);\n  }\n}\n\ndefineAspects(GetMoreOperation, [Aspect.READ_OPERATION, Aspect.MUST_SELECT_SAME_SERVER]);\n"]},"metadata":{},"sourceType":"script"}