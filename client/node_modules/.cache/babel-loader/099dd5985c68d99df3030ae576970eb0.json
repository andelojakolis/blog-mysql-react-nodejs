{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hasSessionSupport = exports.CryptoConnection = exports.Connection = void 0;\n\nconst timers_1 = require(\"timers\");\n\nconst constants_1 = require(\"../constants\");\n\nconst error_1 = require(\"../error\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst sessions_1 = require(\"../sessions\");\n\nconst utils_1 = require(\"../utils\");\n\nconst command_monitoring_events_1 = require(\"./command_monitoring_events\");\n\nconst commands_1 = require(\"./commands\");\n\nconst message_stream_1 = require(\"./message_stream\");\n\nconst stream_description_1 = require(\"./stream_description\");\n\nconst shared_1 = require(\"./wire_protocol/shared\");\n/** @internal */\n\n\nconst kStream = Symbol('stream');\n/** @internal */\n\nconst kQueue = Symbol('queue');\n/** @internal */\n\nconst kMessageStream = Symbol('messageStream');\n/** @internal */\n\nconst kGeneration = Symbol('generation');\n/** @internal */\n\nconst kLastUseTime = Symbol('lastUseTime');\n/** @internal */\n\nconst kClusterTime = Symbol('clusterTime');\n/** @internal */\n\nconst kDescription = Symbol('description');\n/** @internal */\n\nconst kHello = Symbol('hello');\n/** @internal */\n\nconst kAutoEncrypter = Symbol('autoEncrypter');\n/** @internal */\n\nconst kDelayedTimeoutId = Symbol('delayedTimeoutId');\n/** @internal */\n\nclass Connection extends mongo_types_1.TypedEventEmitter {\n  constructor(stream, options) {\n    var _a, _b;\n\n    super();\n    this.id = options.id;\n    this.address = streamIdentifier(stream, options);\n    this.socketTimeoutMS = (_a = options.socketTimeoutMS) !== null && _a !== void 0 ? _a : 0;\n    this.monitorCommands = options.monitorCommands;\n    this.serverApi = options.serverApi;\n    this.closed = false;\n    this.destroyed = false;\n    this[kHello] = null;\n    this[kClusterTime] = null;\n    this[kDescription] = new stream_description_1.StreamDescription(this.address, options);\n    this[kGeneration] = options.generation;\n    this[kLastUseTime] = (0, utils_1.now)(); // setup parser stream and message handling\n\n    this[kQueue] = new Map();\n    this[kMessageStream] = new message_stream_1.MessageStream({ ...options,\n      maxBsonMessageSize: (_b = this.hello) === null || _b === void 0 ? void 0 : _b.maxBsonMessageSize\n    });\n    this[kStream] = stream;\n    this[kDelayedTimeoutId] = null;\n    this[kMessageStream].on('message', message => this.onMessage(message));\n    this[kMessageStream].on('error', error => this.onError(error));\n    this[kStream].on('close', () => this.onClose());\n    this[kStream].on('timeout', () => this.onTimeout());\n    this[kStream].on('error', () => {\n      /* ignore errors, listen to `close` instead */\n    }); // hook the message stream up to the passed in stream\n\n    this[kStream].pipe(this[kMessageStream]);\n    this[kMessageStream].pipe(this[kStream]);\n  }\n\n  get description() {\n    return this[kDescription];\n  }\n\n  get hello() {\n    return this[kHello];\n  } // the `connect` method stores the result of the handshake hello on the connection\n\n\n  set hello(response) {\n    this[kDescription].receiveResponse(response);\n    this[kDescription] = Object.freeze(this[kDescription]); // TODO: remove this, and only use the `StreamDescription` in the future\n\n    this[kHello] = response;\n  } // Set the whether the message stream is for a monitoring connection.\n\n\n  set isMonitoringConnection(value) {\n    this[kMessageStream].isMonitoringConnection = value;\n  }\n\n  get isMonitoringConnection() {\n    return this[kMessageStream].isMonitoringConnection;\n  }\n\n  get serviceId() {\n    var _a;\n\n    return (_a = this.hello) === null || _a === void 0 ? void 0 : _a.serviceId;\n  }\n\n  get loadBalanced() {\n    return this.description.loadBalanced;\n  }\n\n  get generation() {\n    return this[kGeneration] || 0;\n  }\n\n  set generation(generation) {\n    this[kGeneration] = generation;\n  }\n\n  get idleTime() {\n    return (0, utils_1.calculateDurationInMs)(this[kLastUseTime]);\n  }\n\n  get clusterTime() {\n    return this[kClusterTime];\n  }\n\n  get stream() {\n    return this[kStream];\n  }\n\n  markAvailable() {\n    this[kLastUseTime] = (0, utils_1.now)();\n  }\n\n  onError(error) {\n    if (this.closed) {\n      return;\n    }\n\n    this[kStream].destroy(error);\n    this.closed = true;\n\n    for (const op of this[kQueue].values()) {\n      op.cb(error);\n    }\n\n    this[kQueue].clear();\n    this.emit(Connection.CLOSE);\n  }\n\n  onClose() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n    const message = `connection ${this.id} to ${this.address} closed`;\n\n    for (const op of this[kQueue].values()) {\n      op.cb(new error_1.MongoNetworkError(message));\n    }\n\n    this[kQueue].clear();\n    this.emit(Connection.CLOSE);\n  }\n\n  onTimeout() {\n    if (this.closed) {\n      return;\n    }\n\n    this[kDelayedTimeoutId] = (0, timers_1.setTimeout)(() => {\n      this[kStream].destroy();\n      this.closed = true;\n      const message = `connection ${this.id} to ${this.address} timed out`;\n      const beforeHandshake = this.hello == null;\n\n      for (const op of this[kQueue].values()) {\n        op.cb(new error_1.MongoNetworkTimeoutError(message, {\n          beforeHandshake\n        }));\n      }\n\n      this[kQueue].clear();\n      this.emit(Connection.CLOSE);\n    }, 1).unref(); // No need for this timer to hold the event loop open\n  }\n\n  onMessage(message) {\n    const delayedTimeoutId = this[kDelayedTimeoutId];\n\n    if (delayedTimeoutId != null) {\n      (0, timers_1.clearTimeout)(delayedTimeoutId);\n      this[kDelayedTimeoutId] = null;\n    } // always emit the message, in case we are streaming\n\n\n    this.emit('message', message);\n    const operationDescription = this[kQueue].get(message.responseTo);\n\n    if (!operationDescription) {\n      return;\n    }\n\n    const callback = operationDescription.cb; // SERVER-45775: For exhaust responses we should be able to use the same requestId to\n    // track response, however the server currently synthetically produces remote requests\n    // making the `responseTo` change on each response\n\n    this[kQueue].delete(message.responseTo);\n\n    if ('moreToCome' in message && message.moreToCome) {\n      // requeue the callback for next synthetic request\n      this[kQueue].set(message.requestId, operationDescription);\n    } else if (operationDescription.socketTimeoutOverride) {\n      this[kStream].setTimeout(this.socketTimeoutMS);\n    }\n\n    try {\n      // Pass in the entire description because it has BSON parsing options\n      message.parse(operationDescription);\n    } catch (err) {\n      // If this error is generated by our own code, it will already have the correct class applied\n      // if it is not, then it is coming from a catastrophic data parse failure or the BSON library\n      // in either case, it should not be wrapped\n      callback(err);\n      return;\n    }\n\n    if (message.documents[0]) {\n      const document = message.documents[0];\n      const session = operationDescription.session;\n\n      if (session) {\n        (0, sessions_1.updateSessionFromResponse)(session, document);\n      }\n\n      if (document.$clusterTime) {\n        this[kClusterTime] = document.$clusterTime;\n        this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n      }\n\n      if (operationDescription.command) {\n        if (document.writeConcernError) {\n          callback(new error_1.MongoWriteConcernError(document.writeConcernError, document));\n          return;\n        }\n\n        if (document.ok === 0 || document.$err || document.errmsg || document.code) {\n          callback(new error_1.MongoServerError(document));\n          return;\n        }\n      } else {\n        // Pre 3.2 support\n        if (document.ok === 0 || document.$err || document.errmsg) {\n          callback(new error_1.MongoServerError(document));\n          return;\n        }\n      }\n    }\n\n    callback(undefined, message.documents[0]);\n  }\n\n  destroy(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {\n        force: false\n      };\n    }\n\n    this.removeAllListeners(Connection.PINNED);\n    this.removeAllListeners(Connection.UNPINNED);\n    options = Object.assign({\n      force: false\n    }, options);\n\n    if (this[kStream] == null || this.destroyed) {\n      this.destroyed = true;\n\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    if (options.force) {\n      this[kStream].destroy();\n      this.destroyed = true;\n\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    this[kStream].end(() => {\n      this.destroyed = true;\n\n      if (typeof callback === 'function') {\n        callback();\n      }\n    });\n  }\n\n  command(ns, cmd, options, callback) {\n    const readPreference = (0, shared_1.getReadPreference)(cmd, options);\n    const shouldUseOpMsg = supportsOpMsg(this);\n    const session = options === null || options === void 0 ? void 0 : options.session;\n    let clusterTime = this.clusterTime;\n    let finalCmd = Object.assign({}, cmd);\n\n    if (this.serverApi) {\n      const {\n        version,\n        strict,\n        deprecationErrors\n      } = this.serverApi;\n      finalCmd.apiVersion = version;\n      if (strict != null) finalCmd.apiStrict = strict;\n      if (deprecationErrors != null) finalCmd.apiDeprecationErrors = deprecationErrors;\n    }\n\n    if (hasSessionSupport(this) && session) {\n      if (session.clusterTime && clusterTime && session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)) {\n        clusterTime = session.clusterTime;\n      }\n\n      const err = (0, sessions_1.applySession)(session, finalCmd, options);\n\n      if (err) {\n        return callback(err);\n      }\n    } // if we have a known cluster time, gossip it\n\n\n    if (clusterTime) {\n      finalCmd.$clusterTime = clusterTime;\n    }\n\n    if ((0, shared_1.isSharded)(this) && !shouldUseOpMsg && readPreference && readPreference.mode !== 'primary') {\n      finalCmd = {\n        $query: finalCmd,\n        $readPreference: readPreference.toJSON()\n      };\n    }\n\n    const commandOptions = Object.assign({\n      command: true,\n      numberToSkip: 0,\n      numberToReturn: -1,\n      checkKeys: false,\n      // This value is not overridable\n      secondaryOk: readPreference.secondaryOk()\n    }, options);\n    const cmdNs = `${ns.db}.$cmd`;\n    const message = shouldUseOpMsg ? new commands_1.Msg(cmdNs, finalCmd, commandOptions) : new commands_1.Query(cmdNs, finalCmd, commandOptions);\n\n    try {\n      write(this, message, commandOptions, callback);\n    } catch (err) {\n      callback(err);\n    }\n  }\n\n}\n\nexports.Connection = Connection;\n/** @event */\n\nConnection.COMMAND_STARTED = constants_1.COMMAND_STARTED;\n/** @event */\n\nConnection.COMMAND_SUCCEEDED = constants_1.COMMAND_SUCCEEDED;\n/** @event */\n\nConnection.COMMAND_FAILED = constants_1.COMMAND_FAILED;\n/** @event */\n\nConnection.CLUSTER_TIME_RECEIVED = constants_1.CLUSTER_TIME_RECEIVED;\n/** @event */\n\nConnection.CLOSE = constants_1.CLOSE;\n/** @event */\n\nConnection.MESSAGE = constants_1.MESSAGE;\n/** @event */\n\nConnection.PINNED = constants_1.PINNED;\n/** @event */\n\nConnection.UNPINNED = constants_1.UNPINNED;\n/** @internal */\n\nclass CryptoConnection extends Connection {\n  constructor(stream, options) {\n    super(stream, options);\n    this[kAutoEncrypter] = options.autoEncrypter;\n  }\n  /** @internal @override */\n\n\n  command(ns, cmd, options, callback) {\n    const autoEncrypter = this[kAutoEncrypter];\n\n    if (!autoEncrypter) {\n      return callback(new error_1.MongoMissingDependencyError('No AutoEncrypter available for encryption'));\n    }\n\n    const serverWireVersion = (0, utils_1.maxWireVersion)(this);\n\n    if (serverWireVersion === 0) {\n      // This means the initial handshake hasn't happened yet\n      return super.command(ns, cmd, options, callback);\n    }\n\n    if (serverWireVersion < 8) {\n      callback(new error_1.MongoCompatibilityError('Auto-encryption requires a minimum MongoDB version of 4.2'));\n      return;\n    }\n\n    autoEncrypter.encrypt(ns.toString(), cmd, options, (err, encrypted) => {\n      if (err || encrypted == null) {\n        callback(err, null);\n        return;\n      }\n\n      super.command(ns, encrypted, options, (err, response) => {\n        if (err || response == null) {\n          callback(err, response);\n          return;\n        }\n\n        autoEncrypter.decrypt(response, options, callback);\n      });\n    });\n  }\n\n}\n\nexports.CryptoConnection = CryptoConnection;\n/** @internal */\n\nfunction hasSessionSupport(conn) {\n  const description = conn.description;\n  return description.logicalSessionTimeoutMinutes != null || !!description.loadBalanced;\n}\n\nexports.hasSessionSupport = hasSessionSupport;\n\nfunction supportsOpMsg(conn) {\n  const description = conn.description;\n\n  if (description == null) {\n    return false;\n  }\n\n  return (0, utils_1.maxWireVersion)(conn) >= 6 && !description.__nodejs_mock_server__;\n}\n\nfunction streamIdentifier(stream, options) {\n  if (options.proxyHost) {\n    // If proxy options are specified, the properties of `stream` itself\n    // will not accurately reflect what endpoint this is connected to.\n    return options.hostAddress.toString();\n  }\n\n  if (typeof stream.address === 'function') {\n    return `${stream.remoteAddress}:${stream.remotePort}`;\n  }\n\n  return (0, utils_1.uuidV4)().toString('hex');\n}\n\nfunction write(conn, command, options, callback) {\n  options = options !== null && options !== void 0 ? options : {};\n  const operationDescription = {\n    requestId: command.requestId,\n    cb: callback,\n    session: options.session,\n    noResponse: typeof options.noResponse === 'boolean' ? options.noResponse : false,\n    documentsReturnedIn: options.documentsReturnedIn,\n    command: !!options.command,\n    // for BSON parsing\n    promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\n    promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\n    promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\n    bsonRegExp: typeof options.bsonRegExp === 'boolean' ? options.bsonRegExp : false,\n    enableUtf8Validation: typeof options.enableUtf8Validation === 'boolean' ? options.enableUtf8Validation : true,\n    raw: typeof options.raw === 'boolean' ? options.raw : false,\n    started: 0\n  };\n\n  if (conn[kDescription] && conn[kDescription].compressor) {\n    operationDescription.agreedCompressor = conn[kDescription].compressor;\n\n    if (conn[kDescription].zlibCompressionLevel) {\n      operationDescription.zlibCompressionLevel = conn[kDescription].zlibCompressionLevel;\n    }\n  }\n\n  if (typeof options.socketTimeoutMS === 'number') {\n    operationDescription.socketTimeoutOverride = true;\n    conn[kStream].setTimeout(options.socketTimeoutMS);\n  } // if command monitoring is enabled we need to modify the callback here\n\n\n  if (conn.monitorCommands) {\n    conn.emit(Connection.COMMAND_STARTED, new command_monitoring_events_1.CommandStartedEvent(conn, command));\n    operationDescription.started = (0, utils_1.now)();\n\n    operationDescription.cb = (err, reply) => {\n      if (err) {\n        conn.emit(Connection.COMMAND_FAILED, new command_monitoring_events_1.CommandFailedEvent(conn, command, err, operationDescription.started));\n      } else {\n        if (reply && (reply.ok === 0 || reply.$err)) {\n          conn.emit(Connection.COMMAND_FAILED, new command_monitoring_events_1.CommandFailedEvent(conn, command, reply, operationDescription.started));\n        } else {\n          conn.emit(Connection.COMMAND_SUCCEEDED, new command_monitoring_events_1.CommandSucceededEvent(conn, command, reply, operationDescription.started));\n        }\n      }\n\n      if (typeof callback === 'function') {\n        callback(err, reply);\n      }\n    };\n  }\n\n  if (!operationDescription.noResponse) {\n    conn[kQueue].set(operationDescription.requestId, operationDescription);\n  }\n\n  try {\n    conn[kMessageStream].writeCommand(command, operationDescription);\n  } catch (e) {\n    if (!operationDescription.noResponse) {\n      conn[kQueue].delete(operationDescription.requestId);\n      operationDescription.cb(e);\n      return;\n    }\n  }\n\n  if (operationDescription.noResponse) {\n    operationDescription.cb();\n  }\n}","map":{"version":3,"mappings":"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","names":["kStream","Symbol","kQueue","kMessageStream","kGeneration","kLastUseTime","kClusterTime","kDescription","kHello","kAutoEncrypter","kDelayedTimeoutId","Connection","mongo_types_1","constructor","stream","options","id","address","streamIdentifier","socketTimeoutMS","_a","monitorCommands","serverApi","closed","destroyed","stream_description_1","generation","Map","message_stream_1","maxBsonMessageSize","hello","_b","on","message","onMessage","error","onError","onClose","onTimeout","pipe","description","response","receiveResponse","Object","freeze","isMonitoringConnection","value","serviceId","loadBalanced","idleTime","clusterTime","markAvailable","destroy","op","values","cb","clear","emit","CLOSE","error_1","beforeHandshake","unref","delayedTimeoutId","operationDescription","get","responseTo","callback","delete","moreToCome","set","requestId","socketTimeoutOverride","setTimeout","parse","err","documents","document","session","$clusterTime","CLUSTER_TIME_RECEIVED","command","writeConcernError","ok","$err","errmsg","code","undefined","force","removeAllListeners","PINNED","UNPINNED","assign","end","ns","cmd","readPreference","shouldUseOpMsg","supportsOpMsg","finalCmd","version","strict","deprecationErrors","apiVersion","apiStrict","apiDeprecationErrors","hasSessionSupport","greaterThan","mode","$query","$readPreference","toJSON","commandOptions","numberToSkip","numberToReturn","checkKeys","secondaryOk","cmdNs","db","commands_1","write","exports","constants_1","CryptoConnection","autoEncrypter","serverWireVersion","encrypt","toString","encrypted","decrypt","conn","logicalSessionTimeoutMinutes","__nodejs_mock_server__","proxyHost","hostAddress","remoteAddress","remotePort","noResponse","documentsReturnedIn","promoteLongs","promoteValues","promoteBuffers","bsonRegExp","enableUtf8Validation","raw","started","compressor","agreedCompressor","zlibCompressionLevel","COMMAND_STARTED","command_monitoring_events_1","reply","COMMAND_FAILED","COMMAND_SUCCEEDED","writeCommand","e"],"sources":["C:\\Users\\Anđelo\\node_modules\\mongodb\\src\\cmap\\connection.ts"],"sourcesContent":["import { clearTimeout, setTimeout } from 'timers';\n\nimport type { BSONSerializeOptions, Document, ObjectId } from '../bson';\nimport {\n  CLOSE,\n  CLUSTER_TIME_RECEIVED,\n  COMMAND_FAILED,\n  COMMAND_STARTED,\n  COMMAND_SUCCEEDED,\n  MESSAGE,\n  PINNED,\n  UNPINNED\n} from '../constants';\nimport type { AutoEncrypter } from '../deps';\nimport {\n  MongoCompatibilityError,\n  MongoMissingDependencyError,\n  MongoNetworkError,\n  MongoNetworkTimeoutError,\n  MongoServerError,\n  MongoWriteConcernError\n} from '../error';\nimport type { ServerApi, SupportedNodeConnectionOptions } from '../mongo_client';\nimport { CancellationToken, TypedEventEmitter } from '../mongo_types';\nimport type { ReadPreference, ReadPreferenceLike } from '../read_preference';\nimport { applySession, ClientSession, updateSessionFromResponse } from '../sessions';\nimport {\n  calculateDurationInMs,\n  Callback,\n  ClientMetadata,\n  HostAddress,\n  maxWireVersion,\n  MongoDBNamespace,\n  now,\n  uuidV4\n} from '../utils';\nimport type { WriteConcern } from '../write_concern';\nimport type { MongoCredentials } from './auth/mongo_credentials';\nimport {\n  CommandFailedEvent,\n  CommandStartedEvent,\n  CommandSucceededEvent\n} from './command_monitoring_events';\nimport { BinMsg, Msg, Query, Response, WriteProtocolMessageType } from './commands';\nimport type { Stream } from './connect';\nimport { MessageStream, OperationDescription } from './message_stream';\nimport { StreamDescription, StreamDescriptionOptions } from './stream_description';\nimport { getReadPreference, isSharded } from './wire_protocol/shared';\n\n/** @internal */\nconst kStream = Symbol('stream');\n/** @internal */\nconst kQueue = Symbol('queue');\n/** @internal */\nconst kMessageStream = Symbol('messageStream');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kLastUseTime = Symbol('lastUseTime');\n/** @internal */\nconst kClusterTime = Symbol('clusterTime');\n/** @internal */\nconst kDescription = Symbol('description');\n/** @internal */\nconst kHello = Symbol('hello');\n/** @internal */\nconst kAutoEncrypter = Symbol('autoEncrypter');\n/** @internal */\nconst kDelayedTimeoutId = Symbol('delayedTimeoutId');\n\n/** @internal */\nexport interface QueryOptions extends BSONSerializeOptions {\n  readPreference: ReadPreference;\n  documentsReturnedIn?: string;\n  batchSize?: number;\n  limit?: number;\n  skip?: number;\n  projection?: Document;\n  tailable?: boolean;\n  awaitData?: boolean;\n  noCursorTimeout?: boolean;\n  /** @deprecated use `noCursorTimeout` instead */\n  timeout?: boolean;\n  partial?: boolean;\n  oplogReplay?: boolean;\n}\n\n/** @internal */\nexport interface CommandOptions extends BSONSerializeOptions {\n  command?: boolean;\n  secondaryOk?: boolean;\n  /** Specify read preference if command supports it */\n  readPreference?: ReadPreferenceLike;\n  raw?: boolean;\n  monitoring?: boolean;\n  socketTimeoutMS?: number;\n  /** Session to use for the operation */\n  session?: ClientSession;\n  documentsReturnedIn?: string;\n  noResponse?: boolean;\n  omitReadPreference?: boolean;\n\n  // TODO(NODE-2802): Currently the CommandOptions take a property willRetryWrite which is a hint\n  // from executeOperation that the txnNum should be applied to this command.\n  // Applying a session to a command should happen as part of command construction,\n  // most likely in the CommandOperation#executeCommand method, where we have access to\n  // the details we need to determine if a txnNum should also be applied.\n  willRetryWrite?: boolean;\n\n  writeConcern?: WriteConcern;\n}\n\n/** @internal */\nexport interface GetMoreOptions extends CommandOptions {\n  batchSize?: number;\n  maxTimeMS?: number;\n  maxAwaitTimeMS?: number;\n  /**\n   * Comment to apply to the operation.\n   *\n   * In server versions pre-4.4, 'comment' must be string.  A server\n   * error will be thrown if any other type is provided.\n   *\n   * In server versions 4.4 and above, 'comment' can be any valid BSON type.\n   */\n  comment?: unknown;\n}\n\n/** @public */\nexport interface ProxyOptions {\n  proxyHost?: string;\n  proxyPort?: number;\n  proxyUsername?: string;\n  proxyPassword?: string;\n}\n\n/** @public */\nexport interface ConnectionOptions\n  extends SupportedNodeConnectionOptions,\n    StreamDescriptionOptions,\n    ProxyOptions {\n  // Internal creation info\n  id: number | '<monitor>';\n  generation: number;\n  hostAddress: HostAddress;\n  // Settings\n  autoEncrypter?: AutoEncrypter;\n  serverApi?: ServerApi;\n  monitorCommands: boolean;\n  /** @internal */\n  connectionType?: typeof Connection;\n  credentials?: MongoCredentials;\n  connectTimeoutMS?: number;\n  tls: boolean;\n  keepAlive?: boolean;\n  keepAliveInitialDelay?: number;\n  noDelay?: boolean;\n  socketTimeoutMS?: number;\n  cancellationToken?: CancellationToken;\n\n  metadata: ClientMetadata;\n}\n\n/** @public */\nexport interface DestroyOptions {\n  /** Force the destruction. */\n  force?: boolean;\n}\n\n/** @public */\nexport type ConnectionEvents = {\n  commandStarted(event: CommandStartedEvent): void;\n  commandSucceeded(event: CommandSucceededEvent): void;\n  commandFailed(event: CommandFailedEvent): void;\n  clusterTimeReceived(clusterTime: Document): void;\n  close(): void;\n  message(message: any): void;\n  pinned(pinType: string): void;\n  unpinned(pinType: string): void;\n};\n\n/** @internal */\nexport class Connection extends TypedEventEmitter<ConnectionEvents> {\n  id: number | '<monitor>';\n  address: string;\n  socketTimeoutMS: number;\n  monitorCommands: boolean;\n  closed: boolean;\n  destroyed: boolean;\n  lastHelloMS?: number;\n  serverApi?: ServerApi;\n  helloOk?: boolean;\n\n  /**@internal */\n  [kDelayedTimeoutId]: NodeJS.Timeout | null;\n  /** @internal */\n  [kDescription]: StreamDescription;\n  /** @internal */\n  [kGeneration]: number;\n  /** @internal */\n  [kLastUseTime]: number;\n  /** @internal */\n  [kQueue]: Map<number, OperationDescription>;\n  /** @internal */\n  [kMessageStream]: MessageStream;\n  /** @internal */\n  [kStream]: Stream;\n  /** @internal */\n  [kHello]: Document | null;\n  /** @internal */\n  [kClusterTime]: Document | null;\n\n  /** @event */\n  static readonly COMMAND_STARTED = COMMAND_STARTED;\n  /** @event */\n  static readonly COMMAND_SUCCEEDED = COMMAND_SUCCEEDED;\n  /** @event */\n  static readonly COMMAND_FAILED = COMMAND_FAILED;\n  /** @event */\n  static readonly CLUSTER_TIME_RECEIVED = CLUSTER_TIME_RECEIVED;\n  /** @event */\n  static readonly CLOSE = CLOSE;\n  /** @event */\n  static readonly MESSAGE = MESSAGE;\n  /** @event */\n  static readonly PINNED = PINNED;\n  /** @event */\n  static readonly UNPINNED = UNPINNED;\n\n  constructor(stream: Stream, options: ConnectionOptions) {\n    super();\n    this.id = options.id;\n    this.address = streamIdentifier(stream, options);\n    this.socketTimeoutMS = options.socketTimeoutMS ?? 0;\n    this.monitorCommands = options.monitorCommands;\n    this.serverApi = options.serverApi;\n    this.closed = false;\n    this.destroyed = false;\n    this[kHello] = null;\n    this[kClusterTime] = null;\n\n    this[kDescription] = new StreamDescription(this.address, options);\n    this[kGeneration] = options.generation;\n    this[kLastUseTime] = now();\n\n    // setup parser stream and message handling\n    this[kQueue] = new Map();\n    this[kMessageStream] = new MessageStream({\n      ...options,\n      maxBsonMessageSize: this.hello?.maxBsonMessageSize\n    });\n    this[kStream] = stream;\n\n    this[kDelayedTimeoutId] = null;\n\n    this[kMessageStream].on('message', message => this.onMessage(message));\n    this[kMessageStream].on('error', error => this.onError(error));\n    this[kStream].on('close', () => this.onClose());\n    this[kStream].on('timeout', () => this.onTimeout());\n    this[kStream].on('error', () => {\n      /* ignore errors, listen to `close` instead */\n    });\n\n    // hook the message stream up to the passed in stream\n    this[kStream].pipe(this[kMessageStream]);\n    this[kMessageStream].pipe(this[kStream]);\n  }\n\n  get description(): StreamDescription {\n    return this[kDescription];\n  }\n\n  get hello(): Document | null {\n    return this[kHello];\n  }\n\n  // the `connect` method stores the result of the handshake hello on the connection\n  set hello(response: Document | null) {\n    this[kDescription].receiveResponse(response);\n    this[kDescription] = Object.freeze(this[kDescription]);\n\n    // TODO: remove this, and only use the `StreamDescription` in the future\n    this[kHello] = response;\n  }\n\n  // Set the whether the message stream is for a monitoring connection.\n  set isMonitoringConnection(value: boolean) {\n    this[kMessageStream].isMonitoringConnection = value;\n  }\n\n  get isMonitoringConnection(): boolean {\n    return this[kMessageStream].isMonitoringConnection;\n  }\n\n  get serviceId(): ObjectId | undefined {\n    return this.hello?.serviceId;\n  }\n\n  get loadBalanced(): boolean {\n    return this.description.loadBalanced;\n  }\n\n  get generation(): number {\n    return this[kGeneration] || 0;\n  }\n\n  set generation(generation: number) {\n    this[kGeneration] = generation;\n  }\n\n  get idleTime(): number {\n    return calculateDurationInMs(this[kLastUseTime]);\n  }\n\n  get clusterTime(): Document | null {\n    return this[kClusterTime];\n  }\n\n  get stream(): Stream {\n    return this[kStream];\n  }\n\n  markAvailable(): void {\n    this[kLastUseTime] = now();\n  }\n\n  onError(error: Error) {\n    if (this.closed) {\n      return;\n    }\n\n    this[kStream].destroy(error);\n\n    this.closed = true;\n\n    for (const op of this[kQueue].values()) {\n      op.cb(error);\n    }\n\n    this[kQueue].clear();\n    this.emit(Connection.CLOSE);\n  }\n\n  onClose() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const message = `connection ${this.id} to ${this.address} closed`;\n    for (const op of this[kQueue].values()) {\n      op.cb(new MongoNetworkError(message));\n    }\n\n    this[kQueue].clear();\n    this.emit(Connection.CLOSE);\n  }\n\n  onTimeout() {\n    if (this.closed) {\n      return;\n    }\n\n    this[kDelayedTimeoutId] = setTimeout(() => {\n      this[kStream].destroy();\n\n      this.closed = true;\n\n      const message = `connection ${this.id} to ${this.address} timed out`;\n      const beforeHandshake = this.hello == null;\n      for (const op of this[kQueue].values()) {\n        op.cb(new MongoNetworkTimeoutError(message, { beforeHandshake }));\n      }\n\n      this[kQueue].clear();\n      this.emit(Connection.CLOSE);\n    }, 1).unref(); // No need for this timer to hold the event loop open\n  }\n\n  onMessage(message: BinMsg | Response) {\n    const delayedTimeoutId = this[kDelayedTimeoutId];\n    if (delayedTimeoutId != null) {\n      clearTimeout(delayedTimeoutId);\n      this[kDelayedTimeoutId] = null;\n    }\n\n    // always emit the message, in case we are streaming\n    this.emit('message', message);\n    const operationDescription = this[kQueue].get(message.responseTo);\n    if (!operationDescription) {\n      return;\n    }\n\n    const callback = operationDescription.cb;\n\n    // SERVER-45775: For exhaust responses we should be able to use the same requestId to\n    // track response, however the server currently synthetically produces remote requests\n    // making the `responseTo` change on each response\n    this[kQueue].delete(message.responseTo);\n    if ('moreToCome' in message && message.moreToCome) {\n      // requeue the callback for next synthetic request\n      this[kQueue].set(message.requestId, operationDescription);\n    } else if (operationDescription.socketTimeoutOverride) {\n      this[kStream].setTimeout(this.socketTimeoutMS);\n    }\n\n    try {\n      // Pass in the entire description because it has BSON parsing options\n      message.parse(operationDescription);\n    } catch (err) {\n      // If this error is generated by our own code, it will already have the correct class applied\n      // if it is not, then it is coming from a catastrophic data parse failure or the BSON library\n      // in either case, it should not be wrapped\n      callback(err);\n      return;\n    }\n\n    if (message.documents[0]) {\n      const document: Document = message.documents[0];\n      const session = operationDescription.session;\n      if (session) {\n        updateSessionFromResponse(session, document);\n      }\n\n      if (document.$clusterTime) {\n        this[kClusterTime] = document.$clusterTime;\n        this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n      }\n\n      if (operationDescription.command) {\n        if (document.writeConcernError) {\n          callback(new MongoWriteConcernError(document.writeConcernError, document));\n          return;\n        }\n\n        if (document.ok === 0 || document.$err || document.errmsg || document.code) {\n          callback(new MongoServerError(document));\n          return;\n        }\n      } else {\n        // Pre 3.2 support\n        if (document.ok === 0 || document.$err || document.errmsg) {\n          callback(new MongoServerError(document));\n          return;\n        }\n      }\n    }\n\n    callback(undefined, message.documents[0]);\n  }\n\n  destroy(options?: DestroyOptions, callback?: Callback): void {\n    if (typeof options === 'function') {\n      callback = options;\n      options = { force: false };\n    }\n\n    this.removeAllListeners(Connection.PINNED);\n    this.removeAllListeners(Connection.UNPINNED);\n\n    options = Object.assign({ force: false }, options);\n    if (this[kStream] == null || this.destroyed) {\n      this.destroyed = true;\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    if (options.force) {\n      this[kStream].destroy();\n      this.destroyed = true;\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    this[kStream].end(() => {\n      this.destroyed = true;\n      if (typeof callback === 'function') {\n        callback();\n      }\n    });\n  }\n\n  command(\n    ns: MongoDBNamespace,\n    cmd: Document,\n    options: CommandOptions | undefined,\n    callback: Callback\n  ): void {\n    const readPreference = getReadPreference(cmd, options);\n    const shouldUseOpMsg = supportsOpMsg(this);\n    const session = options?.session;\n\n    let clusterTime = this.clusterTime;\n    let finalCmd = Object.assign({}, cmd);\n\n    if (this.serverApi) {\n      const { version, strict, deprecationErrors } = this.serverApi;\n      finalCmd.apiVersion = version;\n      if (strict != null) finalCmd.apiStrict = strict;\n      if (deprecationErrors != null) finalCmd.apiDeprecationErrors = deprecationErrors;\n    }\n\n    if (hasSessionSupport(this) && session) {\n      if (\n        session.clusterTime &&\n        clusterTime &&\n        session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)\n      ) {\n        clusterTime = session.clusterTime;\n      }\n\n      const err = applySession(session, finalCmd, options);\n      if (err) {\n        return callback(err);\n      }\n    }\n\n    // if we have a known cluster time, gossip it\n    if (clusterTime) {\n      finalCmd.$clusterTime = clusterTime;\n    }\n\n    if (isSharded(this) && !shouldUseOpMsg && readPreference && readPreference.mode !== 'primary') {\n      finalCmd = {\n        $query: finalCmd,\n        $readPreference: readPreference.toJSON()\n      };\n    }\n\n    const commandOptions: Document = Object.assign(\n      {\n        command: true,\n        numberToSkip: 0,\n        numberToReturn: -1,\n        checkKeys: false,\n        // This value is not overridable\n        secondaryOk: readPreference.secondaryOk()\n      },\n      options\n    );\n\n    const cmdNs = `${ns.db}.$cmd`;\n    const message = shouldUseOpMsg\n      ? new Msg(cmdNs, finalCmd, commandOptions)\n      : new Query(cmdNs, finalCmd, commandOptions);\n\n    try {\n      write(this, message, commandOptions, callback);\n    } catch (err) {\n      callback(err);\n    }\n  }\n}\n\n/** @internal */\nexport class CryptoConnection extends Connection {\n  /** @internal */\n  [kAutoEncrypter]?: AutoEncrypter;\n\n  constructor(stream: Stream, options: ConnectionOptions) {\n    super(stream, options);\n    this[kAutoEncrypter] = options.autoEncrypter;\n  }\n\n  /** @internal @override */\n  override command(\n    ns: MongoDBNamespace,\n    cmd: Document,\n    options: CommandOptions,\n    callback: Callback\n  ): void {\n    const autoEncrypter = this[kAutoEncrypter];\n    if (!autoEncrypter) {\n      return callback(new MongoMissingDependencyError('No AutoEncrypter available for encryption'));\n    }\n\n    const serverWireVersion = maxWireVersion(this);\n    if (serverWireVersion === 0) {\n      // This means the initial handshake hasn't happened yet\n      return super.command(ns, cmd, options, callback);\n    }\n\n    if (serverWireVersion < 8) {\n      callback(\n        new MongoCompatibilityError('Auto-encryption requires a minimum MongoDB version of 4.2')\n      );\n      return;\n    }\n\n    autoEncrypter.encrypt(ns.toString(), cmd, options, (err, encrypted) => {\n      if (err || encrypted == null) {\n        callback(err, null);\n        return;\n      }\n      super.command(ns, encrypted, options, (err, response) => {\n        if (err || response == null) {\n          callback(err, response);\n          return;\n        }\n\n        autoEncrypter.decrypt(response, options, callback);\n      });\n    });\n  }\n}\n\n/** @internal */\nexport function hasSessionSupport(conn: Connection): boolean {\n  const description = conn.description;\n  return description.logicalSessionTimeoutMinutes != null || !!description.loadBalanced;\n}\n\nfunction supportsOpMsg(conn: Connection) {\n  const description = conn.description;\n  if (description == null) {\n    return false;\n  }\n\n  return maxWireVersion(conn) >= 6 && !description.__nodejs_mock_server__;\n}\n\nfunction streamIdentifier(stream: Stream, options: ConnectionOptions): string {\n  if (options.proxyHost) {\n    // If proxy options are specified, the properties of `stream` itself\n    // will not accurately reflect what endpoint this is connected to.\n    return options.hostAddress.toString();\n  }\n\n  if (typeof stream.address === 'function') {\n    return `${stream.remoteAddress}:${stream.remotePort}`;\n  }\n\n  return uuidV4().toString('hex');\n}\n\nfunction write(\n  conn: Connection,\n  command: WriteProtocolMessageType,\n  options: CommandOptions,\n  callback: Callback\n) {\n  options = options ?? {};\n  const operationDescription: OperationDescription = {\n    requestId: command.requestId,\n    cb: callback,\n    session: options.session,\n    noResponse: typeof options.noResponse === 'boolean' ? options.noResponse : false,\n    documentsReturnedIn: options.documentsReturnedIn,\n    command: !!options.command,\n\n    // for BSON parsing\n    promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\n    promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\n    promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\n    bsonRegExp: typeof options.bsonRegExp === 'boolean' ? options.bsonRegExp : false,\n    enableUtf8Validation:\n      typeof options.enableUtf8Validation === 'boolean' ? options.enableUtf8Validation : true,\n    raw: typeof options.raw === 'boolean' ? options.raw : false,\n    started: 0\n  };\n\n  if (conn[kDescription] && conn[kDescription].compressor) {\n    operationDescription.agreedCompressor = conn[kDescription].compressor;\n\n    if (conn[kDescription].zlibCompressionLevel) {\n      operationDescription.zlibCompressionLevel = conn[kDescription].zlibCompressionLevel;\n    }\n  }\n\n  if (typeof options.socketTimeoutMS === 'number') {\n    operationDescription.socketTimeoutOverride = true;\n    conn[kStream].setTimeout(options.socketTimeoutMS);\n  }\n\n  // if command monitoring is enabled we need to modify the callback here\n  if (conn.monitorCommands) {\n    conn.emit(Connection.COMMAND_STARTED, new CommandStartedEvent(conn, command));\n\n    operationDescription.started = now();\n    operationDescription.cb = (err, reply) => {\n      if (err) {\n        conn.emit(\n          Connection.COMMAND_FAILED,\n          new CommandFailedEvent(conn, command, err, operationDescription.started)\n        );\n      } else {\n        if (reply && (reply.ok === 0 || reply.$err)) {\n          conn.emit(\n            Connection.COMMAND_FAILED,\n            new CommandFailedEvent(conn, command, reply, operationDescription.started)\n          );\n        } else {\n          conn.emit(\n            Connection.COMMAND_SUCCEEDED,\n            new CommandSucceededEvent(conn, command, reply, operationDescription.started)\n          );\n        }\n      }\n\n      if (typeof callback === 'function') {\n        callback(err, reply);\n      }\n    };\n  }\n\n  if (!operationDescription.noResponse) {\n    conn[kQueue].set(operationDescription.requestId, operationDescription);\n  }\n\n  try {\n    conn[kMessageStream].writeCommand(command, operationDescription);\n  } catch (e) {\n    if (!operationDescription.noResponse) {\n      conn[kQueue].delete(operationDescription.requestId);\n      operationDescription.cb(e);\n      return;\n    }\n  }\n\n  if (operationDescription.noResponse) {\n    operationDescription.cb();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}