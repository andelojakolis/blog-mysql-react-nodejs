{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionPool = exports.PoolState = void 0;\n\nconst Denque = require(\"denque\");\n\nconst timers_1 = require(\"timers\");\n\nconst constants_1 = require(\"../constants\");\n\nconst error_1 = require(\"../error\");\n\nconst logger_1 = require(\"../logger\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst utils_1 = require(\"../utils\");\n\nconst connect_1 = require(\"./connect\");\n\nconst connection_1 = require(\"./connection\");\n\nconst connection_pool_events_1 = require(\"./connection_pool_events\");\n\nconst errors_1 = require(\"./errors\");\n\nconst metrics_1 = require(\"./metrics\");\n/** @internal */\n\n\nconst kLogger = Symbol('logger');\n/** @internal */\n\nconst kConnections = Symbol('connections');\n/** @internal */\n\nconst kPending = Symbol('pending');\n/** @internal */\n\nconst kCheckedOut = Symbol('checkedOut');\n/** @internal */\n\nconst kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\n/** @internal */\n\nconst kGeneration = Symbol('generation');\n/** @internal */\n\nconst kServiceGenerations = Symbol('serviceGenerations');\n/** @internal */\n\nconst kConnectionCounter = Symbol('connectionCounter');\n/** @internal */\n\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\n\nconst kWaitQueue = Symbol('waitQueue');\n/** @internal */\n\nconst kCancelled = Symbol('cancelled');\n/** @internal */\n\nconst kMetrics = Symbol('metrics');\n/** @internal */\n\nconst kProcessingWaitQueue = Symbol('processingWaitQueue');\n/** @internal */\n\nconst kPoolState = Symbol('poolState');\n/** @internal */\n\nexports.PoolState = Object.freeze({\n  paused: 'paused',\n  ready: 'ready',\n  closed: 'closed'\n});\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\n\nclass ConnectionPool extends mongo_types_1.TypedEventEmitter {\n  /** @internal */\n  constructor(options) {\n    var _a, _b, _c, _d, _e;\n\n    super();\n    this.options = Object.freeze({ ...options,\n      connectionType: connection_1.Connection,\n      maxPoolSize: (_a = options.maxPoolSize) !== null && _a !== void 0 ? _a : 100,\n      minPoolSize: (_b = options.minPoolSize) !== null && _b !== void 0 ? _b : 0,\n      maxConnecting: (_c = options.maxConnecting) !== null && _c !== void 0 ? _c : 2,\n      maxIdleTimeMS: (_d = options.maxIdleTimeMS) !== null && _d !== void 0 ? _d : 0,\n      waitQueueTimeoutMS: (_e = options.waitQueueTimeoutMS) !== null && _e !== void 0 ? _e : 0,\n      autoEncrypter: options.autoEncrypter,\n      metadata: options.metadata\n    });\n\n    if (this.options.minPoolSize > this.options.maxPoolSize) {\n      throw new error_1.MongoInvalidArgumentError('Connection pool minimum size must not be greater than maximum pool size');\n    }\n\n    this[kPoolState] = exports.PoolState.paused;\n    this[kLogger] = new logger_1.Logger('ConnectionPool');\n    this[kConnections] = new Denque();\n    this[kPending] = 0;\n    this[kCheckedOut] = 0;\n    this[kMinPoolSizeTimer] = undefined;\n    this[kGeneration] = 0;\n    this[kServiceGenerations] = new Map();\n    this[kConnectionCounter] = (0, utils_1.makeCounter)(1);\n    this[kCancellationToken] = new mongo_types_1.CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kWaitQueue] = new Denque();\n    this[kMetrics] = new metrics_1.ConnectionPoolMetrics();\n    this[kProcessingWaitQueue] = false;\n    process.nextTick(() => {\n      this.emit(ConnectionPool.CONNECTION_POOL_CREATED, new connection_pool_events_1.ConnectionPoolCreatedEvent(this));\n      this.ensureMinPoolSize();\n    });\n  }\n  /** The address of the endpoint the pool is connected to */\n\n\n  get address() {\n    return this.options.hostAddress.toString();\n  }\n  /**\n   * Check if the pool has been closed\n   *\n   * TODO(NODE-3263): We can remove this property once shell no longer needs it\n   */\n\n\n  get closed() {\n    return this[kPoolState] === exports.PoolState.closed;\n  }\n  /** An integer representing the SDAM generation of the pool */\n\n\n  get generation() {\n    return this[kGeneration];\n  }\n  /** An integer expressing how many total connections (available + pending + in use) the pool currently has */\n\n\n  get totalConnectionCount() {\n    return this.availableConnectionCount + this.pendingConnectionCount + this.currentCheckedOutCount;\n  }\n  /** An integer expressing how many connections are currently available in the pool. */\n\n\n  get availableConnectionCount() {\n    return this[kConnections].length;\n  }\n\n  get pendingConnectionCount() {\n    return this[kPending];\n  }\n\n  get currentCheckedOutCount() {\n    return this[kCheckedOut];\n  }\n\n  get waitQueueSize() {\n    return this[kWaitQueue].length;\n  }\n\n  get loadBalanced() {\n    return this.options.loadBalanced;\n  }\n\n  get serviceGenerations() {\n    return this[kServiceGenerations];\n  }\n  /**\n   * Get the metrics information for the pool when a wait queue timeout occurs.\n   */\n\n\n  waitQueueErrorMetrics() {\n    return this[kMetrics].info(this.options.maxPoolSize);\n  }\n  /**\n   * Set the pool state to \"ready\"\n   */\n\n\n  ready() {\n    this[kPoolState] = exports.PoolState.ready;\n  }\n  /**\n   * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n   * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n   * explicitly destroyed by the new owner.\n   */\n\n\n  checkOut(callback) {\n    this.emit(ConnectionPool.CONNECTION_CHECK_OUT_STARTED, new connection_pool_events_1.ConnectionCheckOutStartedEvent(this));\n\n    if (this.closed) {\n      this.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'poolClosed'));\n      callback(new errors_1.PoolClosedError(this));\n      return;\n    }\n\n    const waitQueueMember = {\n      callback\n    };\n    const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n\n    if (waitQueueTimeoutMS) {\n      waitQueueMember.timer = (0, timers_1.setTimeout)(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        this.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'timeout'));\n        waitQueueMember.callback(new errors_1.WaitQueueTimeoutError(this.loadBalanced ? this.waitQueueErrorMetrics() : 'Timed out while checking out a connection from connection pool', this.address));\n      }, waitQueueTimeoutMS);\n    }\n\n    this[kWaitQueue].push(waitQueueMember);\n    process.nextTick(() => this.processWaitQueue());\n  }\n  /**\n   * Check a connection into the pool.\n   *\n   * @param connection - The connection to check in\n   */\n\n\n  checkIn(connection) {\n    const poolClosed = this.closed;\n    const stale = this.connectionIsStale(connection);\n    const willDestroy = !!(poolClosed || stale || connection.closed);\n\n    if (!willDestroy) {\n      connection.markAvailable();\n      this[kConnections].unshift(connection);\n    }\n\n    this[kCheckedOut]--;\n    this.emit(ConnectionPool.CONNECTION_CHECKED_IN, new connection_pool_events_1.ConnectionCheckedInEvent(this, connection));\n\n    if (willDestroy) {\n      const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n      this.destroyConnection(connection, reason);\n    }\n\n    process.nextTick(() => this.processWaitQueue());\n  }\n  /**\n   * Clear the pool\n   *\n   * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n   * previous generation will eventually be pruned during subsequent checkouts.\n   */\n\n\n  clear(serviceId) {\n    if (this.loadBalanced && serviceId) {\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid); // Only need to worry if the generation exists, since it should\n      // always be there but typescript needs the check.\n\n      if (generation == null) {\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError('Service generations are required in load balancer mode.');\n      } else {\n        // Increment the generation for the service id.\n        this.serviceGenerations.set(sid, generation + 1);\n      }\n    } else {\n      this[kGeneration] += 1;\n    }\n\n    this.emit(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, serviceId));\n  }\n\n  close(_options, _cb) {\n    let options = _options;\n    const callback = _cb !== null && _cb !== void 0 ? _cb : _options;\n\n    if (typeof options === 'function') {\n      options = {};\n    }\n\n    options = Object.assign({\n      force: false\n    }, options);\n\n    if (this.closed) {\n      return callback();\n    } // immediately cancel any in-flight connections\n\n\n    this[kCancellationToken].emit('cancel'); // drain the wait queue\n\n    while (this.waitQueueSize) {\n      const waitQueueMember = this[kWaitQueue].pop();\n\n      if (waitQueueMember) {\n        if (waitQueueMember.timer) {\n          (0, timers_1.clearTimeout)(waitQueueMember.timer);\n        }\n\n        if (!waitQueueMember[kCancelled]) {\n          // TODO(NODE-3483): Replace with MongoConnectionPoolClosedError\n          waitQueueMember.callback(new error_1.MongoRuntimeError('Connection pool closed'));\n        }\n      }\n    } // clear the min pool size timer\n\n\n    const minPoolSizeTimer = this[kMinPoolSizeTimer];\n\n    if (minPoolSizeTimer) {\n      (0, timers_1.clearTimeout)(minPoolSizeTimer);\n    } // end the connection counter\n\n\n    if (typeof this[kConnectionCounter].return === 'function') {\n      this[kConnectionCounter].return(undefined);\n    } // mark the pool as closed immediately\n\n\n    this[kPoolState] = exports.PoolState.closed;\n    (0, utils_1.eachAsync)(this[kConnections].toArray(), (conn, cb) => {\n      this.emit(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, conn, 'poolClosed'));\n      conn.destroy(options, cb);\n    }, err => {\n      this[kConnections].clear();\n      this.emit(ConnectionPool.CONNECTION_POOL_CLOSED, new connection_pool_events_1.ConnectionPoolClosedEvent(this));\n      callback(err);\n    });\n  }\n  /**\n   * Runs a lambda with an implicitly checked out connection, checking that connection back in when the lambda\n   * has completed by calling back.\n   *\n   * NOTE: please note the required signature of `fn`\n   *\n   * @remarks When in load balancer mode, connections can be pinned to cursors or transactions.\n   *   In these cases we pass the connection in to this method to ensure it is used and a new\n   *   connection is not checked out.\n   *\n   * @param conn - A pinned connection for use in load balancing mode.\n   * @param fn - A function which operates on a managed connection\n   * @param callback - The original callback\n   */\n\n\n  withConnection(conn, fn, callback) {\n    if (conn) {\n      // use the provided connection, and do _not_ check it in after execution\n      fn(undefined, conn, (fnErr, result) => {\n        if (typeof callback === 'function') {\n          if (fnErr) {\n            callback(fnErr);\n          } else {\n            callback(undefined, result);\n          }\n        }\n      });\n      return;\n    }\n\n    this.checkOut((err, conn) => {\n      // don't callback with `err` here, we might want to act upon it inside `fn`\n      fn(err, conn, (fnErr, result) => {\n        if (typeof callback === 'function') {\n          if (fnErr) {\n            callback(fnErr);\n          } else {\n            callback(undefined, result);\n          }\n        }\n\n        if (conn) {\n          this.checkIn(conn);\n        }\n      });\n    });\n  }\n\n  destroyConnection(connection, reason) {\n    this.emit(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, connection, reason)); // destroy the connection\n\n    process.nextTick(() => connection.destroy());\n  }\n\n  connectionIsStale(connection) {\n    const serviceId = connection.serviceId;\n\n    if (this.loadBalanced && serviceId) {\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid);\n      return connection.generation !== generation;\n    }\n\n    return connection.generation !== this[kGeneration];\n  }\n\n  connectionIsIdle(connection) {\n    return !!(this.options.maxIdleTimeMS && connection.idleTime > this.options.maxIdleTimeMS);\n  }\n\n  connectionIsPerished(connection) {\n    const isStale = this.connectionIsStale(connection);\n    const isIdle = this.connectionIsIdle(connection);\n\n    if (!isStale && !isIdle && !connection.closed) {\n      return false;\n    }\n\n    const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n    this.destroyConnection(connection, reason);\n    return true;\n  }\n\n  createConnection(callback) {\n    const connectOptions = { ...this.options,\n      id: this[kConnectionCounter].next().value,\n      generation: this[kGeneration],\n      cancellationToken: this[kCancellationToken]\n    };\n    this[kPending]++; // This is our version of a \"virtual\" no-I/O connection as the spec requires\n\n    this.emit(ConnectionPool.CONNECTION_CREATED, new connection_pool_events_1.ConnectionCreatedEvent(this, {\n      id: connectOptions.id\n    }));\n    (0, connect_1.connect)(connectOptions, (err, connection) => {\n      if (err || !connection) {\n        this[kLogger].debug(`connection attempt failed with error [${JSON.stringify(err)}]`);\n        callback(err);\n        return;\n      } // The pool might have closed since we started trying to create a connection\n\n\n      if (this.closed) {\n        this[kPending]--;\n        connection.destroy({\n          force: true\n        });\n        return;\n      } // forward all events from the connection to the pool\n\n\n      for (const event of [...constants_1.APM_EVENTS, connection_1.Connection.CLUSTER_TIME_RECEIVED]) {\n        connection.on(event, e => this.emit(event, e));\n      }\n\n      if (this.loadBalanced) {\n        connection.on(connection_1.Connection.PINNED, pinType => this[kMetrics].markPinned(pinType));\n        connection.on(connection_1.Connection.UNPINNED, pinType => this[kMetrics].markUnpinned(pinType));\n        const serviceId = connection.serviceId;\n\n        if (serviceId) {\n          let generation;\n          const sid = serviceId.toHexString();\n\n          if (generation = this.serviceGenerations.get(sid)) {\n            connection.generation = generation;\n          } else {\n            this.serviceGenerations.set(sid, 0);\n            connection.generation = 0;\n          }\n        }\n      }\n\n      connection.markAvailable();\n      this.emit(ConnectionPool.CONNECTION_READY, new connection_pool_events_1.ConnectionReadyEvent(this, connection));\n      callback(undefined, connection);\n      return;\n    });\n  }\n\n  ensureMinPoolSize() {\n    const minPoolSize = this.options.minPoolSize;\n\n    if (this.closed || minPoolSize === 0) {\n      return;\n    }\n\n    if (this.totalConnectionCount < minPoolSize && this.pendingConnectionCount < this.options.maxConnecting) {\n      // NOTE: ensureMinPoolSize should not try to get all the pending\n      // connection permits because that potentially delays the availability of\n      // the connection to a checkout request\n      this.createConnection((err, connection) => {\n        this[kPending]--;\n\n        if (!err && connection) {\n          this[kConnections].push(connection);\n          process.nextTick(() => this.processWaitQueue());\n        }\n\n        this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), 10);\n      });\n    } else {\n      this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), 100);\n    }\n  }\n\n  processWaitQueue() {\n    if (this.closed || this[kProcessingWaitQueue]) {\n      return;\n    }\n\n    this[kProcessingWaitQueue] = true;\n\n    while (this.waitQueueSize) {\n      const waitQueueMember = this[kWaitQueue].peekFront();\n\n      if (!waitQueueMember) {\n        this[kWaitQueue].shift();\n        continue;\n      }\n\n      if (waitQueueMember[kCancelled]) {\n        this[kWaitQueue].shift();\n        continue;\n      }\n\n      if (!this.availableConnectionCount) {\n        break;\n      }\n\n      const connection = this[kConnections].shift();\n\n      if (!connection) {\n        break;\n      }\n\n      if (!this.connectionIsPerished(connection)) {\n        this[kCheckedOut]++;\n        this.emit(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection));\n\n        if (waitQueueMember.timer) {\n          (0, timers_1.clearTimeout)(waitQueueMember.timer);\n        }\n\n        this[kWaitQueue].shift();\n        waitQueueMember.callback(undefined, connection);\n      }\n    }\n\n    const {\n      maxPoolSize,\n      maxConnecting\n    } = this.options;\n\n    while (this.waitQueueSize > 0 && this.pendingConnectionCount < maxConnecting && (maxPoolSize === 0 || this.totalConnectionCount < maxPoolSize)) {\n      const waitQueueMember = this[kWaitQueue].shift();\n\n      if (!waitQueueMember || waitQueueMember[kCancelled]) {\n        continue;\n      }\n\n      this.createConnection((err, connection) => {\n        this[kPending]--;\n\n        if (waitQueueMember[kCancelled]) {\n          if (!err && connection) {\n            this[kConnections].push(connection);\n          }\n        } else {\n          if (err) {\n            this.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, err));\n          } else if (connection) {\n            this[kCheckedOut]++;\n            this.emit(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection));\n          }\n\n          if (waitQueueMember.timer) {\n            (0, timers_1.clearTimeout)(waitQueueMember.timer);\n          }\n\n          waitQueueMember.callback(err, connection);\n        }\n\n        process.nextTick(() => this.processWaitQueue());\n      });\n    }\n\n    this[kProcessingWaitQueue] = false;\n  }\n\n}\n\nexports.ConnectionPool = ConnectionPool;\n/**\n * Emitted when the connection pool is created.\n * @event\n */\n\nConnectionPool.CONNECTION_POOL_CREATED = constants_1.CONNECTION_POOL_CREATED;\n/**\n * Emitted once when the connection pool is closed\n * @event\n */\n\nConnectionPool.CONNECTION_POOL_CLOSED = constants_1.CONNECTION_POOL_CLOSED;\n/**\n * Emitted each time the connection pool is cleared and it's generation incremented\n * @event\n */\n\nConnectionPool.CONNECTION_POOL_CLEARED = constants_1.CONNECTION_POOL_CLEARED;\n/**\n * Emitted when a connection is created.\n * @event\n */\n\nConnectionPool.CONNECTION_CREATED = constants_1.CONNECTION_CREATED;\n/**\n * Emitted when a connection becomes established, and is ready to use\n * @event\n */\n\nConnectionPool.CONNECTION_READY = constants_1.CONNECTION_READY;\n/**\n * Emitted when a connection is closed\n * @event\n */\n\nConnectionPool.CONNECTION_CLOSED = constants_1.CONNECTION_CLOSED;\n/**\n * Emitted when an attempt to check out a connection begins\n * @event\n */\n\nConnectionPool.CONNECTION_CHECK_OUT_STARTED = constants_1.CONNECTION_CHECK_OUT_STARTED;\n/**\n * Emitted when an attempt to check out a connection fails\n * @event\n */\n\nConnectionPool.CONNECTION_CHECK_OUT_FAILED = constants_1.CONNECTION_CHECK_OUT_FAILED;\n/**\n * Emitted each time a connection is successfully checked out of the connection pool\n * @event\n */\n\nConnectionPool.CONNECTION_CHECKED_OUT = constants_1.CONNECTION_CHECKED_OUT;\n/**\n * Emitted each time a connection is successfully checked into the connection pool\n * @event\n */\n\nConnectionPool.CONNECTION_CHECKED_IN = constants_1.CONNECTION_CHECKED_IN;","map":{"version":3,"mappings":"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","names":["kLogger","Symbol","kConnections","kPending","kCheckedOut","kMinPoolSizeTimer","kGeneration","kServiceGenerations","kConnectionCounter","kCancellationToken","kWaitQueue","kCancelled","kMetrics","kProcessingWaitQueue","kPoolState","exports","Object","freeze","paused","ready","closed","ConnectionPool","mongo_types_1","constructor","options","connectionType","connection_1","maxPoolSize","_a","minPoolSize","_b","maxConnecting","_c","maxIdleTimeMS","_d","waitQueueTimeoutMS","_e","autoEncrypter","metadata","error_1","logger_1","Denque","undefined","Map","setMaxListeners","Infinity","metrics_1","process","nextTick","emit","CONNECTION_POOL_CREATED","connection_pool_events_1","ensureMinPoolSize","address","hostAddress","toString","generation","totalConnectionCount","availableConnectionCount","pendingConnectionCount","currentCheckedOutCount","length","waitQueueSize","loadBalanced","serviceGenerations","waitQueueErrorMetrics","info","checkOut","callback","CONNECTION_CHECK_OUT_STARTED","CONNECTION_CHECK_OUT_FAILED","errors_1","waitQueueMember","timer","push","processWaitQueue","checkIn","connection","poolClosed","stale","connectionIsStale","willDestroy","markAvailable","unshift","CONNECTION_CHECKED_IN","reason","destroyConnection","clear","serviceId","sid","toHexString","get","set","CONNECTION_POOL_CLEARED","close","_options","_cb","assign","force","pop","minPoolSizeTimer","return","toArray","conn","cb","CONNECTION_CLOSED","destroy","err","CONNECTION_POOL_CLOSED","withConnection","fn","fnErr","result","connectionIsIdle","idleTime","connectionIsPerished","isStale","isIdle","createConnection","connectOptions","id","next","value","cancellationToken","CONNECTION_CREATED","debug","JSON","stringify","event","constants_1","CLUSTER_TIME_RECEIVED","on","e","PINNED","pinType","markPinned","UNPINNED","markUnpinned","CONNECTION_READY","peekFront","shift","CONNECTION_CHECKED_OUT"],"sources":["C:\\Users\\Anđelo\\node_modules\\mongodb\\src\\cmap\\connection_pool.ts"],"sourcesContent":["import Denque = require('denque');\nimport { clearTimeout, setTimeout } from 'timers';\n\nimport type { ObjectId } from '../bson';\nimport {\n  APM_EVENTS,\n  CONNECTION_CHECK_OUT_FAILED,\n  CONNECTION_CHECK_OUT_STARTED,\n  CONNECTION_CHECKED_IN,\n  CONNECTION_CHECKED_OUT,\n  CONNECTION_CLOSED,\n  CONNECTION_CREATED,\n  CONNECTION_POOL_CLEARED,\n  CONNECTION_POOL_CLOSED,\n  CONNECTION_POOL_CREATED,\n  CONNECTION_READY\n} from '../constants';\nimport { MongoError, MongoInvalidArgumentError, MongoRuntimeError } from '../error';\nimport { Logger } from '../logger';\nimport { CancellationToken, TypedEventEmitter } from '../mongo_types';\nimport { Callback, eachAsync, makeCounter } from '../utils';\nimport { connect } from './connect';\nimport { Connection, ConnectionEvents, ConnectionOptions } from './connection';\nimport {\n  ConnectionCheckedInEvent,\n  ConnectionCheckedOutEvent,\n  ConnectionCheckOutFailedEvent,\n  ConnectionCheckOutStartedEvent,\n  ConnectionClosedEvent,\n  ConnectionCreatedEvent,\n  ConnectionPoolClearedEvent,\n  ConnectionPoolClosedEvent,\n  ConnectionPoolCreatedEvent,\n  ConnectionReadyEvent\n} from './connection_pool_events';\nimport { PoolClosedError, WaitQueueTimeoutError } from './errors';\nimport { ConnectionPoolMetrics } from './metrics';\n\n/** @internal */\nconst kLogger = Symbol('logger');\n/** @internal */\nconst kConnections = Symbol('connections');\n/** @internal */\nconst kPending = Symbol('pending');\n/** @internal */\nconst kCheckedOut = Symbol('checkedOut');\n/** @internal */\nconst kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kServiceGenerations = Symbol('serviceGenerations');\n/** @internal */\nconst kConnectionCounter = Symbol('connectionCounter');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kMetrics = Symbol('metrics');\n/** @internal */\nconst kProcessingWaitQueue = Symbol('processingWaitQueue');\n/** @internal */\nconst kPoolState = Symbol('poolState');\n\n/** @public */\nexport interface ConnectionPoolOptions extends Omit<ConnectionOptions, 'id' | 'generation'> {\n  /** The maximum number of connections that may be associated with a pool at a given time. This includes in use and available connections. */\n  maxPoolSize: number;\n  /** The minimum number of connections that MUST exist at any moment in a single connection pool. */\n  minPoolSize: number;\n  /** The maximum number of connections that may be in the process of being established concurrently by the connection pool. */\n  maxConnecting: number;\n  /** The maximum amount of time a connection should remain idle in the connection pool before being marked idle. */\n  maxIdleTimeMS: number;\n  /** The maximum amount of time operation execution should wait for a connection to become available. The default is 0 which means there is no limit. */\n  waitQueueTimeoutMS: number;\n  /** If we are in load balancer mode. */\n  loadBalanced: boolean;\n}\n\n/** @internal */\nexport interface WaitQueueMember {\n  callback: Callback<Connection>;\n  timer?: NodeJS.Timeout;\n  [kCancelled]?: boolean;\n}\n\n/** @internal */\nexport const PoolState = Object.freeze({\n  paused: 'paused',\n  ready: 'ready',\n  closed: 'closed'\n} as const);\n\n/** @public */\nexport interface CloseOptions {\n  force?: boolean;\n}\n\n/** @public */\nexport type ConnectionPoolEvents = {\n  connectionPoolCreated(event: ConnectionPoolCreatedEvent): void;\n  connectionPoolClosed(event: ConnectionPoolClosedEvent): void;\n  connectionPoolCleared(event: ConnectionPoolClearedEvent): void;\n  connectionCreated(event: ConnectionCreatedEvent): void;\n  connectionReady(event: ConnectionReadyEvent): void;\n  connectionClosed(event: ConnectionClosedEvent): void;\n  connectionCheckOutStarted(event: ConnectionCheckOutStartedEvent): void;\n  connectionCheckOutFailed(event: ConnectionCheckOutFailedEvent): void;\n  connectionCheckedOut(event: ConnectionCheckedOutEvent): void;\n  connectionCheckedIn(event: ConnectionCheckedInEvent): void;\n} & Omit<ConnectionEvents, 'close' | 'message'>;\n\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\nexport class ConnectionPool extends TypedEventEmitter<ConnectionPoolEvents> {\n  options: Readonly<ConnectionPoolOptions>;\n  /** @internal */\n  [kPoolState]: typeof PoolState[keyof typeof PoolState];\n  /** @internal */\n  [kLogger]: Logger;\n  /** @internal */\n  [kConnections]: Denque<Connection>;\n  /** @internal */\n  [kPending]: number;\n  /** @internal */\n  [kCheckedOut]: number;\n  /** @internal */\n  [kMinPoolSizeTimer]?: NodeJS.Timeout;\n  /**\n   * An integer representing the SDAM generation of the pool\n   * @internal\n   */\n  [kGeneration]: number;\n  /** A map of generations to service ids\n   * @internal\n   */\n  [kServiceGenerations]: Map<string, number>;\n  /** @internal */\n  [kConnectionCounter]: Generator<number>;\n  /** @internal */\n  [kCancellationToken]: CancellationToken;\n  /** @internal */\n  [kWaitQueue]: Denque<WaitQueueMember>;\n  /** @internal */\n  [kMetrics]: ConnectionPoolMetrics;\n  /** @internal */\n  [kProcessingWaitQueue]: boolean;\n\n  /**\n   * Emitted when the connection pool is created.\n   * @event\n   */\n  static readonly CONNECTION_POOL_CREATED = CONNECTION_POOL_CREATED;\n  /**\n   * Emitted once when the connection pool is closed\n   * @event\n   */\n  static readonly CONNECTION_POOL_CLOSED = CONNECTION_POOL_CLOSED;\n  /**\n   * Emitted each time the connection pool is cleared and it's generation incremented\n   * @event\n   */\n  static readonly CONNECTION_POOL_CLEARED = CONNECTION_POOL_CLEARED;\n  /**\n   * Emitted when a connection is created.\n   * @event\n   */\n  static readonly CONNECTION_CREATED = CONNECTION_CREATED;\n  /**\n   * Emitted when a connection becomes established, and is ready to use\n   * @event\n   */\n  static readonly CONNECTION_READY = CONNECTION_READY;\n  /**\n   * Emitted when a connection is closed\n   * @event\n   */\n  static readonly CONNECTION_CLOSED = CONNECTION_CLOSED;\n  /**\n   * Emitted when an attempt to check out a connection begins\n   * @event\n   */\n  static readonly CONNECTION_CHECK_OUT_STARTED = CONNECTION_CHECK_OUT_STARTED;\n  /**\n   * Emitted when an attempt to check out a connection fails\n   * @event\n   */\n  static readonly CONNECTION_CHECK_OUT_FAILED = CONNECTION_CHECK_OUT_FAILED;\n  /**\n   * Emitted each time a connection is successfully checked out of the connection pool\n   * @event\n   */\n  static readonly CONNECTION_CHECKED_OUT = CONNECTION_CHECKED_OUT;\n  /**\n   * Emitted each time a connection is successfully checked into the connection pool\n   * @event\n   */\n  static readonly CONNECTION_CHECKED_IN = CONNECTION_CHECKED_IN;\n\n  /** @internal */\n  constructor(options: ConnectionPoolOptions) {\n    super();\n\n    this.options = Object.freeze({\n      ...options,\n      connectionType: Connection,\n      maxPoolSize: options.maxPoolSize ?? 100,\n      minPoolSize: options.minPoolSize ?? 0,\n      maxConnecting: options.maxConnecting ?? 2,\n      maxIdleTimeMS: options.maxIdleTimeMS ?? 0,\n      waitQueueTimeoutMS: options.waitQueueTimeoutMS ?? 0,\n      autoEncrypter: options.autoEncrypter,\n      metadata: options.metadata\n    });\n\n    if (this.options.minPoolSize > this.options.maxPoolSize) {\n      throw new MongoInvalidArgumentError(\n        'Connection pool minimum size must not be greater than maximum pool size'\n      );\n    }\n\n    this[kPoolState] = PoolState.paused;\n    this[kLogger] = new Logger('ConnectionPool');\n    this[kConnections] = new Denque();\n    this[kPending] = 0;\n    this[kCheckedOut] = 0;\n    this[kMinPoolSizeTimer] = undefined;\n    this[kGeneration] = 0;\n    this[kServiceGenerations] = new Map();\n    this[kConnectionCounter] = makeCounter(1);\n    this[kCancellationToken] = new CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kWaitQueue] = new Denque();\n    this[kMetrics] = new ConnectionPoolMetrics();\n    this[kProcessingWaitQueue] = false;\n\n    process.nextTick(() => {\n      this.emit(ConnectionPool.CONNECTION_POOL_CREATED, new ConnectionPoolCreatedEvent(this));\n      this.ensureMinPoolSize();\n    });\n  }\n\n  /** The address of the endpoint the pool is connected to */\n  get address(): string {\n    return this.options.hostAddress.toString();\n  }\n\n  /**\n   * Check if the pool has been closed\n   *\n   * TODO(NODE-3263): We can remove this property once shell no longer needs it\n   */\n  get closed(): boolean {\n    return this[kPoolState] === PoolState.closed;\n  }\n\n  /** An integer representing the SDAM generation of the pool */\n  get generation(): number {\n    return this[kGeneration];\n  }\n\n  /** An integer expressing how many total connections (available + pending + in use) the pool currently has */\n  get totalConnectionCount(): number {\n    return (\n      this.availableConnectionCount + this.pendingConnectionCount + this.currentCheckedOutCount\n    );\n  }\n\n  /** An integer expressing how many connections are currently available in the pool. */\n  get availableConnectionCount(): number {\n    return this[kConnections].length;\n  }\n\n  get pendingConnectionCount(): number {\n    return this[kPending];\n  }\n\n  get currentCheckedOutCount(): number {\n    return this[kCheckedOut];\n  }\n\n  get waitQueueSize(): number {\n    return this[kWaitQueue].length;\n  }\n\n  get loadBalanced(): boolean {\n    return this.options.loadBalanced;\n  }\n\n  get serviceGenerations(): Map<string, number> {\n    return this[kServiceGenerations];\n  }\n\n  /**\n   * Get the metrics information for the pool when a wait queue timeout occurs.\n   */\n  private waitQueueErrorMetrics(): string {\n    return this[kMetrics].info(this.options.maxPoolSize);\n  }\n\n  /**\n   * Set the pool state to \"ready\"\n   */\n  ready(): void {\n    this[kPoolState] = PoolState.ready;\n  }\n\n  /**\n   * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n   * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n   * explicitly destroyed by the new owner.\n   */\n  checkOut(callback: Callback<Connection>): void {\n    this.emit(\n      ConnectionPool.CONNECTION_CHECK_OUT_STARTED,\n      new ConnectionCheckOutStartedEvent(this)\n    );\n\n    if (this.closed) {\n      this.emit(\n        ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n        new ConnectionCheckOutFailedEvent(this, 'poolClosed')\n      );\n      callback(new PoolClosedError(this));\n      return;\n    }\n\n    const waitQueueMember: WaitQueueMember = { callback };\n    const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n    if (waitQueueTimeoutMS) {\n      waitQueueMember.timer = setTimeout(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n\n        this.emit(\n          ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n          new ConnectionCheckOutFailedEvent(this, 'timeout')\n        );\n        waitQueueMember.callback(\n          new WaitQueueTimeoutError(\n            this.loadBalanced\n              ? this.waitQueueErrorMetrics()\n              : 'Timed out while checking out a connection from connection pool',\n            this.address\n          )\n        );\n      }, waitQueueTimeoutMS);\n    }\n\n    this[kWaitQueue].push(waitQueueMember);\n    process.nextTick(() => this.processWaitQueue());\n  }\n\n  /**\n   * Check a connection into the pool.\n   *\n   * @param connection - The connection to check in\n   */\n  checkIn(connection: Connection): void {\n    const poolClosed = this.closed;\n    const stale = this.connectionIsStale(connection);\n    const willDestroy = !!(poolClosed || stale || connection.closed);\n\n    if (!willDestroy) {\n      connection.markAvailable();\n      this[kConnections].unshift(connection);\n    }\n\n    this[kCheckedOut]--;\n    this.emit(ConnectionPool.CONNECTION_CHECKED_IN, new ConnectionCheckedInEvent(this, connection));\n\n    if (willDestroy) {\n      const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n      this.destroyConnection(connection, reason);\n    }\n\n    process.nextTick(() => this.processWaitQueue());\n  }\n\n  /**\n   * Clear the pool\n   *\n   * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n   * previous generation will eventually be pruned during subsequent checkouts.\n   */\n  clear(serviceId?: ObjectId): void {\n    if (this.loadBalanced && serviceId) {\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid);\n      // Only need to worry if the generation exists, since it should\n      // always be there but typescript needs the check.\n      if (generation == null) {\n        // TODO(NODE-3483)\n        throw new MongoRuntimeError('Service generations are required in load balancer mode.');\n      } else {\n        // Increment the generation for the service id.\n        this.serviceGenerations.set(sid, generation + 1);\n      }\n    } else {\n      this[kGeneration] += 1;\n    }\n\n    this.emit(\n      ConnectionPool.CONNECTION_POOL_CLEARED,\n      new ConnectionPoolClearedEvent(this, serviceId)\n    );\n  }\n\n  /** Close the pool */\n  close(callback: Callback<void>): void;\n  close(options: CloseOptions, callback: Callback<void>): void;\n  close(_options?: CloseOptions | Callback<void>, _cb?: Callback<void>): void {\n    let options = _options as CloseOptions;\n    const callback = (_cb ?? _options) as Callback<void>;\n    if (typeof options === 'function') {\n      options = {};\n    }\n\n    options = Object.assign({ force: false }, options);\n    if (this.closed) {\n      return callback();\n    }\n\n    // immediately cancel any in-flight connections\n    this[kCancellationToken].emit('cancel');\n\n    // drain the wait queue\n    while (this.waitQueueSize) {\n      const waitQueueMember = this[kWaitQueue].pop();\n      if (waitQueueMember) {\n        if (waitQueueMember.timer) {\n          clearTimeout(waitQueueMember.timer);\n        }\n        if (!waitQueueMember[kCancelled]) {\n          // TODO(NODE-3483): Replace with MongoConnectionPoolClosedError\n          waitQueueMember.callback(new MongoRuntimeError('Connection pool closed'));\n        }\n      }\n    }\n\n    // clear the min pool size timer\n    const minPoolSizeTimer = this[kMinPoolSizeTimer];\n    if (minPoolSizeTimer) {\n      clearTimeout(minPoolSizeTimer);\n    }\n\n    // end the connection counter\n    if (typeof this[kConnectionCounter].return === 'function') {\n      this[kConnectionCounter].return(undefined);\n    }\n\n    // mark the pool as closed immediately\n    this[kPoolState] = PoolState.closed;\n    eachAsync<Connection>(\n      this[kConnections].toArray(),\n      (conn, cb) => {\n        this.emit(\n          ConnectionPool.CONNECTION_CLOSED,\n          new ConnectionClosedEvent(this, conn, 'poolClosed')\n        );\n        conn.destroy(options, cb);\n      },\n      err => {\n        this[kConnections].clear();\n        this.emit(ConnectionPool.CONNECTION_POOL_CLOSED, new ConnectionPoolClosedEvent(this));\n        callback(err);\n      }\n    );\n  }\n\n  /**\n   * Runs a lambda with an implicitly checked out connection, checking that connection back in when the lambda\n   * has completed by calling back.\n   *\n   * NOTE: please note the required signature of `fn`\n   *\n   * @remarks When in load balancer mode, connections can be pinned to cursors or transactions.\n   *   In these cases we pass the connection in to this method to ensure it is used and a new\n   *   connection is not checked out.\n   *\n   * @param conn - A pinned connection for use in load balancing mode.\n   * @param fn - A function which operates on a managed connection\n   * @param callback - The original callback\n   */\n  withConnection(\n    conn: Connection | undefined,\n    fn: WithConnectionCallback,\n    callback?: Callback<Connection>\n  ): void {\n    if (conn) {\n      // use the provided connection, and do _not_ check it in after execution\n      fn(undefined, conn, (fnErr, result) => {\n        if (typeof callback === 'function') {\n          if (fnErr) {\n            callback(fnErr);\n          } else {\n            callback(undefined, result);\n          }\n        }\n      });\n\n      return;\n    }\n\n    this.checkOut((err, conn) => {\n      // don't callback with `err` here, we might want to act upon it inside `fn`\n      fn(err as MongoError, conn, (fnErr, result) => {\n        if (typeof callback === 'function') {\n          if (fnErr) {\n            callback(fnErr);\n          } else {\n            callback(undefined, result);\n          }\n        }\n\n        if (conn) {\n          this.checkIn(conn);\n        }\n      });\n    });\n  }\n\n  private destroyConnection(connection: Connection, reason: string) {\n    this.emit(\n      ConnectionPool.CONNECTION_CLOSED,\n      new ConnectionClosedEvent(this, connection, reason)\n    );\n\n    // destroy the connection\n    process.nextTick(() => connection.destroy());\n  }\n\n  private connectionIsStale(connection: Connection) {\n    const serviceId = connection.serviceId;\n    if (this.loadBalanced && serviceId) {\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid);\n      return connection.generation !== generation;\n    }\n\n    return connection.generation !== this[kGeneration];\n  }\n\n  private connectionIsIdle(connection: Connection) {\n    return !!(this.options.maxIdleTimeMS && connection.idleTime > this.options.maxIdleTimeMS);\n  }\n\n  private connectionIsPerished(connection: Connection) {\n    const isStale = this.connectionIsStale(connection);\n    const isIdle = this.connectionIsIdle(connection);\n    if (!isStale && !isIdle && !connection.closed) {\n      return false;\n    }\n    const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n    this.destroyConnection(connection, reason);\n    return true;\n  }\n\n  private createConnection(callback: Callback<Connection>) {\n    const connectOptions: ConnectionOptions = {\n      ...this.options,\n      id: this[kConnectionCounter].next().value,\n      generation: this[kGeneration],\n      cancellationToken: this[kCancellationToken]\n    };\n\n    this[kPending]++;\n    // This is our version of a \"virtual\" no-I/O connection as the spec requires\n    this.emit(\n      ConnectionPool.CONNECTION_CREATED,\n      new ConnectionCreatedEvent(this, { id: connectOptions.id })\n    );\n\n    connect(connectOptions, (err, connection) => {\n      if (err || !connection) {\n        this[kLogger].debug(`connection attempt failed with error [${JSON.stringify(err)}]`);\n        callback(err);\n        return;\n      }\n\n      // The pool might have closed since we started trying to create a connection\n      if (this.closed) {\n        this[kPending]--;\n        connection.destroy({ force: true });\n        return;\n      }\n\n      // forward all events from the connection to the pool\n      for (const event of [...APM_EVENTS, Connection.CLUSTER_TIME_RECEIVED]) {\n        connection.on(event, (e: any) => this.emit(event, e));\n      }\n\n      if (this.loadBalanced) {\n        connection.on(Connection.PINNED, pinType => this[kMetrics].markPinned(pinType));\n        connection.on(Connection.UNPINNED, pinType => this[kMetrics].markUnpinned(pinType));\n\n        const serviceId = connection.serviceId;\n        if (serviceId) {\n          let generation;\n          const sid = serviceId.toHexString();\n          if ((generation = this.serviceGenerations.get(sid))) {\n            connection.generation = generation;\n          } else {\n            this.serviceGenerations.set(sid, 0);\n            connection.generation = 0;\n          }\n        }\n      }\n\n      connection.markAvailable();\n      this.emit(ConnectionPool.CONNECTION_READY, new ConnectionReadyEvent(this, connection));\n\n      callback(undefined, connection);\n      return;\n    });\n  }\n\n  private ensureMinPoolSize() {\n    const minPoolSize = this.options.minPoolSize;\n    if (this.closed || minPoolSize === 0) {\n      return;\n    }\n\n    if (\n      this.totalConnectionCount < minPoolSize &&\n      this.pendingConnectionCount < this.options.maxConnecting\n    ) {\n      // NOTE: ensureMinPoolSize should not try to get all the pending\n      // connection permits because that potentially delays the availability of\n      // the connection to a checkout request\n      this.createConnection((err, connection) => {\n        this[kPending]--;\n        if (!err && connection) {\n          this[kConnections].push(connection);\n          process.nextTick(() => this.processWaitQueue());\n        }\n        this[kMinPoolSizeTimer] = setTimeout(() => this.ensureMinPoolSize(), 10);\n      });\n    } else {\n      this[kMinPoolSizeTimer] = setTimeout(() => this.ensureMinPoolSize(), 100);\n    }\n  }\n\n  private processWaitQueue() {\n    if (this.closed || this[kProcessingWaitQueue]) {\n      return;\n    }\n\n    this[kProcessingWaitQueue] = true;\n\n    while (this.waitQueueSize) {\n      const waitQueueMember = this[kWaitQueue].peekFront();\n      if (!waitQueueMember) {\n        this[kWaitQueue].shift();\n        continue;\n      }\n\n      if (waitQueueMember[kCancelled]) {\n        this[kWaitQueue].shift();\n        continue;\n      }\n\n      if (!this.availableConnectionCount) {\n        break;\n      }\n\n      const connection = this[kConnections].shift();\n      if (!connection) {\n        break;\n      }\n\n      if (!this.connectionIsPerished(connection)) {\n        this[kCheckedOut]++;\n        this.emit(\n          ConnectionPool.CONNECTION_CHECKED_OUT,\n          new ConnectionCheckedOutEvent(this, connection)\n        );\n        if (waitQueueMember.timer) {\n          clearTimeout(waitQueueMember.timer);\n        }\n\n        this[kWaitQueue].shift();\n        waitQueueMember.callback(undefined, connection);\n      }\n    }\n\n    const { maxPoolSize, maxConnecting } = this.options;\n    while (\n      this.waitQueueSize > 0 &&\n      this.pendingConnectionCount < maxConnecting &&\n      (maxPoolSize === 0 || this.totalConnectionCount < maxPoolSize)\n    ) {\n      const waitQueueMember = this[kWaitQueue].shift();\n      if (!waitQueueMember || waitQueueMember[kCancelled]) {\n        continue;\n      }\n      this.createConnection((err, connection) => {\n        this[kPending]--;\n        if (waitQueueMember[kCancelled]) {\n          if (!err && connection) {\n            this[kConnections].push(connection);\n          }\n        } else {\n          if (err) {\n            this.emit(\n              ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n              new ConnectionCheckOutFailedEvent(this, err)\n            );\n          } else if (connection) {\n            this[kCheckedOut]++;\n            this.emit(\n              ConnectionPool.CONNECTION_CHECKED_OUT,\n              new ConnectionCheckedOutEvent(this, connection)\n            );\n          }\n\n          if (waitQueueMember.timer) {\n            clearTimeout(waitQueueMember.timer);\n          }\n          waitQueueMember.callback(err, connection);\n        }\n        process.nextTick(() => this.processWaitQueue());\n      });\n    }\n    this[kProcessingWaitQueue] = false;\n  }\n}\n\n/**\n * A callback provided to `withConnection`\n * @internal\n *\n * @param error - An error instance representing the error during the execution.\n * @param connection - The managed connection which was checked out of the pool.\n * @param callback - A function to call back after connection management is complete\n */\nexport type WithConnectionCallback = (\n  error: MongoError | undefined,\n  connection: Connection | undefined,\n  callback: Callback<Connection>\n) => void;\n"]},"metadata":{},"sourceType":"script"}