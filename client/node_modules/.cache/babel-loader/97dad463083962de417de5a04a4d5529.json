{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChangeStream = void 0;\n\nconst util_1 = require(\"util\");\n\nconst collection_1 = require(\"./collection\");\n\nconst constants_1 = require(\"./constants\");\n\nconst change_stream_cursor_1 = require(\"./cursor/change_stream_cursor\");\n\nconst db_1 = require(\"./db\");\n\nconst error_1 = require(\"./error\");\n\nconst mongo_client_1 = require(\"./mongo_client\");\n\nconst mongo_types_1 = require(\"./mongo_types\");\n\nconst utils_1 = require(\"./utils\");\n/** @internal */\n\n\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\n\nconst kClosed = Symbol('closed');\n/** @internal */\n\nconst kMode = Symbol('mode');\nconst CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument', 'fullDocumentBeforeChange', 'showExpandedEvents'];\nconst CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\nconst CHANGE_STREAM_EVENTS = [constants_1.RESUME_TOKEN_CHANGED, constants_1.END, constants_1.CLOSE];\nconst NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\n\nclass ChangeStream extends mongo_types_1.TypedEventEmitter {\n  /**\n   * @internal\n   *\n   * @param parent - The parent object that created this change stream\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n   */\n  constructor(parent) {\n    let pipeline = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super();\n    /**\n     * @internal\n     *\n     * TODO(NODE-4320): promisify selectServer and refactor this code to be async\n     *\n     * we promisify _processErrorIteratorModeCallback until we have a promisifed version of selectServer.\n     */\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n\n    this._processErrorIteratorMode = (0, util_1.promisify)(this._processErrorIteratorModeCallback);\n    this.pipeline = pipeline;\n    this.options = options;\n\n    if (parent instanceof collection_1.Collection) {\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n    } else if (parent instanceof db_1.Db) {\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n    } else if (parent instanceof mongo_client_1.MongoClient) {\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n    } else {\n      throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n    }\n\n    this.parent = parent;\n    this.namespace = parent.s.namespace;\n\n    if (!this.options.readPreference && parent.readPreference) {\n      this.options.readPreference = parent.readPreference;\n    } // Create contained Change Stream cursor\n\n\n    this.cursor = this._createChangeStreamCursor(options);\n    this[kClosed] = false;\n    this[kMode] = false; // Listen for any `change` listeners being added to ChangeStream\n\n    this.on('newListener', eventName => {\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n        this._streamEvents(this.cursor);\n      }\n    });\n    this.on('removeListener', eventName => {\n      var _a;\n\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n        (_a = this[kCursorStream]) === null || _a === void 0 ? void 0 : _a.removeAllListeners('data');\n      }\n    });\n  }\n  /** @internal */\n\n\n  get cursorStream() {\n    return this[kCursorStream];\n  }\n  /** The cached resume token that is used to resume after the most recently returned change. */\n\n\n  get resumeToken() {\n    var _a;\n\n    return (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.resumeToken;\n  }\n\n  hasNext(callback) {\n    this._setIsIterator(); // TOOD(NODE-4319): Add eslint rule preventing accidental variable shadowing\n    // Shadowing is intentional here.  We want to override the `callback` variable\n    // from the outer scope so that the inner scope doesn't accidentally call the wrong callback.\n\n\n    return (0, utils_1.maybePromise)(callback, callback => {\n      (async () => {\n        try {\n          const hasNext = await this.cursor.hasNext();\n          return hasNext;\n        } catch (error) {\n          try {\n            await this._processErrorIteratorMode(error);\n            const hasNext = await this.cursor.hasNext();\n            return hasNext;\n          } catch (error) {\n            await this.close().catch(err => err);\n            throw error;\n          }\n        }\n      })().then(hasNext => callback(undefined, hasNext), error => callback(error));\n    });\n  }\n\n  next(callback) {\n    this._setIsIterator(); // TOOD(NODE-4319): Add eslint rule preventing accidental variable shadowing\n    // Shadowing is intentional here.  We want to override the `callback` variable\n    // from the outer scope so that the inner scope doesn't accidentally call the wrong callback.\n\n\n    return (0, utils_1.maybePromise)(callback, callback => {\n      (async () => {\n        try {\n          const change = await this.cursor.next();\n\n          const processedChange = this._processChange(change !== null && change !== void 0 ? change : null);\n\n          return processedChange;\n        } catch (error) {\n          try {\n            await this._processErrorIteratorMode(error);\n            const change = await this.cursor.next();\n\n            const processedChange = this._processChange(change !== null && change !== void 0 ? change : null);\n\n            return processedChange;\n          } catch (error) {\n            await this.close().catch(err => err);\n            throw error;\n          }\n        }\n      })().then(change => callback(undefined, change), error => callback(error));\n    });\n  }\n\n  tryNext(callback) {\n    this._setIsIterator(); // TOOD(NODE-4319): Add eslint rule preventing accidental variable shadowing\n    // Shadowing is intentional here.  We want to override the `callback` variable\n    // from the outer scope so that the inner scope doesn't accidentally call the wrong callback.\n\n\n    return (0, utils_1.maybePromise)(callback, callback => {\n      (async () => {\n        try {\n          const change = await this.cursor.tryNext();\n          return change !== null && change !== void 0 ? change : null;\n        } catch (error) {\n          try {\n            await this._processErrorIteratorMode(error);\n            const change = await this.cursor.tryNext();\n            return change !== null && change !== void 0 ? change : null;\n          } catch (error) {\n            await this.close().catch(err => err);\n            throw error;\n          }\n        }\n      })().then(change => callback(undefined, change), error => callback(error));\n    });\n  }\n  /** Is the cursor closed */\n\n\n  get closed() {\n    return this[kClosed] || this.cursor.closed;\n  }\n\n  close(callback) {\n    this[kClosed] = true;\n    return (0, utils_1.maybePromise)(callback, cb => {\n      const cursor = this.cursor;\n      return cursor.close(err => {\n        this._endStream();\n\n        return cb(err);\n      });\n    });\n  }\n  /**\n   * Return a modified Readable stream including a possible transform method.\n   *\n   * NOTE: When using a Stream to process change stream events, the stream will\n   * NOT automatically resume in the case a resumable error is encountered.\n   *\n   * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\n   */\n\n\n  stream(options) {\n    if (this.closed) {\n      throw new error_1.MongoChangeStreamError(CHANGESTREAM_CLOSED_ERROR);\n    }\n\n    this.streamOptions = options;\n    return this.cursor.stream(options);\n  }\n  /** @internal */\n\n\n  _setIsEmitter() {\n    if (this[kMode] === 'iterator') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n    }\n\n    this[kMode] = 'emitter';\n  }\n  /** @internal */\n\n\n  _setIsIterator() {\n    if (this[kMode] === 'emitter') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n    }\n\n    this[kMode] = 'iterator';\n  }\n  /**\n   * Create a new change stream cursor based on self's configuration\n   * @internal\n   */\n\n\n  _createChangeStreamCursor(options) {\n    const changeStreamStageOptions = (0, utils_1.filterOptions)(options, CHANGE_STREAM_OPTIONS);\n\n    if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n      changeStreamStageOptions.allChangesForCluster = true;\n    }\n\n    const pipeline = [{\n      $changeStream: changeStreamStageOptions\n    }, ...this.pipeline];\n    const client = this.type === CHANGE_DOMAIN_TYPES.CLUSTER ? this.parent : this.type === CHANGE_DOMAIN_TYPES.DATABASE ? this.parent.s.client : this.type === CHANGE_DOMAIN_TYPES.COLLECTION ? this.parent.s.db.s.client : null;\n\n    if (client == null) {\n      // This should never happen because of the assertion in the constructor\n      throw new error_1.MongoRuntimeError(`Changestream type should only be one of cluster, database, collection. Found ${this.type.toString()}`);\n    }\n\n    const changeStreamCursor = new change_stream_cursor_1.ChangeStreamCursor(client, this.namespace, pipeline, options);\n\n    for (const event of CHANGE_STREAM_EVENTS) {\n      changeStreamCursor.on(event, e => this.emit(event, e));\n    }\n\n    if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n      this._streamEvents(changeStreamCursor);\n    }\n\n    return changeStreamCursor;\n  }\n  /** @internal */\n\n\n  _closeEmitterModeWithError(error) {\n    this.emit(ChangeStream.ERROR, error);\n    this.close(() => {// nothing to do\n    });\n  }\n  /** @internal */\n\n\n  _streamEvents(cursor) {\n    var _a;\n\n    this._setIsEmitter();\n\n    const stream = (_a = this[kCursorStream]) !== null && _a !== void 0 ? _a : cursor.stream();\n    this[kCursorStream] = stream;\n    stream.on('data', change => {\n      try {\n        const processedChange = this._processChange(change);\n\n        this.emit(ChangeStream.CHANGE, processedChange);\n      } catch (error) {\n        this.emit(ChangeStream.ERROR, error);\n      }\n    });\n    stream.on('error', error => this._processErrorStreamMode(error));\n  }\n  /** @internal */\n\n\n  _endStream() {\n    const cursorStream = this[kCursorStream];\n\n    if (cursorStream) {\n      ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n      cursorStream.destroy();\n    }\n\n    this[kCursorStream] = undefined;\n  }\n  /** @internal */\n\n\n  _processChange(change) {\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n    } // a null change means the cursor has been notified, implicitly closing the change stream\n\n\n    if (change == null) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR);\n    }\n\n    if (change && !change._id) {\n      throw new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR);\n    } // cache the resume token\n\n\n    this.cursor.cacheResumeToken(change._id); // wipe the startAtOperationTime if there was one so that there won't be a conflict\n    // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n\n    this.options.startAtOperationTime = undefined;\n    return change;\n  }\n  /** @internal */\n\n\n  _processErrorStreamMode(changeStreamError) {\n    // If the change stream has been closed explicitly, do not process error.\n    if (this[kClosed]) return;\n\n    if ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n      this._endStream();\n\n      this.cursor.close().catch(() => null);\n      const topology = (0, utils_1.getTopology)(this.parent);\n      topology.selectServer(this.cursor.readPreference, {}, serverSelectionError => {\n        if (serverSelectionError) return this._closeEmitterModeWithError(changeStreamError);\n        this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n      });\n    } else {\n      this._closeEmitterModeWithError(changeStreamError);\n    }\n  }\n  /** @internal */\n\n\n  _processErrorIteratorModeCallback(changeStreamError, callback) {\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      return callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    }\n\n    if ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n      this.cursor.close().catch(() => null);\n      const topology = (0, utils_1.getTopology)(this.parent);\n      topology.selectServer(this.cursor.readPreference, {}, serverSelectionError => {\n        // if the topology can't reconnect, close the stream\n        if (serverSelectionError) return this.close(() => callback(changeStreamError));\n        this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n        callback();\n      });\n    } else {\n      this.close(() => callback(changeStreamError));\n    }\n  }\n\n}\n\nexports.ChangeStream = ChangeStream;\n/** @event */\n\nChangeStream.RESPONSE = constants_1.RESPONSE;\n/** @event */\n\nChangeStream.MORE = constants_1.MORE;\n/** @event */\n\nChangeStream.INIT = constants_1.INIT;\n/** @event */\n\nChangeStream.CLOSE = constants_1.CLOSE;\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */\n\nChangeStream.CHANGE = constants_1.CHANGE;\n/** @event */\n\nChangeStream.END = constants_1.END;\n/** @event */\n\nChangeStream.ERROR = constants_1.ERROR;\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */\n\nChangeStream.RESUME_TOKEN_CHANGED = constants_1.RESUME_TOKEN_CHANGED;","map":{"version":3,"mappings":"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","names":["kCursorStream","Symbol","kClosed","kMode","CHANGE_STREAM_OPTIONS","CHANGE_DOMAIN_TYPES","COLLECTION","DATABASE","CLUSTER","CHANGE_STREAM_EVENTS","constants_1","NO_RESUME_TOKEN_ERROR","CHANGESTREAM_CLOSED_ERROR","ChangeStream","mongo_types_1","constructor","parent","pipeline","options","_processErrorIteratorModeCallback","collection_1","type","db_1","mongo_client_1","error_1","namespace","s","readPreference","cursor","_createChangeStreamCursor","on","eventName","listenerCount","_streamEvents","_a","removeAllListeners","cursorStream","resumeToken","hasNext","callback","_setIsIterator","error","_processErrorIteratorMode","close","catch","err","then","undefined","next","change","processedChange","_processChange","tryNext","closed","cb","_endStream","stream","streamOptions","_setIsEmitter","changeStreamStageOptions","allChangesForCluster","$changeStream","client","db","toString","changeStreamCursor","change_stream_cursor_1","event","e","emit","CHANGE","_closeEmitterModeWithError","ERROR","_processErrorStreamMode","forEach","destroy","_id","cacheResumeToken","startAtOperationTime","changeStreamError","maxWireVersion","topology","selectServer","serverSelectionError","resumeOptions","exports"],"sources":["C:\\Users\\Anđelo\\node_modules\\mongodb\\src\\change_stream.ts"],"sourcesContent":["import type { Readable } from 'stream';\nimport { promisify } from 'util';\n\nimport type { Binary, Document, Timestamp } from './bson';\nimport { Collection } from './collection';\nimport { CHANGE, CLOSE, END, ERROR, INIT, MORE, RESPONSE, RESUME_TOKEN_CHANGED } from './constants';\nimport type { AbstractCursorEvents, CursorStreamOptions } from './cursor/abstract_cursor';\nimport { ChangeStreamCursor, ChangeStreamCursorOptions } from './cursor/change_stream_cursor';\nimport { Db } from './db';\nimport {\n  AnyError,\n  isResumableError,\n  MongoAPIError,\n  MongoChangeStreamError,\n  MongoRuntimeError\n} from './error';\nimport { MongoClient } from './mongo_client';\nimport { InferIdType, TypedEventEmitter } from './mongo_types';\nimport type { AggregateOptions } from './operations/aggregate';\nimport type { CollationOptions, OperationParent } from './operations/command';\nimport type { ReadPreference } from './read_preference';\nimport type { ServerSessionId } from './sessions';\nimport { Callback, filterOptions, getTopology, maybePromise, MongoDBNamespace } from './utils';\n\n/** @internal */\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kMode = Symbol('mode');\n\nconst CHANGE_STREAM_OPTIONS = [\n  'resumeAfter',\n  'startAfter',\n  'startAtOperationTime',\n  'fullDocument',\n  'fullDocumentBeforeChange',\n  'showExpandedEvents'\n] as const;\n\nconst CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\n\nconst CHANGE_STREAM_EVENTS = [RESUME_TOKEN_CHANGED, END, CLOSE];\n\nconst NO_RESUME_TOKEN_ERROR =\n  'A change stream document has been received that lacks a resume token (_id).';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n\n/**\n * @public\n * @deprecated Please use the ChangeStreamCursorOptions type instead.\n */\nexport interface ResumeOptions {\n  startAtOperationTime?: Timestamp;\n  batchSize?: number;\n  maxAwaitTimeMS?: number;\n  collation?: CollationOptions;\n  readPreference?: ReadPreference;\n  resumeAfter?: ResumeToken;\n  startAfter?: ResumeToken;\n  fullDocument?: string;\n}\n\n/**\n * Represents the logical starting point for a new ChangeStream or resuming a ChangeStream on the server.\n * @see https://www.mongodb.com/docs/manual/changeStreams/#std-label-change-stream-resume\n * @public\n */\nexport type ResumeToken = unknown;\n\n/**\n * Represents a specific point in time on a server. Can be retrieved by using `db.command()`\n * @public\n * @see https://docs.mongodb.com/manual/reference/method/db.runCommand/#response\n */\nexport type OperationTime = Timestamp;\n\n/** @public */\nexport interface PipeOptions {\n  end?: boolean;\n}\n\n/**\n * Options that can be passed to a ChangeStream. Note that startAfter, resumeAfter, and startAtOperationTime are all mutually exclusive, and the server will error if more than one is specified.\n * @public\n */\nexport interface ChangeStreamOptions extends AggregateOptions {\n  /**\n   * Allowed values: 'updateLookup', 'whenAvailable', 'required'.\n   *\n   * When set to 'updateLookup', the change notification for partial updates\n   * will include both a delta describing the changes to the document as well\n   * as a copy of the entire document that was changed from some time after\n   * the change occurred.\n   *\n   * When set to 'whenAvailable', configures the change stream to return the\n   * post-image of the modified document for replace and update change events\n   * if the post-image for this event is available.\n   *\n   * When set to 'required', the same behavior as 'whenAvailable' except that\n   * an error is raised if the post-image is not available.\n   */\n  fullDocument?: string;\n\n  /**\n   * Allowed values: 'whenAvailable', 'required', 'off'.\n   *\n   * The default is to not send a value, which is equivalent to 'off'.\n   *\n   * When set to 'whenAvailable', configures the change stream to return the\n   * pre-image of the modified document for replace, update, and delete change\n   * events if it is available.\n   *\n   * When set to 'required', the same behavior as 'whenAvailable' except that\n   * an error is raised if the pre-image is not available.\n   */\n  fullDocumentBeforeChange?: string;\n  /** The maximum amount of time for the server to wait on new documents to satisfy a change stream query. */\n  maxAwaitTimeMS?: number;\n  /**\n   * Allows you to start a changeStream after a specified event.\n   * @see https://docs.mongodb.com/manual/changeStreams/#resumeafter-for-change-streams\n   */\n  resumeAfter?: ResumeToken;\n  /**\n   * Similar to resumeAfter, but will allow you to start after an invalidated event.\n   * @see https://docs.mongodb.com/manual/changeStreams/#startafter-for-change-streams\n   */\n  startAfter?: ResumeToken;\n  /** Will start the changeStream after the specified operationTime. */\n  startAtOperationTime?: OperationTime;\n  /**\n   * The number of documents to return per batch.\n   * @see https://docs.mongodb.com/manual/reference/command/aggregate\n   */\n  batchSize?: number;\n\n  /**\n   * When enabled, configures the change stream to include extra change events.\n   *\n   * - createIndexes\n   * - dropIndexes\n   * - modify\n   * - create\n   * - shardCollection\n   * - reshardCollection\n   * - refineCollectionShardKey\n   */\n  showExpandedEvents?: boolean;\n}\n\n/** @public */\nexport interface ChangeStreamNameSpace {\n  db: string;\n  coll: string;\n}\n\n/** @public */\nexport interface ChangeStreamDocumentKey<TSchema extends Document = Document> {\n  /**\n   * For unsharded collections this contains a single field `_id`.\n   * For sharded collections, this will contain all the components of the shard key\n   */\n  documentKey: { _id: InferIdType<TSchema>; [shardKey: string]: any };\n}\n\n/** @public */\nexport interface ChangeStreamDocumentCommon {\n  /**\n   * The id functions as an opaque token for use when resuming an interrupted\n   * change stream.\n   */\n  _id: ResumeToken;\n  /**\n   * The timestamp from the oplog entry associated with the event.\n   * For events that happened as part of a multi-document transaction, the associated change stream\n   * notifications will have the same clusterTime value, namely the time when the transaction was committed.\n   * On a sharded cluster, events that occur on different shards can have the same clusterTime but be\n   * associated with different transactions or even not be associated with any transaction.\n   * To identify events for a single transaction, you can use the combination of lsid and txnNumber in the change stream event document.\n   */\n  clusterTime?: Timestamp;\n\n  /**\n   * The transaction number.\n   * Only present if the operation is part of a multi-document transaction.\n   *\n   * **NOTE:** txnNumber can be a Long if promoteLongs is set to false\n   */\n  txnNumber?: number;\n\n  /**\n   * The identifier for the session associated with the transaction.\n   * Only present if the operation is part of a multi-document transaction.\n   */\n  lsid?: ServerSessionId;\n}\n\n/** @public */\nexport interface ChangeStreamDocumentCollectionUUID {\n  /**\n   * The UUID (Binary subtype 4) of the collection that the operation was performed on.\n   *\n   * Only present when the `showExpandedEvents` flag is enabled.\n   *\n   * **NOTE:** collectionUUID will be converted to a NodeJS Buffer if the promoteBuffers\n   *    flag is enabled.\n   *\n   * @since 6.1.0\n   */\n  collectionUUID: Binary;\n}\n\n/** @public */\nexport interface ChangeStreamDocumentOperationDescription {\n  /**\n   * An description of the operation.\n   *\n   * Only present when the `showExpandedEvents` flag is enabled.\n   *\n   * @since 6.1.0\n   */\n  operationDescription?: Document;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#insert-event\n */\nexport interface ChangeStreamInsertDocument<TSchema extends Document = Document>\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentKey<TSchema>,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'insert';\n  /** This key will contain the document being inserted */\n  fullDocument: TSchema;\n  /** Namespace the insert event occured on */\n  ns: ChangeStreamNameSpace;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#update-event\n */\nexport interface ChangeStreamUpdateDocument<TSchema extends Document = Document>\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentKey<TSchema>,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'update';\n  /**\n   * This is only set if `fullDocument` is set to `'updateLookup'`\n   * Contains the point-in-time post-image of the modified document if the\n   * post-image is available and either 'required' or 'whenAvailable' was\n   * specified for the 'fullDocument' option when creating the change stream.\n   */\n  fullDocument?: TSchema;\n  /** Contains a description of updated and removed fields in this operation */\n  updateDescription: UpdateDescription<TSchema>;\n  /** Namespace the update event occured on */\n  ns: ChangeStreamNameSpace;\n  /**\n   * Contains the pre-image of the modified or deleted document if the\n   * pre-image is available for the change event and either 'required' or\n   * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option\n   * when creating the change stream. If 'whenAvailable' was specified but the\n   * pre-image is unavailable, this will be explicitly set to null.\n   */\n  fullDocumentBeforeChange?: TSchema;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#replace-event\n */\nexport interface ChangeStreamReplaceDocument<TSchema extends Document = Document>\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentKey<TSchema> {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'replace';\n  /** The fullDocument of a replace event represents the document after the insert of the replacement document */\n  fullDocument: TSchema;\n  /** Namespace the replace event occured on */\n  ns: ChangeStreamNameSpace;\n  /**\n   * Contains the pre-image of the modified or deleted document if the\n   * pre-image is available for the change event and either 'required' or\n   * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option\n   * when creating the change stream. If 'whenAvailable' was specified but the\n   * pre-image is unavailable, this will be explicitly set to null.\n   */\n  fullDocumentBeforeChange?: TSchema;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#delete-event\n */\nexport interface ChangeStreamDeleteDocument<TSchema extends Document = Document>\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentKey<TSchema>,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'delete';\n  /** Namespace the delete event occured on */\n  ns: ChangeStreamNameSpace;\n  /**\n   * Contains the pre-image of the modified or deleted document if the\n   * pre-image is available for the change event and either 'required' or\n   * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option\n   * when creating the change stream. If 'whenAvailable' was specified but the\n   * pre-image is unavailable, this will be explicitly set to null.\n   */\n  fullDocumentBeforeChange?: TSchema;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#drop-event\n */\nexport interface ChangeStreamDropDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'drop';\n  /** Namespace the drop event occured on */\n  ns: ChangeStreamNameSpace;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#rename-event\n */\nexport interface ChangeStreamRenameDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'rename';\n  /** The new name for the `ns.coll` collection */\n  to: { db: string; coll: string };\n  /** The \"from\" namespace that the rename occured on */\n  ns: ChangeStreamNameSpace;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#dropdatabase-event\n */\nexport interface ChangeStreamDropDatabaseDocument extends ChangeStreamDocumentCommon {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'dropDatabase';\n  /** The database dropped */\n  ns: { db: string };\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#invalidate-event\n */\nexport interface ChangeStreamInvalidateDocument extends ChangeStreamDocumentCommon {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'invalidate';\n}\n\n/**\n * Only present when the `showExpandedEvents` flag is enabled.\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamCreateIndexDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID,\n    ChangeStreamDocumentOperationDescription {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'createIndexes';\n}\n\n/**\n * Only present when the `showExpandedEvents` flag is enabled.\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamDropIndexDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID,\n    ChangeStreamDocumentOperationDescription {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'dropIndexes';\n}\n\n/**\n * Only present when the `showExpandedEvents` flag is enabled.\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamCollModDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'modify';\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamCreateDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'create';\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamShardCollectionDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID,\n    ChangeStreamDocumentOperationDescription {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'shardCollection';\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamReshardCollectionDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID,\n    ChangeStreamDocumentOperationDescription {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'reshardCollection';\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamRefineCollectionShardKeyDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID,\n    ChangeStreamDocumentOperationDescription {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'refineCollectionShardKey';\n}\n\n/** @public */\nexport type ChangeStreamDocument<TSchema extends Document = Document> =\n  | ChangeStreamInsertDocument<TSchema>\n  | ChangeStreamUpdateDocument<TSchema>\n  | ChangeStreamReplaceDocument<TSchema>\n  | ChangeStreamDeleteDocument<TSchema>\n  | ChangeStreamDropDocument\n  | ChangeStreamRenameDocument\n  | ChangeStreamDropDatabaseDocument\n  | ChangeStreamInvalidateDocument\n  | ChangeStreamCreateIndexDocument\n  | ChangeStreamCreateDocument\n  | ChangeStreamCollModDocument\n  | ChangeStreamDropIndexDocument\n  | ChangeStreamShardCollectionDocument\n  | ChangeStreamReshardCollectionDocument\n  | ChangeStreamRefineCollectionShardKeyDocument;\n\n/** @public */\nexport interface UpdateDescription<TSchema extends Document = Document> {\n  /**\n   * A document containing key:value pairs of names of the fields that were\n   * changed, and the new value for those fields.\n   */\n  updatedFields?: Partial<TSchema>;\n\n  /**\n   * An array of field names that were removed from the document.\n   */\n  removedFields?: string[];\n\n  /**\n   * An array of documents which record array truncations performed with pipeline-based updates using one or more of the following stages:\n   * - $addFields\n   * - $set\n   * - $replaceRoot\n   * - $replaceWith\n   */\n  truncatedArrays?: Array<{\n    /** The name of the truncated field. */\n    field: string;\n    /** The number of elements in the truncated array. */\n    newSize: number;\n  }>;\n}\n\n/** @public */\nexport type ChangeStreamEvents<\n  TSchema extends Document = Document,\n  TChange extends Document = ChangeStreamDocument<TSchema>\n> = {\n  resumeTokenChanged(token: ResumeToken): void;\n  init(response: any): void;\n  more(response?: any): void;\n  response(): void;\n  end(): void;\n  error(error: Error): void;\n  change(change: TChange): void;\n} & AbstractCursorEvents;\n\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nexport class ChangeStream<\n  TSchema extends Document = Document,\n  TChange extends Document = ChangeStreamDocument<TSchema>\n> extends TypedEventEmitter<ChangeStreamEvents<TSchema, TChange>> {\n  pipeline: Document[];\n  options: ChangeStreamOptions;\n  parent: MongoClient | Db | Collection;\n  namespace: MongoDBNamespace;\n  type: symbol;\n  /** @internal */\n  cursor: ChangeStreamCursor<TSchema, TChange>;\n  streamOptions?: CursorStreamOptions;\n  /** @internal */\n  [kCursorStream]?: Readable & AsyncIterable<TChange>;\n  /** @internal */\n  [kClosed]: boolean;\n  /** @internal */\n  [kMode]: false | 'iterator' | 'emitter';\n\n  /** @event */\n  static readonly RESPONSE = RESPONSE;\n  /** @event */\n  static readonly MORE = MORE;\n  /** @event */\n  static readonly INIT = INIT;\n  /** @event */\n  static readonly CLOSE = CLOSE;\n  /**\n   * Fired for each new matching change in the specified namespace. Attaching a `change`\n   * event listener to a Change Stream will switch the stream into flowing mode. Data will\n   * then be passed as soon as it is available.\n   * @event\n   */\n  static readonly CHANGE = CHANGE;\n  /** @event */\n  static readonly END = END;\n  /** @event */\n  static readonly ERROR = ERROR;\n  /**\n   * Emitted each time the change stream stores a new resume token.\n   * @event\n   */\n  static readonly RESUME_TOKEN_CHANGED = RESUME_TOKEN_CHANGED;\n\n  /**\n   * @internal\n   *\n   * @param parent - The parent object that created this change stream\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n   */\n  constructor(\n    parent: OperationParent,\n    pipeline: Document[] = [],\n    options: ChangeStreamOptions = {}\n  ) {\n    super();\n\n    this.pipeline = pipeline;\n    this.options = options;\n\n    if (parent instanceof Collection) {\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n    } else if (parent instanceof Db) {\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n    } else if (parent instanceof MongoClient) {\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n    } else {\n      throw new MongoChangeStreamError(\n        'Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient'\n      );\n    }\n\n    this.parent = parent;\n    this.namespace = parent.s.namespace;\n    if (!this.options.readPreference && parent.readPreference) {\n      this.options.readPreference = parent.readPreference;\n    }\n\n    // Create contained Change Stream cursor\n    this.cursor = this._createChangeStreamCursor(options);\n\n    this[kClosed] = false;\n    this[kMode] = false;\n\n    // Listen for any `change` listeners being added to ChangeStream\n    this.on('newListener', eventName => {\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n        this._streamEvents(this.cursor);\n      }\n    });\n\n    this.on('removeListener', eventName => {\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n        this[kCursorStream]?.removeAllListeners('data');\n      }\n    });\n  }\n\n  /** @internal */\n  get cursorStream(): (Readable & AsyncIterable<TChange>) | undefined {\n    return this[kCursorStream];\n  }\n\n  /** The cached resume token that is used to resume after the most recently returned change. */\n  get resumeToken(): ResumeToken {\n    return this.cursor?.resumeToken;\n  }\n\n  /** Check if there is any document still available in the Change Stream */\n  hasNext(): Promise<boolean>;\n  hasNext(callback: Callback<boolean>): void;\n  hasNext(callback?: Callback): Promise<boolean> | void {\n    this._setIsIterator();\n    // TOOD(NODE-4319): Add eslint rule preventing accidental variable shadowing\n    // Shadowing is intentional here.  We want to override the `callback` variable\n    // from the outer scope so that the inner scope doesn't accidentally call the wrong callback.\n    return maybePromise(callback, callback => {\n      (async () => {\n        try {\n          const hasNext = await this.cursor.hasNext();\n          return hasNext;\n        } catch (error) {\n          try {\n            await this._processErrorIteratorMode(error);\n            const hasNext = await this.cursor.hasNext();\n            return hasNext;\n          } catch (error) {\n            await this.close().catch(err => err);\n            throw error;\n          }\n        }\n      })().then(\n        hasNext => callback(undefined, hasNext),\n        error => callback(error)\n      );\n    });\n  }\n\n  /** Get the next available document from the Change Stream. */\n  next(): Promise<TChange>;\n  next(callback: Callback<TChange>): void;\n  next(callback?: Callback<TChange>): Promise<TChange> | void {\n    this._setIsIterator();\n    // TOOD(NODE-4319): Add eslint rule preventing accidental variable shadowing\n    // Shadowing is intentional here.  We want to override the `callback` variable\n    // from the outer scope so that the inner scope doesn't accidentally call the wrong callback.\n    return maybePromise(callback, callback => {\n      (async () => {\n        try {\n          const change = await this.cursor.next();\n          const processedChange = this._processChange(change ?? null);\n          return processedChange;\n        } catch (error) {\n          try {\n            await this._processErrorIteratorMode(error);\n            const change = await this.cursor.next();\n            const processedChange = this._processChange(change ?? null);\n            return processedChange;\n          } catch (error) {\n            await this.close().catch(err => err);\n            throw error;\n          }\n        }\n      })().then(\n        change => callback(undefined, change),\n        error => callback(error)\n      );\n    });\n  }\n\n  /**\n   * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned\n   */\n  tryNext(): Promise<Document | null>;\n  tryNext(callback: Callback<Document | null>): void;\n  tryNext(callback?: Callback<Document | null>): Promise<Document | null> | void {\n    this._setIsIterator();\n    // TOOD(NODE-4319): Add eslint rule preventing accidental variable shadowing\n    // Shadowing is intentional here.  We want to override the `callback` variable\n    // from the outer scope so that the inner scope doesn't accidentally call the wrong callback.\n    return maybePromise(callback, callback => {\n      (async () => {\n        try {\n          const change = await this.cursor.tryNext();\n          return change ?? null;\n        } catch (error) {\n          try {\n            await this._processErrorIteratorMode(error);\n            const change = await this.cursor.tryNext();\n            return change ?? null;\n          } catch (error) {\n            await this.close().catch(err => err);\n            throw error;\n          }\n        }\n      })().then(\n        change => callback(undefined, change),\n        error => callback(error)\n      );\n    });\n  }\n\n  /** Is the cursor closed */\n  get closed(): boolean {\n    return this[kClosed] || this.cursor.closed;\n  }\n\n  /** Close the Change Stream */\n  close(): Promise<void>;\n  close(callback: Callback): void;\n  close(callback?: Callback): Promise<void> | void {\n    this[kClosed] = true;\n\n    return maybePromise(callback, cb => {\n      const cursor = this.cursor;\n      return cursor.close(err => {\n        this._endStream();\n        return cb(err);\n      });\n    });\n  }\n\n  /**\n   * Return a modified Readable stream including a possible transform method.\n   *\n   * NOTE: When using a Stream to process change stream events, the stream will\n   * NOT automatically resume in the case a resumable error is encountered.\n   *\n   * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\n   */\n  stream(options?: CursorStreamOptions): Readable & AsyncIterable<TChange> {\n    if (this.closed) {\n      throw new MongoChangeStreamError(CHANGESTREAM_CLOSED_ERROR);\n    }\n\n    this.streamOptions = options;\n    return this.cursor.stream(options);\n  }\n\n  /** @internal */\n  private _setIsEmitter(): void {\n    if (this[kMode] === 'iterator') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new MongoAPIError(\n        'ChangeStream cannot be used as an EventEmitter after being used as an iterator'\n      );\n    }\n    this[kMode] = 'emitter';\n  }\n\n  /** @internal */\n  private _setIsIterator(): void {\n    if (this[kMode] === 'emitter') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new MongoAPIError(\n        'ChangeStream cannot be used as an iterator after being used as an EventEmitter'\n      );\n    }\n    this[kMode] = 'iterator';\n  }\n\n  /**\n   * Create a new change stream cursor based on self's configuration\n   * @internal\n   */\n  private _createChangeStreamCursor(\n    options: ChangeStreamOptions | ChangeStreamCursorOptions\n  ): ChangeStreamCursor<TSchema, TChange> {\n    const changeStreamStageOptions = filterOptions(options, CHANGE_STREAM_OPTIONS);\n    if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n      changeStreamStageOptions.allChangesForCluster = true;\n    }\n    const pipeline = [{ $changeStream: changeStreamStageOptions }, ...this.pipeline];\n\n    const client: MongoClient | null =\n      this.type === CHANGE_DOMAIN_TYPES.CLUSTER\n        ? (this.parent as MongoClient)\n        : this.type === CHANGE_DOMAIN_TYPES.DATABASE\n        ? (this.parent as Db).s.client\n        : this.type === CHANGE_DOMAIN_TYPES.COLLECTION\n        ? (this.parent as Collection).s.db.s.client\n        : null;\n\n    if (client == null) {\n      // This should never happen because of the assertion in the constructor\n      throw new MongoRuntimeError(\n        `Changestream type should only be one of cluster, database, collection. Found ${this.type.toString()}`\n      );\n    }\n\n    const changeStreamCursor = new ChangeStreamCursor<TSchema, TChange>(\n      client,\n      this.namespace,\n      pipeline,\n      options\n    );\n\n    for (const event of CHANGE_STREAM_EVENTS) {\n      changeStreamCursor.on(event, e => this.emit(event, e));\n    }\n\n    if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n      this._streamEvents(changeStreamCursor);\n    }\n\n    return changeStreamCursor;\n  }\n\n  /** @internal */\n  private _closeEmitterModeWithError(error: AnyError): void {\n    this.emit(ChangeStream.ERROR, error);\n\n    this.close(() => {\n      // nothing to do\n    });\n  }\n\n  /** @internal */\n  private _streamEvents(cursor: ChangeStreamCursor<TSchema, TChange>): void {\n    this._setIsEmitter();\n    const stream = this[kCursorStream] ?? cursor.stream();\n    this[kCursorStream] = stream;\n    stream.on('data', change => {\n      try {\n        const processedChange = this._processChange(change);\n        this.emit(ChangeStream.CHANGE, processedChange);\n      } catch (error) {\n        this.emit(ChangeStream.ERROR, error);\n      }\n    });\n    stream.on('error', error => this._processErrorStreamMode(error));\n  }\n\n  /** @internal */\n  private _endStream(): void {\n    const cursorStream = this[kCursorStream];\n    if (cursorStream) {\n      ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n      cursorStream.destroy();\n    }\n\n    this[kCursorStream] = undefined;\n  }\n\n  /** @internal */\n  private _processChange(change: TChange | null): TChange {\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n    }\n\n    // a null change means the cursor has been notified, implicitly closing the change stream\n    if (change == null) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR);\n    }\n\n    if (change && !change._id) {\n      throw new MongoChangeStreamError(NO_RESUME_TOKEN_ERROR);\n    }\n\n    // cache the resume token\n    this.cursor.cacheResumeToken(change._id);\n\n    // wipe the startAtOperationTime if there was one so that there won't be a conflict\n    // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n    this.options.startAtOperationTime = undefined;\n\n    return change;\n  }\n\n  /** @internal */\n  private _processErrorStreamMode(changeStreamError: AnyError) {\n    // If the change stream has been closed explicitly, do not process error.\n    if (this[kClosed]) return;\n\n    if (isResumableError(changeStreamError, this.cursor.maxWireVersion)) {\n      this._endStream();\n      this.cursor.close().catch(() => null);\n\n      const topology = getTopology(this.parent);\n      topology.selectServer(this.cursor.readPreference, {}, serverSelectionError => {\n        if (serverSelectionError) return this._closeEmitterModeWithError(changeStreamError);\n        this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n      });\n    } else {\n      this._closeEmitterModeWithError(changeStreamError);\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * TODO(NODE-4320): promisify selectServer and refactor this code to be async\n   *\n   * we promisify _processErrorIteratorModeCallback until we have a promisifed version of selectServer.\n   */\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  private _processErrorIteratorMode = promisify(this._processErrorIteratorModeCallback);\n\n  /** @internal */\n  private _processErrorIteratorModeCallback(changeStreamError: AnyError, callback: Callback) {\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      return callback(new MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    }\n\n    if (isResumableError(changeStreamError, this.cursor.maxWireVersion)) {\n      this.cursor.close().catch(() => null);\n\n      const topology = getTopology(this.parent);\n      topology.selectServer(this.cursor.readPreference, {}, serverSelectionError => {\n        // if the topology can't reconnect, close the stream\n        if (serverSelectionError) return this.close(() => callback(changeStreamError));\n\n        this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n        callback();\n      });\n    } else {\n      this.close(() => callback(changeStreamError));\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}