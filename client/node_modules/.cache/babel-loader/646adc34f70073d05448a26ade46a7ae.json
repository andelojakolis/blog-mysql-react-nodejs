{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertUninitialized = exports.next = exports.AbstractCursor = exports.CURSOR_FLAGS = void 0;\n\nconst stream_1 = require(\"stream\");\n\nconst bson_1 = require(\"../bson\");\n\nconst error_1 = require(\"../error\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst execute_operation_1 = require(\"../operations/execute_operation\");\n\nconst get_more_1 = require(\"../operations/get_more\");\n\nconst kill_cursors_1 = require(\"../operations/kill_cursors\");\n\nconst read_concern_1 = require(\"../read_concern\");\n\nconst read_preference_1 = require(\"../read_preference\");\n\nconst sessions_1 = require(\"../sessions\");\n\nconst utils_1 = require(\"../utils\");\n/** @internal */\n\n\nconst kId = Symbol('id');\n/** @internal */\n\nconst kDocuments = Symbol('documents');\n/** @internal */\n\nconst kServer = Symbol('server');\n/** @internal */\n\nconst kNamespace = Symbol('namespace');\n/** @internal */\n\nconst kClient = Symbol('client');\n/** @internal */\n\nconst kSession = Symbol('session');\n/** @internal */\n\nconst kOptions = Symbol('options');\n/** @internal */\n\nconst kTransform = Symbol('transform');\n/** @internal */\n\nconst kInitialized = Symbol('initialized');\n/** @internal */\n\nconst kClosed = Symbol('closed');\n/** @internal */\n\nconst kKilled = Symbol('killed');\n/** @internal */\n\nconst kInit = Symbol('kInit');\n/** @public */\n\nexports.CURSOR_FLAGS = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'];\n/** @public */\n\nclass AbstractCursor extends mongo_types_1.TypedEventEmitter {\n  /** @internal */\n  constructor(client, namespace) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super();\n\n    if (!client.s.isMongoClient) {\n      throw new error_1.MongoRuntimeError('Cursor must be constructed with MongoClient');\n    }\n\n    this[kClient] = client;\n    this[kNamespace] = namespace;\n    this[kDocuments] = []; // TODO: https://github.com/microsoft/TypeScript/issues/36230\n\n    this[kInitialized] = false;\n    this[kClosed] = false;\n    this[kKilled] = false;\n    this[kOptions] = {\n      readPreference: options.readPreference && options.readPreference instanceof read_preference_1.ReadPreference ? options.readPreference : read_preference_1.ReadPreference.primary,\n      ...(0, bson_1.pluckBSONSerializeOptions)(options)\n    };\n    const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n\n    if (readConcern) {\n      this[kOptions].readConcern = readConcern;\n    }\n\n    if (typeof options.batchSize === 'number') {\n      this[kOptions].batchSize = options.batchSize;\n    } // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n\n\n    if (options.comment !== undefined) {\n      this[kOptions].comment = options.comment;\n    }\n\n    if (typeof options.maxTimeMS === 'number') {\n      this[kOptions].maxTimeMS = options.maxTimeMS;\n    }\n\n    if (options.session instanceof sessions_1.ClientSession) {\n      this[kSession] = options.session;\n    } else {\n      this[kSession] = this[kClient].startSession({\n        owner: this,\n        explicit: false\n      });\n    }\n  }\n\n  get id() {\n    return this[kId];\n  }\n  /** @internal */\n\n\n  get client() {\n    return this[kClient];\n  }\n  /** @internal */\n\n\n  get server() {\n    return this[kServer];\n  }\n\n  get namespace() {\n    return this[kNamespace];\n  }\n\n  get readPreference() {\n    return this[kOptions].readPreference;\n  }\n\n  get readConcern() {\n    return this[kOptions].readConcern;\n  }\n  /** @internal */\n\n\n  get session() {\n    return this[kSession];\n  }\n\n  set session(clientSession) {\n    this[kSession] = clientSession;\n  }\n  /** @internal */\n\n\n  get cursorOptions() {\n    return this[kOptions];\n  }\n\n  get closed() {\n    return this[kClosed];\n  }\n\n  get killed() {\n    return this[kKilled];\n  }\n\n  get loadBalanced() {\n    var _a;\n\n    return !!((_a = this[kClient].topology) === null || _a === void 0 ? void 0 : _a.loadBalanced);\n  }\n  /** Returns current buffered documents length */\n\n\n  bufferedCount() {\n    return this[kDocuments].length;\n  }\n  /** Returns current buffered documents */\n\n\n  readBufferedDocuments(number) {\n    return this[kDocuments].splice(0, number !== null && number !== void 0 ? number : this[kDocuments].length);\n  }\n\n  [Symbol.asyncIterator]() {\n    return {\n      next: () => this.next().then(value => value != null ? {\n        value,\n        done: false\n      } : {\n        value: undefined,\n        done: true\n      })\n    };\n  }\n\n  stream(options) {\n    if (options === null || options === void 0 ? void 0 : options.transform) {\n      const transform = options.transform;\n      const readable = new ReadableCursorStream(this);\n      return readable.pipe(new stream_1.Transform({\n        objectMode: true,\n        highWaterMark: 1,\n\n        transform(chunk, _, callback) {\n          try {\n            const transformed = transform(chunk);\n            callback(undefined, transformed);\n          } catch (err) {\n            callback(err);\n          }\n        }\n\n      }));\n    }\n\n    return new ReadableCursorStream(this);\n  }\n\n  hasNext(callback) {\n    return (0, utils_1.maybePromise)(callback, done => {\n      if (this[kId] === bson_1.Long.ZERO) {\n        return done(undefined, false);\n      }\n\n      if (this[kDocuments].length) {\n        return done(undefined, true);\n      }\n\n      next(this, true, (err, doc) => {\n        if (err) return done(err);\n\n        if (doc) {\n          this[kDocuments].unshift(doc);\n          done(undefined, true);\n          return;\n        }\n\n        done(undefined, false);\n      });\n    });\n  }\n\n  next(callback) {\n    return (0, utils_1.maybePromise)(callback, done => {\n      if (this[kId] === bson_1.Long.ZERO) {\n        return done(new error_1.MongoCursorExhaustedError());\n      }\n\n      next(this, true, done);\n    });\n  }\n\n  tryNext(callback) {\n    return (0, utils_1.maybePromise)(callback, done => {\n      if (this[kId] === bson_1.Long.ZERO) {\n        return done(new error_1.MongoCursorExhaustedError());\n      }\n\n      next(this, false, done);\n    });\n  }\n\n  forEach(iterator, callback) {\n    if (typeof iterator !== 'function') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"iterator\" must be a function');\n    }\n\n    return (0, utils_1.maybePromise)(callback, done => {\n      const transform = this[kTransform];\n\n      const fetchDocs = () => {\n        next(this, true, (err, doc) => {\n          if (err || doc == null) return done(err);\n          let result; // NOTE: no need to transform because `next` will do this automatically\n\n          try {\n            result = iterator(doc); // TODO(NODE-3283): Improve transform typing\n          } catch (error) {\n            return done(error);\n          }\n\n          if (result === false) return done(); // these do need to be transformed since they are copying the rest of the batch\n\n          const internalDocs = this[kDocuments].splice(0, this[kDocuments].length);\n\n          for (let i = 0; i < internalDocs.length; ++i) {\n            try {\n              result = iterator(transform ? transform(internalDocs[i]) : internalDocs[i] // TODO(NODE-3283): Improve transform typing\n              );\n            } catch (error) {\n              return done(error);\n            }\n\n            if (result === false) return done();\n          }\n\n          fetchDocs();\n        });\n      };\n\n      fetchDocs();\n    });\n  }\n\n  close(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    const needsToEmitClosed = !this[kClosed];\n    this[kClosed] = true;\n    return (0, utils_1.maybePromise)(callback, done => cleanupCursor(this, {\n      needsToEmitClosed\n    }, done));\n  }\n\n  toArray(callback) {\n    return (0, utils_1.maybePromise)(callback, done => {\n      const docs = [];\n      const transform = this[kTransform];\n\n      const fetchDocs = () => {\n        // NOTE: if we add a `nextBatch` then we should use it here\n        next(this, true, (err, doc) => {\n          if (err) return done(err);\n          if (doc == null) return done(undefined, docs); // NOTE: no need to transform because `next` will do this automatically\n\n          docs.push(doc); // these do need to be transformed since they are copying the rest of the batch\n\n          const internalDocs = transform ? this[kDocuments].splice(0, this[kDocuments].length).map(transform) : this[kDocuments].splice(0, this[kDocuments].length); // TODO(NODE-3283): Improve transform typing\n\n          if (internalDocs) {\n            docs.push(...internalDocs);\n          }\n\n          fetchDocs();\n        });\n      };\n\n      fetchDocs();\n    });\n  }\n  /**\n   * Add a cursor flag to the cursor\n   *\n   * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.\n   * @param value - The flag boolean value.\n   */\n\n\n  addCursorFlag(flag, value) {\n    assertUninitialized(this);\n\n    if (!exports.CURSOR_FLAGS.includes(flag)) {\n      throw new error_1.MongoInvalidArgumentError(`Flag ${flag} is not one of ${exports.CURSOR_FLAGS}`);\n    }\n\n    if (typeof value !== 'boolean') {\n      throw new error_1.MongoInvalidArgumentError(`Flag ${flag} must be a boolean value`);\n    }\n\n    this[kOptions][flag] = value;\n    return this;\n  }\n  /**\n   * Map all documents using the provided function\n   * If there is a transform set on the cursor, that will be called first and the result passed to\n   * this function's transform.\n   *\n   * @remarks\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling map,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: FindCursor<Document> = coll.find();\n   * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);\n   * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]\n   * ```\n   * @param transform - The mapping transformation method.\n   */\n\n\n  map(transform) {\n    assertUninitialized(this);\n    const oldTransform = this[kTransform]; // TODO(NODE-3283): Improve transform typing\n\n    if (oldTransform) {\n      this[kTransform] = doc => {\n        return transform(oldTransform(doc));\n      };\n    } else {\n      this[kTransform] = transform;\n    }\n\n    return this;\n  }\n  /**\n   * Set the ReadPreference for the cursor.\n   *\n   * @param readPreference - The new read preference for the cursor.\n   */\n\n\n  withReadPreference(readPreference) {\n    assertUninitialized(this);\n\n    if (readPreference instanceof read_preference_1.ReadPreference) {\n      this[kOptions].readPreference = readPreference;\n    } else if (typeof readPreference === 'string') {\n      this[kOptions].readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n    } else {\n      throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${readPreference}`);\n    }\n\n    return this;\n  }\n  /**\n   * Set the ReadPreference for the cursor.\n   *\n   * @param readPreference - The new read preference for the cursor.\n   */\n\n\n  withReadConcern(readConcern) {\n    assertUninitialized(this);\n    const resolvedReadConcern = read_concern_1.ReadConcern.fromOptions({\n      readConcern\n    });\n\n    if (resolvedReadConcern) {\n      this[kOptions].readConcern = resolvedReadConcern;\n    }\n\n    return this;\n  }\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   *\n   * @param value - Number of milliseconds to wait before aborting the query.\n   */\n\n\n  maxTimeMS(value) {\n    assertUninitialized(this);\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n    }\n\n    this[kOptions].maxTimeMS = value;\n    return this;\n  }\n  /**\n   * Set the batch size for the cursor.\n   *\n   * @param value - The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/find/|find command documentation}.\n   */\n\n\n  batchSize(value) {\n    assertUninitialized(this);\n\n    if (this[kOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support batchSize');\n    }\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Operation \"batchSize\" requires an integer');\n    }\n\n    this[kOptions].batchSize = value;\n    return this;\n  }\n  /**\n   * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n   * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n   * if the resultant data has already been retrieved by this cursor.\n   */\n\n\n  rewind() {\n    if (!this[kInitialized]) {\n      return;\n    }\n\n    this[kId] = undefined;\n    this[kDocuments] = [];\n    this[kClosed] = false;\n    this[kKilled] = false;\n    this[kInitialized] = false;\n    const session = this[kSession];\n\n    if (session) {\n      // We only want to end this session if we created it, and it hasn't ended yet\n      if (session.explicit === false) {\n        if (!session.hasEnded) {\n          session.endSession().catch(() => null);\n        }\n\n        this[kSession] = this.client.startSession({\n          owner: this,\n          explicit: false\n        });\n      }\n    }\n  }\n  /** @internal */\n\n\n  _getMore(batchSize, callback) {\n    const cursorId = this[kId];\n    const cursorNs = this[kNamespace];\n    const server = this[kServer];\n\n    if (cursorId == null) {\n      callback(new error_1.MongoRuntimeError('Unable to iterate cursor with no id'));\n      return;\n    }\n\n    if (server == null) {\n      callback(new error_1.MongoRuntimeError('Unable to iterate cursor without selected server'));\n      return;\n    }\n\n    const getMoreOperation = new get_more_1.GetMoreOperation(cursorNs, cursorId, server, { ...this[kOptions],\n      session: this[kSession],\n      batchSize\n    });\n    (0, execute_operation_1.executeOperation)(this[kClient], getMoreOperation, callback);\n  }\n  /**\n   * @internal\n   *\n   * This function is exposed for the unified test runner's createChangeStream\n   * operation.  We cannot refactor to use the abstract _initialize method without\n   * a significant refactor.\n   */\n\n\n  [kInit](callback) {\n    this._initialize(this[kSession], (err, state) => {\n      if (state) {\n        const response = state.response;\n        this[kServer] = state.server;\n\n        if (response.cursor) {\n          this[kId] = typeof response.cursor.id === 'number' ? bson_1.Long.fromNumber(response.cursor.id) : response.cursor.id;\n\n          if (response.cursor.ns) {\n            this[kNamespace] = (0, utils_1.ns)(response.cursor.ns);\n          }\n\n          this[kDocuments] = response.cursor.firstBatch;\n        } // When server responses return without a cursor document, we close this cursor\n        // and return the raw server response. This is often the case for explain commands\n        // for example\n\n\n        if (this[kId] == null) {\n          this[kId] = bson_1.Long.ZERO; // TODO(NODE-3286): ExecutionResult needs to accept a generic parameter\n\n          this[kDocuments] = [state.response];\n        }\n      } // the cursor is now initialized, even if an error occurred or it is dead\n\n\n      this[kInitialized] = true;\n\n      if (err || cursorIsDead(this)) {\n        return cleanupCursor(this, {\n          error: err\n        }, () => callback(err, nextDocument(this)));\n      }\n\n      callback();\n    });\n  }\n\n}\n\nexports.AbstractCursor = AbstractCursor;\n/** @event */\n\nAbstractCursor.CLOSE = 'close';\n\nfunction nextDocument(cursor) {\n  if (cursor[kDocuments] == null || !cursor[kDocuments].length) {\n    return null;\n  }\n\n  const doc = cursor[kDocuments].shift();\n\n  if (doc) {\n    const transform = cursor[kTransform];\n\n    if (transform) {\n      return transform(doc);\n    }\n\n    return doc;\n  }\n\n  return null;\n}\n/**\n * @param cursor - the cursor on which to call `next`\n * @param blocking - a boolean indicating whether or not the cursor should `block` until data\n *     is available.  Generally, this flag is set to `false` because if the getMore returns no documents,\n *     the cursor has been exhausted.  In certain scenarios (ChangeStreams, tailable await cursors and\n *     `tryNext`, for example) blocking is necessary because a getMore returning no documents does\n *     not indicate the end of the cursor.\n * @param callback - callback to return the result to the caller\n * @returns\n */\n\n\nfunction next(cursor, blocking, callback) {\n  const cursorId = cursor[kId];\n\n  if (cursor.closed) {\n    return callback(undefined, null);\n  }\n\n  if (cursor[kDocuments] && cursor[kDocuments].length) {\n    callback(undefined, nextDocument(cursor));\n    return;\n  }\n\n  if (cursorId == null) {\n    // All cursors must operate within a session, one must be made implicitly if not explicitly provided\n    cursor[kInit]((err, value) => {\n      if (err) return callback(err);\n\n      if (value) {\n        return callback(undefined, value);\n      }\n\n      return next(cursor, blocking, callback);\n    });\n    return;\n  }\n\n  if (cursorIsDead(cursor)) {\n    return cleanupCursor(cursor, undefined, () => callback(undefined, null));\n  } // otherwise need to call getMore\n\n\n  const batchSize = cursor[kOptions].batchSize || 1000;\n\n  cursor._getMore(batchSize, (err, response) => {\n    if (response) {\n      const cursorId = typeof response.cursor.id === 'number' ? bson_1.Long.fromNumber(response.cursor.id) : response.cursor.id;\n      cursor[kDocuments] = response.cursor.nextBatch;\n      cursor[kId] = cursorId;\n    }\n\n    if (err || cursorIsDead(cursor)) {\n      return cleanupCursor(cursor, {\n        error: err\n      }, () => callback(err, nextDocument(cursor)));\n    }\n\n    if (cursor[kDocuments].length === 0 && blocking === false) {\n      return callback(undefined, null);\n    }\n\n    next(cursor, blocking, callback);\n  });\n}\n\nexports.next = next;\n\nfunction cursorIsDead(cursor) {\n  const cursorId = cursor[kId];\n  return !!cursorId && cursorId.isZero();\n}\n\nfunction cleanupCursor(cursor, options, callback) {\n  var _a;\n\n  const cursorId = cursor[kId];\n  const cursorNs = cursor[kNamespace];\n  const server = cursor[kServer];\n  const session = cursor[kSession];\n  const error = options === null || options === void 0 ? void 0 : options.error;\n  const needsToEmitClosed = (_a = options === null || options === void 0 ? void 0 : options.needsToEmitClosed) !== null && _a !== void 0 ? _a : cursor[kDocuments].length === 0;\n\n  if (error) {\n    if (cursor.loadBalanced && error instanceof error_1.MongoNetworkError) {\n      return completeCleanup();\n    }\n  }\n\n  if (cursorId == null || server == null || cursorId.isZero() || cursorNs == null) {\n    if (needsToEmitClosed) {\n      cursor[kClosed] = true;\n      cursor[kId] = bson_1.Long.ZERO;\n      cursor.emit(AbstractCursor.CLOSE);\n    }\n\n    if (session) {\n      if (session.owner === cursor) {\n        return session.endSession({\n          error\n        }, callback);\n      }\n\n      if (!session.inTransaction()) {\n        (0, sessions_1.maybeClearPinnedConnection)(session, {\n          error\n        });\n      }\n    }\n\n    return callback();\n  }\n\n  function completeCleanup() {\n    if (session) {\n      if (session.owner === cursor) {\n        return session.endSession({\n          error\n        }, () => {\n          cursor.emit(AbstractCursor.CLOSE);\n          callback();\n        });\n      }\n\n      if (!session.inTransaction()) {\n        (0, sessions_1.maybeClearPinnedConnection)(session, {\n          error\n        });\n      }\n    }\n\n    cursor.emit(AbstractCursor.CLOSE);\n    return callback();\n  }\n\n  cursor[kKilled] = true;\n  return (0, execute_operation_1.executeOperation)(cursor[kClient], new kill_cursors_1.KillCursorsOperation(cursorId, cursorNs, server, {\n    session\n  }), completeCleanup);\n}\n/** @internal */\n\n\nfunction assertUninitialized(cursor) {\n  if (cursor[kInitialized]) {\n    throw new error_1.MongoCursorInUseError();\n  }\n}\n\nexports.assertUninitialized = assertUninitialized;\n\nclass ReadableCursorStream extends stream_1.Readable {\n  constructor(cursor) {\n    super({\n      objectMode: true,\n      autoDestroy: false,\n      highWaterMark: 1\n    });\n    this._readInProgress = false;\n    this._cursor = cursor;\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  _read(size) {\n    if (!this._readInProgress) {\n      this._readInProgress = true;\n\n      this._readNext();\n    }\n  }\n\n  _destroy(error, callback) {\n    this._cursor.close(err => process.nextTick(callback, err || error));\n  }\n\n  _readNext() {\n    next(this._cursor, true, (err, result) => {\n      if (err) {\n        // NOTE: This is questionable, but we have a test backing the behavior. It seems the\n        //       desired behavior is that a stream ends cleanly when a user explicitly closes\n        //       a client during iteration. Alternatively, we could do the \"right\" thing and\n        //       propagate the error message by removing this special case.\n        if (err.message.match(/server is closed/)) {\n          this._cursor.close().catch(() => null);\n\n          return this.push(null);\n        } // NOTE: This is also perhaps questionable. The rationale here is that these errors tend\n        //       to be \"operation interrupted\", where a cursor has been closed but there is an\n        //       active getMore in-flight. This used to check if the cursor was killed but once\n        //       that changed to happen in cleanup legitimate errors would not destroy the\n        //       stream. There are change streams test specifically test these cases.\n\n\n        if (err.message.match(/interrupted/)) {\n          return this.push(null);\n        }\n\n        return this.destroy(err);\n      }\n\n      if (result == null) {\n        this.push(null);\n      } else if (this.destroyed) {\n        this._cursor.close().catch(() => null);\n      } else {\n        if (this.push(result)) {\n          return this._readNext();\n        }\n\n        this._readInProgress = false;\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["kId","Symbol","kDocuments","kServer","kNamespace","kClient","kSession","kOptions","kTransform","kInitialized","kClosed","kKilled","kInit","exports","AbstractCursor","mongo_types_1","constructor","client","namespace","options","s","isMongoClient","error_1","readPreference","read_preference_1","primary","readConcern","read_concern_1","fromOptions","batchSize","comment","undefined","maxTimeMS","session","sessions_1","startSession","owner","explicit","id","server","clientSession","cursorOptions","closed","killed","loadBalanced","topology","_a","bufferedCount","length","readBufferedDocuments","number","splice","asyncIterator","next","then","value","done","stream","transform","readable","ReadableCursorStream","pipe","stream_1","objectMode","highWaterMark","chunk","_","callback","transformed","err","hasNext","bson_1","ZERO","doc","unshift","tryNext","forEach","iterator","fetchDocs","result","error","internalDocs","i","close","needsToEmitClosed","cleanupCursor","toArray","docs","push","map","addCursorFlag","flag","assertUninitialized","includes","oldTransform","withReadPreference","fromString","withReadConcern","resolvedReadConcern","tailable","rewind","hasEnded","endSession","catch","_getMore","cursorId","cursorNs","getMoreOperation","get_more_1","_initialize","state","response","cursor","fromNumber","ns","firstBatch","cursorIsDead","nextDocument","shift","blocking","nextBatch","isZero","completeCleanup","emit","CLOSE","inTransaction","kill_cursors_1","autoDestroy","_cursor","_read","size","_readInProgress","_readNext","_destroy","process","nextTick","message","match","destroy","destroyed"],"sources":["C:\\Users\\Anđelo\\node_modules\\mongodb\\src\\cursor\\abstract_cursor.ts"],"sourcesContent":["import { Readable, Transform } from 'stream';\n\nimport { BSONSerializeOptions, Document, Long, pluckBSONSerializeOptions } from '../bson';\nimport {\n  AnyError,\n  MongoCursorExhaustedError,\n  MongoCursorInUseError,\n  MongoInvalidArgumentError,\n  MongoNetworkError,\n  MongoRuntimeError,\n  MongoTailableCursorError\n} from '../error';\nimport type { MongoClient } from '../mongo_client';\nimport { TODO_NODE_3286, TypedEventEmitter } from '../mongo_types';\nimport { executeOperation, ExecutionResult } from '../operations/execute_operation';\nimport { GetMoreOperation } from '../operations/get_more';\nimport { KillCursorsOperation } from '../operations/kill_cursors';\nimport { ReadConcern, ReadConcernLike } from '../read_concern';\nimport { ReadPreference, ReadPreferenceLike } from '../read_preference';\nimport type { Server } from '../sdam/server';\nimport { ClientSession, maybeClearPinnedConnection } from '../sessions';\nimport { Callback, maybePromise, MongoDBNamespace, ns } from '../utils';\n\n/** @internal */\nconst kId = Symbol('id');\n/** @internal */\nconst kDocuments = Symbol('documents');\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kNamespace = Symbol('namespace');\n/** @internal */\nconst kClient = Symbol('client');\n/** @internal */\nconst kSession = Symbol('session');\n/** @internal */\nconst kOptions = Symbol('options');\n/** @internal */\nconst kTransform = Symbol('transform');\n/** @internal */\nconst kInitialized = Symbol('initialized');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kKilled = Symbol('killed');\n/** @internal */\nconst kInit = Symbol('kInit');\n\n/** @public */\nexport const CURSOR_FLAGS = [\n  'tailable',\n  'oplogReplay',\n  'noCursorTimeout',\n  'awaitData',\n  'exhaust',\n  'partial'\n] as const;\n\n/** @public\n * @deprecated This interface is deprecated */\nexport interface CursorCloseOptions {\n  /** Bypass calling killCursors when closing the cursor. */\n  /** @deprecated  the skipKillCursors option is deprecated */\n  skipKillCursors?: boolean;\n}\n\n/** @public */\nexport interface CursorStreamOptions {\n  /** A transformation method applied to each document emitted by the stream */\n  transform?(this: void, doc: Document): Document;\n}\n\n/** @public */\nexport type CursorFlag = typeof CURSOR_FLAGS[number];\n\n/** @public */\nexport interface AbstractCursorOptions extends BSONSerializeOptions {\n  session?: ClientSession;\n  readPreference?: ReadPreferenceLike;\n  readConcern?: ReadConcernLike;\n  batchSize?: number;\n  maxTimeMS?: number;\n  /**\n   * Comment to apply to the operation.\n   *\n   * In server versions pre-4.4, 'comment' must be string.  A server\n   * error will be thrown if any other type is provided.\n   *\n   * In server versions 4.4 and above, 'comment' can be any valid BSON type.\n   */\n  comment?: unknown;\n  tailable?: boolean;\n  awaitData?: boolean;\n  noCursorTimeout?: boolean;\n}\n\n/** @internal */\nexport type InternalAbstractCursorOptions = Omit<AbstractCursorOptions, 'readPreference'> & {\n  // resolved\n  readPreference: ReadPreference;\n  readConcern?: ReadConcern;\n\n  // cursor flags, some are deprecated\n  oplogReplay?: boolean;\n  exhaust?: boolean;\n  partial?: boolean;\n};\n\n/** @public */\nexport type AbstractCursorEvents = {\n  [AbstractCursor.CLOSE](): void;\n};\n\n/** @public */\nexport abstract class AbstractCursor<\n  TSchema = any,\n  CursorEvents extends AbstractCursorEvents = AbstractCursorEvents\n> extends TypedEventEmitter<CursorEvents> {\n  /** @internal */\n  [kId]?: Long;\n  /** @internal */\n  [kSession]: ClientSession;\n  /** @internal */\n  [kServer]?: Server;\n  /** @internal */\n  [kNamespace]: MongoDBNamespace;\n  /** @internal */\n  [kDocuments]: TSchema[];\n  /** @internal */\n  [kClient]: MongoClient;\n  /** @internal */\n  [kTransform]?: (doc: TSchema) => any;\n  /** @internal */\n  [kInitialized]: boolean;\n  /** @internal */\n  [kClosed]: boolean;\n  /** @internal */\n  [kKilled]: boolean;\n  /** @internal */\n  [kOptions]: InternalAbstractCursorOptions;\n\n  /** @event */\n  static readonly CLOSE = 'close' as const;\n\n  /** @internal */\n  constructor(\n    client: MongoClient,\n    namespace: MongoDBNamespace,\n    options: AbstractCursorOptions = {}\n  ) {\n    super();\n\n    if (!client.s.isMongoClient) {\n      throw new MongoRuntimeError('Cursor must be constructed with MongoClient');\n    }\n    this[kClient] = client;\n    this[kNamespace] = namespace;\n    this[kDocuments] = []; // TODO: https://github.com/microsoft/TypeScript/issues/36230\n    this[kInitialized] = false;\n    this[kClosed] = false;\n    this[kKilled] = false;\n    this[kOptions] = {\n      readPreference:\n        options.readPreference && options.readPreference instanceof ReadPreference\n          ? options.readPreference\n          : ReadPreference.primary,\n      ...pluckBSONSerializeOptions(options)\n    };\n\n    const readConcern = ReadConcern.fromOptions(options);\n    if (readConcern) {\n      this[kOptions].readConcern = readConcern;\n    }\n\n    if (typeof options.batchSize === 'number') {\n      this[kOptions].batchSize = options.batchSize;\n    }\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      this[kOptions].comment = options.comment;\n    }\n\n    if (typeof options.maxTimeMS === 'number') {\n      this[kOptions].maxTimeMS = options.maxTimeMS;\n    }\n\n    if (options.session instanceof ClientSession) {\n      this[kSession] = options.session;\n    } else {\n      this[kSession] = this[kClient].startSession({ owner: this, explicit: false });\n    }\n  }\n\n  get id(): Long | undefined {\n    return this[kId];\n  }\n\n  /** @internal */\n  get client(): MongoClient {\n    return this[kClient];\n  }\n\n  /** @internal */\n  get server(): Server | undefined {\n    return this[kServer];\n  }\n\n  get namespace(): MongoDBNamespace {\n    return this[kNamespace];\n  }\n\n  get readPreference(): ReadPreference {\n    return this[kOptions].readPreference;\n  }\n\n  get readConcern(): ReadConcern | undefined {\n    return this[kOptions].readConcern;\n  }\n\n  /** @internal */\n  get session(): ClientSession {\n    return this[kSession];\n  }\n\n  set session(clientSession: ClientSession) {\n    this[kSession] = clientSession;\n  }\n\n  /** @internal */\n  get cursorOptions(): InternalAbstractCursorOptions {\n    return this[kOptions];\n  }\n\n  get closed(): boolean {\n    return this[kClosed];\n  }\n\n  get killed(): boolean {\n    return this[kKilled];\n  }\n\n  get loadBalanced(): boolean {\n    return !!this[kClient].topology?.loadBalanced;\n  }\n\n  /** Returns current buffered documents length */\n  bufferedCount(): number {\n    return this[kDocuments].length;\n  }\n\n  /** Returns current buffered documents */\n  readBufferedDocuments(number?: number): TSchema[] {\n    return this[kDocuments].splice(0, number ?? this[kDocuments].length);\n  }\n\n  [Symbol.asyncIterator](): AsyncIterator<TSchema, void> {\n    return {\n      next: () =>\n        this.next().then(value =>\n          value != null ? { value, done: false } : { value: undefined, done: true }\n        )\n    };\n  }\n\n  stream(options?: CursorStreamOptions): Readable & AsyncIterable<TSchema> {\n    if (options?.transform) {\n      const transform = options.transform;\n      const readable = new ReadableCursorStream(this);\n\n      return readable.pipe(\n        new Transform({\n          objectMode: true,\n          highWaterMark: 1,\n          transform(chunk, _, callback) {\n            try {\n              const transformed = transform(chunk);\n              callback(undefined, transformed);\n            } catch (err) {\n              callback(err);\n            }\n          }\n        })\n      );\n    }\n\n    return new ReadableCursorStream(this);\n  }\n\n  hasNext(): Promise<boolean>;\n  hasNext(callback: Callback<boolean>): void;\n  hasNext(callback?: Callback<boolean>): Promise<boolean> | void {\n    return maybePromise(callback, done => {\n      if (this[kId] === Long.ZERO) {\n        return done(undefined, false);\n      }\n\n      if (this[kDocuments].length) {\n        return done(undefined, true);\n      }\n\n      next<TSchema>(this, true, (err, doc) => {\n        if (err) return done(err);\n\n        if (doc) {\n          this[kDocuments].unshift(doc);\n          done(undefined, true);\n          return;\n        }\n\n        done(undefined, false);\n      });\n    });\n  }\n\n  /** Get the next available document from the cursor, returns null if no more documents are available. */\n  next(): Promise<TSchema | null>;\n  next(callback: Callback<TSchema | null>): void;\n  next(callback?: Callback<TSchema | null>): Promise<TSchema | null> | void;\n  next(callback?: Callback<TSchema | null>): Promise<TSchema | null> | void {\n    return maybePromise(callback, done => {\n      if (this[kId] === Long.ZERO) {\n        return done(new MongoCursorExhaustedError());\n      }\n\n      next(this, true, done);\n    });\n  }\n\n  /**\n   * Try to get the next available document from the cursor or `null` if an empty batch is returned\n   */\n  tryNext(): Promise<TSchema | null>;\n  tryNext(callback: Callback<TSchema | null>): void;\n  tryNext(callback?: Callback<TSchema | null>): Promise<TSchema | null> | void {\n    return maybePromise(callback, done => {\n      if (this[kId] === Long.ZERO) {\n        return done(new MongoCursorExhaustedError());\n      }\n\n      next(this, false, done);\n    });\n  }\n\n  /**\n   * Iterates over all the documents for this cursor using the iterator, callback pattern.\n   *\n   * @param iterator - The iteration callback.\n   * @param callback - The end callback.\n   */\n  forEach(iterator: (doc: TSchema) => boolean | void): Promise<void>;\n  forEach(iterator: (doc: TSchema) => boolean | void, callback: Callback<void>): void;\n  forEach(\n    iterator: (doc: TSchema) => boolean | void,\n    callback?: Callback<void>\n  ): Promise<void> | void {\n    if (typeof iterator !== 'function') {\n      throw new MongoInvalidArgumentError('Argument \"iterator\" must be a function');\n    }\n    return maybePromise(callback, done => {\n      const transform = this[kTransform];\n      const fetchDocs = () => {\n        next<TSchema>(this, true, (err, doc) => {\n          if (err || doc == null) return done(err);\n          let result;\n          // NOTE: no need to transform because `next` will do this automatically\n          try {\n            result = iterator(doc); // TODO(NODE-3283): Improve transform typing\n          } catch (error) {\n            return done(error);\n          }\n\n          if (result === false) return done();\n\n          // these do need to be transformed since they are copying the rest of the batch\n          const internalDocs = this[kDocuments].splice(0, this[kDocuments].length);\n          for (let i = 0; i < internalDocs.length; ++i) {\n            try {\n              result = iterator(\n                (transform ? transform(internalDocs[i]) : internalDocs[i]) as TSchema // TODO(NODE-3283): Improve transform typing\n              );\n            } catch (error) {\n              return done(error);\n            }\n            if (result === false) return done();\n          }\n\n          fetchDocs();\n        });\n      };\n\n      fetchDocs();\n    });\n  }\n\n  close(): Promise<void>;\n  close(callback: Callback): void;\n  /**\n   * @deprecated options argument is deprecated\n   */\n  close(options: CursorCloseOptions): Promise<void>;\n  /**\n   * @deprecated options argument is deprecated\n   */\n  close(options: CursorCloseOptions, callback: Callback): void;\n  close(options?: CursorCloseOptions | Callback, callback?: Callback): Promise<void> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n\n    const needsToEmitClosed = !this[kClosed];\n    this[kClosed] = true;\n\n    return maybePromise(callback, done => cleanupCursor(this, { needsToEmitClosed }, done));\n  }\n\n  /**\n   * Returns an array of documents. The caller is responsible for making sure that there\n   * is enough memory to store the results. Note that the array only contains partial\n   * results when this cursor had been previously accessed. In that case,\n   * cursor.rewind() can be used to reset the cursor.\n   *\n   * @param callback - The result callback.\n   */\n  toArray(): Promise<TSchema[]>;\n  toArray(callback: Callback<TSchema[]>): void;\n  toArray(callback?: Callback<TSchema[]>): Promise<TSchema[]> | void {\n    return maybePromise(callback, done => {\n      const docs: TSchema[] = [];\n      const transform = this[kTransform];\n      const fetchDocs = () => {\n        // NOTE: if we add a `nextBatch` then we should use it here\n        next<TSchema>(this, true, (err, doc) => {\n          if (err) return done(err);\n          if (doc == null) return done(undefined, docs);\n\n          // NOTE: no need to transform because `next` will do this automatically\n          docs.push(doc);\n\n          // these do need to be transformed since they are copying the rest of the batch\n          const internalDocs = (\n            transform\n              ? this[kDocuments].splice(0, this[kDocuments].length).map(transform)\n              : this[kDocuments].splice(0, this[kDocuments].length)\n          ) as TSchema[]; // TODO(NODE-3283): Improve transform typing\n\n          if (internalDocs) {\n            docs.push(...internalDocs);\n          }\n\n          fetchDocs();\n        });\n      };\n\n      fetchDocs();\n    });\n  }\n\n  /**\n   * Add a cursor flag to the cursor\n   *\n   * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.\n   * @param value - The flag boolean value.\n   */\n  addCursorFlag(flag: CursorFlag, value: boolean): this {\n    assertUninitialized(this);\n    if (!CURSOR_FLAGS.includes(flag)) {\n      throw new MongoInvalidArgumentError(`Flag ${flag} is not one of ${CURSOR_FLAGS}`);\n    }\n\n    if (typeof value !== 'boolean') {\n      throw new MongoInvalidArgumentError(`Flag ${flag} must be a boolean value`);\n    }\n\n    this[kOptions][flag] = value;\n    return this;\n  }\n\n  /**\n   * Map all documents using the provided function\n   * If there is a transform set on the cursor, that will be called first and the result passed to\n   * this function's transform.\n   *\n   * @remarks\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling map,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: FindCursor<Document> = coll.find();\n   * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);\n   * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]\n   * ```\n   * @param transform - The mapping transformation method.\n   */\n  map<T = any>(transform: (doc: TSchema) => T): AbstractCursor<T> {\n    assertUninitialized(this);\n    const oldTransform = this[kTransform] as (doc: TSchema) => TSchema; // TODO(NODE-3283): Improve transform typing\n    if (oldTransform) {\n      this[kTransform] = doc => {\n        return transform(oldTransform(doc));\n      };\n    } else {\n      this[kTransform] = transform;\n    }\n\n    return this as unknown as AbstractCursor<T>;\n  }\n\n  /**\n   * Set the ReadPreference for the cursor.\n   *\n   * @param readPreference - The new read preference for the cursor.\n   */\n  withReadPreference(readPreference: ReadPreferenceLike): this {\n    assertUninitialized(this);\n    if (readPreference instanceof ReadPreference) {\n      this[kOptions].readPreference = readPreference;\n    } else if (typeof readPreference === 'string') {\n      this[kOptions].readPreference = ReadPreference.fromString(readPreference);\n    } else {\n      throw new MongoInvalidArgumentError(`Invalid read preference: ${readPreference}`);\n    }\n\n    return this;\n  }\n\n  /**\n   * Set the ReadPreference for the cursor.\n   *\n   * @param readPreference - The new read preference for the cursor.\n   */\n  withReadConcern(readConcern: ReadConcernLike): this {\n    assertUninitialized(this);\n    const resolvedReadConcern = ReadConcern.fromOptions({ readConcern });\n    if (resolvedReadConcern) {\n      this[kOptions].readConcern = resolvedReadConcern;\n    }\n\n    return this;\n  }\n\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   *\n   * @param value - Number of milliseconds to wait before aborting the query.\n   */\n  maxTimeMS(value: number): this {\n    assertUninitialized(this);\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n    }\n\n    this[kOptions].maxTimeMS = value;\n    return this;\n  }\n\n  /**\n   * Set the batch size for the cursor.\n   *\n   * @param value - The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/find/|find command documentation}.\n   */\n  batchSize(value: number): this {\n    assertUninitialized(this);\n    if (this[kOptions].tailable) {\n      throw new MongoTailableCursorError('Tailable cursor does not support batchSize');\n    }\n\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Operation \"batchSize\" requires an integer');\n    }\n\n    this[kOptions].batchSize = value;\n    return this;\n  }\n\n  /**\n   * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n   * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n   * if the resultant data has already been retrieved by this cursor.\n   */\n  rewind(): void {\n    if (!this[kInitialized]) {\n      return;\n    }\n\n    this[kId] = undefined;\n    this[kDocuments] = [];\n    this[kClosed] = false;\n    this[kKilled] = false;\n    this[kInitialized] = false;\n\n    const session = this[kSession];\n    if (session) {\n      // We only want to end this session if we created it, and it hasn't ended yet\n      if (session.explicit === false) {\n        if (!session.hasEnded) {\n          session.endSession().catch(() => null);\n        }\n        this[kSession] = this.client.startSession({ owner: this, explicit: false });\n      }\n    }\n  }\n\n  /**\n   * Returns a new uninitialized copy of this cursor, with options matching those that have been set on the current instance\n   */\n  abstract clone(): AbstractCursor<TSchema>;\n\n  /** @internal */\n  abstract _initialize(\n    session: ClientSession | undefined,\n    callback: Callback<ExecutionResult>\n  ): void;\n\n  /** @internal */\n  _getMore(batchSize: number, callback: Callback<Document>): void {\n    const cursorId = this[kId];\n    const cursorNs = this[kNamespace];\n    const server = this[kServer];\n\n    if (cursorId == null) {\n      callback(new MongoRuntimeError('Unable to iterate cursor with no id'));\n      return;\n    }\n\n    if (server == null) {\n      callback(new MongoRuntimeError('Unable to iterate cursor without selected server'));\n      return;\n    }\n\n    const getMoreOperation = new GetMoreOperation(cursorNs, cursorId, server, {\n      ...this[kOptions],\n      session: this[kSession],\n      batchSize\n    });\n\n    executeOperation(this[kClient], getMoreOperation, callback);\n  }\n\n  /**\n   * @internal\n   *\n   * This function is exposed for the unified test runner's createChangeStream\n   * operation.  We cannot refactor to use the abstract _initialize method without\n   * a significant refactor.\n   */\n  [kInit](callback: Callback<TSchema | null>): void {\n    this._initialize(this[kSession], (err, state) => {\n      if (state) {\n        const response = state.response;\n        this[kServer] = state.server;\n\n        if (response.cursor) {\n          this[kId] =\n            typeof response.cursor.id === 'number'\n              ? Long.fromNumber(response.cursor.id)\n              : response.cursor.id;\n\n          if (response.cursor.ns) {\n            this[kNamespace] = ns(response.cursor.ns);\n          }\n\n          this[kDocuments] = response.cursor.firstBatch;\n        }\n\n        // When server responses return without a cursor document, we close this cursor\n        // and return the raw server response. This is often the case for explain commands\n        // for example\n        if (this[kId] == null) {\n          this[kId] = Long.ZERO;\n          // TODO(NODE-3286): ExecutionResult needs to accept a generic parameter\n          this[kDocuments] = [state.response as TODO_NODE_3286];\n        }\n      }\n\n      // the cursor is now initialized, even if an error occurred or it is dead\n      this[kInitialized] = true;\n\n      if (err || cursorIsDead(this)) {\n        return cleanupCursor(this, { error: err }, () => callback(err, nextDocument(this)));\n      }\n\n      callback();\n    });\n  }\n}\n\nfunction nextDocument<T>(cursor: AbstractCursor): T | null {\n  if (cursor[kDocuments] == null || !cursor[kDocuments].length) {\n    return null;\n  }\n\n  const doc = cursor[kDocuments].shift();\n  if (doc) {\n    const transform = cursor[kTransform];\n    if (transform) {\n      return transform(doc) as T;\n    }\n\n    return doc;\n  }\n\n  return null;\n}\n\n/**\n * @param cursor - the cursor on which to call `next`\n * @param blocking - a boolean indicating whether or not the cursor should `block` until data\n *     is available.  Generally, this flag is set to `false` because if the getMore returns no documents,\n *     the cursor has been exhausted.  In certain scenarios (ChangeStreams, tailable await cursors and\n *     `tryNext`, for example) blocking is necessary because a getMore returning no documents does\n *     not indicate the end of the cursor.\n * @param callback - callback to return the result to the caller\n * @returns\n */\nexport function next<T>(\n  cursor: AbstractCursor<T>,\n  blocking: boolean,\n  callback: Callback<T | null>\n): void {\n  const cursorId = cursor[kId];\n  if (cursor.closed) {\n    return callback(undefined, null);\n  }\n\n  if (cursor[kDocuments] && cursor[kDocuments].length) {\n    callback(undefined, nextDocument<T>(cursor));\n    return;\n  }\n\n  if (cursorId == null) {\n    // All cursors must operate within a session, one must be made implicitly if not explicitly provided\n    cursor[kInit]((err, value) => {\n      if (err) return callback(err);\n      if (value) {\n        return callback(undefined, value);\n      }\n      return next(cursor, blocking, callback);\n    });\n\n    return;\n  }\n\n  if (cursorIsDead(cursor)) {\n    return cleanupCursor(cursor, undefined, () => callback(undefined, null));\n  }\n\n  // otherwise need to call getMore\n  const batchSize = cursor[kOptions].batchSize || 1000;\n  cursor._getMore(batchSize, (err, response) => {\n    if (response) {\n      const cursorId =\n        typeof response.cursor.id === 'number'\n          ? Long.fromNumber(response.cursor.id)\n          : response.cursor.id;\n\n      cursor[kDocuments] = response.cursor.nextBatch;\n      cursor[kId] = cursorId;\n    }\n\n    if (err || cursorIsDead(cursor)) {\n      return cleanupCursor(cursor, { error: err }, () => callback(err, nextDocument<T>(cursor)));\n    }\n\n    if (cursor[kDocuments].length === 0 && blocking === false) {\n      return callback(undefined, null);\n    }\n\n    next(cursor, blocking, callback);\n  });\n}\n\nfunction cursorIsDead(cursor: AbstractCursor): boolean {\n  const cursorId = cursor[kId];\n  return !!cursorId && cursorId.isZero();\n}\n\nfunction cleanupCursor(\n  cursor: AbstractCursor,\n  options: { error?: AnyError | undefined; needsToEmitClosed?: boolean } | undefined,\n  callback: Callback\n): void {\n  const cursorId = cursor[kId];\n  const cursorNs = cursor[kNamespace];\n  const server = cursor[kServer];\n  const session = cursor[kSession];\n  const error = options?.error;\n  const needsToEmitClosed = options?.needsToEmitClosed ?? cursor[kDocuments].length === 0;\n\n  if (error) {\n    if (cursor.loadBalanced && error instanceof MongoNetworkError) {\n      return completeCleanup();\n    }\n  }\n\n  if (cursorId == null || server == null || cursorId.isZero() || cursorNs == null) {\n    if (needsToEmitClosed) {\n      cursor[kClosed] = true;\n      cursor[kId] = Long.ZERO;\n      cursor.emit(AbstractCursor.CLOSE);\n    }\n\n    if (session) {\n      if (session.owner === cursor) {\n        return session.endSession({ error }, callback);\n      }\n\n      if (!session.inTransaction()) {\n        maybeClearPinnedConnection(session, { error });\n      }\n    }\n\n    return callback();\n  }\n\n  function completeCleanup() {\n    if (session) {\n      if (session.owner === cursor) {\n        return session.endSession({ error }, () => {\n          cursor.emit(AbstractCursor.CLOSE);\n          callback();\n        });\n      }\n\n      if (!session.inTransaction()) {\n        maybeClearPinnedConnection(session, { error });\n      }\n    }\n\n    cursor.emit(AbstractCursor.CLOSE);\n    return callback();\n  }\n\n  cursor[kKilled] = true;\n\n  return executeOperation(\n    cursor[kClient],\n    new KillCursorsOperation(cursorId, cursorNs, server, { session }),\n    completeCleanup\n  );\n}\n\n/** @internal */\nexport function assertUninitialized(cursor: AbstractCursor): void {\n  if (cursor[kInitialized]) {\n    throw new MongoCursorInUseError();\n  }\n}\n\nclass ReadableCursorStream extends Readable {\n  private _cursor: AbstractCursor;\n  private _readInProgress = false;\n\n  constructor(cursor: AbstractCursor) {\n    super({\n      objectMode: true,\n      autoDestroy: false,\n      highWaterMark: 1\n    });\n    this._cursor = cursor;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  override _read(size: number): void {\n    if (!this._readInProgress) {\n      this._readInProgress = true;\n      this._readNext();\n    }\n  }\n\n  override _destroy(error: Error | null, callback: (error?: Error | null) => void): void {\n    this._cursor.close(err => process.nextTick(callback, err || error));\n  }\n\n  private _readNext() {\n    next(this._cursor, true, (err, result) => {\n      if (err) {\n        // NOTE: This is questionable, but we have a test backing the behavior. It seems the\n        //       desired behavior is that a stream ends cleanly when a user explicitly closes\n        //       a client during iteration. Alternatively, we could do the \"right\" thing and\n        //       propagate the error message by removing this special case.\n        if (err.message.match(/server is closed/)) {\n          this._cursor.close().catch(() => null);\n          return this.push(null);\n        }\n\n        // NOTE: This is also perhaps questionable. The rationale here is that these errors tend\n        //       to be \"operation interrupted\", where a cursor has been closed but there is an\n        //       active getMore in-flight. This used to check if the cursor was killed but once\n        //       that changed to happen in cleanup legitimate errors would not destroy the\n        //       stream. There are change streams test specifically test these cases.\n        if (err.message.match(/interrupted/)) {\n          return this.push(null);\n        }\n\n        return this.destroy(err);\n      }\n\n      if (result == null) {\n        this.push(null);\n      } else if (this.destroyed) {\n        this._cursor.close().catch(() => null);\n      } else {\n        if (this.push(result)) {\n          return this._readNext();\n        }\n\n        this._readInProgress = false;\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}