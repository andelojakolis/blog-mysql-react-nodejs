{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FEATURE_FLAGS = exports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.checkTLSOptions = exports.resolveSRVRecord = void 0;\n\nconst dns = require(\"dns\");\n\nconst fs = require(\"fs\");\n\nconst mongodb_connection_string_url_1 = require(\"mongodb-connection-string-url\");\n\nconst url_1 = require(\"url\");\n\nconst mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\n\nconst providers_1 = require(\"./cmap/auth/providers\");\n\nconst compression_1 = require(\"./cmap/wire_protocol/compression\");\n\nconst encrypter_1 = require(\"./encrypter\");\n\nconst error_1 = require(\"./error\");\n\nconst logger_1 = require(\"./logger\");\n\nconst mongo_client_1 = require(\"./mongo_client\");\n\nconst promise_provider_1 = require(\"./promise_provider\");\n\nconst read_concern_1 = require(\"./read_concern\");\n\nconst read_preference_1 = require(\"./read_preference\");\n\nconst utils_1 = require(\"./utils\");\n\nconst write_concern_1 = require(\"./write_concern\");\n\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\n\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\n\n\nfunction resolveSRVRecord(options, callback) {\n  if (typeof options.srvHost !== 'string') {\n    return callback(new error_1.MongoAPIError('Option \"srvHost\" must not be empty'));\n  }\n\n  if (options.srvHost.split('.').length < 3) {\n    // TODO(NODE-3484): Replace with MongoConnectionStringError\n    return callback(new error_1.MongoAPIError('URI must include hostname, domain name, and tld'));\n  } // Resolve the SRV record and use the result as the list of hosts to connect to.\n\n\n  const lookupAddress = options.srvHost;\n  dns.resolveSrv(`_${options.srvServiceName}._tcp.${lookupAddress}`, (err, addresses) => {\n    if (err) return callback(err);\n\n    if (addresses.length === 0) {\n      return callback(new error_1.MongoAPIError('No addresses found at host'));\n    }\n\n    for (const {\n      name\n    } of addresses) {\n      if (!matchesParentDomain(name, lookupAddress)) {\n        return callback(new error_1.MongoAPIError('Server record does not share hostname with parent URI'));\n      }\n    }\n\n    const hostAddresses = addresses.map(r => {\n      var _a;\n\n      return utils_1.HostAddress.fromString(`${r.name}:${(_a = r.port) !== null && _a !== void 0 ? _a : 27017}`);\n    });\n    const lbError = validateLoadBalancedOptions(hostAddresses, options, true);\n\n    if (lbError) {\n      return callback(lbError);\n    } // Resolve TXT record and add options from there if they exist.\n\n\n    dns.resolveTxt(lookupAddress, (err, record) => {\n      var _a, _b, _c;\n\n      if (err) {\n        if (err.code !== 'ENODATA' && err.code !== 'ENOTFOUND') {\n          return callback(err);\n        }\n      } else {\n        if (record.length > 1) {\n          return callback(new error_1.MongoParseError('Multiple text records not allowed'));\n        }\n\n        const txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n        const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n\n        if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n          return callback(new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`));\n        }\n\n        if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n          return callback(new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record'));\n        }\n\n        const source = (_a = txtRecordOptions.get('authSource')) !== null && _a !== void 0 ? _a : undefined;\n        const replicaSet = (_b = txtRecordOptions.get('replicaSet')) !== null && _b !== void 0 ? _b : undefined;\n        const loadBalanced = (_c = txtRecordOptions.get('loadBalanced')) !== null && _c !== void 0 ? _c : undefined;\n\n        if (!options.userSpecifiedAuthSource && source && options.credentials && !providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)) {\n          options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n            source\n          });\n        }\n\n        if (!options.userSpecifiedReplicaSet && replicaSet) {\n          options.replicaSet = replicaSet;\n        }\n\n        if (loadBalanced === 'true') {\n          options.loadBalanced = true;\n        }\n\n        if (options.replicaSet && options.srvMaxHosts > 0) {\n          return callback(new error_1.MongoParseError('Cannot combine replicaSet option with srvMaxHosts'));\n        }\n\n        const lbError = validateLoadBalancedOptions(hostAddresses, options, true);\n\n        if (lbError) {\n          return callback(lbError);\n        }\n      }\n\n      callback(undefined, hostAddresses);\n    });\n  });\n}\n\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\n * Checks if TLS options are valid\n *\n * @param options - The options used for options parsing\n * @throws MongoParseError if TLS options are invalid\n */\n\nfunction checkTLSOptions(options) {\n  if (!options) return;\n\n  const check = (a, b) => {\n    if (Reflect.has(options, a) && Reflect.has(options, b)) {\n      throw new error_1.MongoParseError(`The '${a}' option cannot be used with '${b}'`);\n    }\n  };\n\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\n\nexports.checkTLSOptions = checkTLSOptions;\nconst TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nconst FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\n\nfunction getBoolean(name, value) {\n  if (typeof value === 'boolean') return value;\n  const valueString = String(value).toLowerCase();\n\n  if (TRUTHS.has(valueString)) {\n    if (valueString !== 'true') {\n      (0, utils_1.emitWarningOnce)(`deprecated value for ${name} : ${valueString} - please update to ${name} : true instead`);\n    }\n\n    return true;\n  }\n\n  if (FALSEHOODS.has(valueString)) {\n    if (valueString !== 'false') {\n      (0, utils_1.emitWarningOnce)(`deprecated value for ${name} : ${valueString} - please update to ${name} : false instead`);\n    }\n\n    return false;\n  }\n\n  throw new error_1.MongoParseError(`Expected ${name} to be stringified boolean value, got: ${value}`);\n}\n\nfunction getInt(name, value) {\n  if (typeof value === 'number') return Math.trunc(value);\n  const parsedValue = Number.parseInt(String(value), 10);\n  if (!Number.isNaN(parsedValue)) return parsedValue;\n  throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\n\nfunction getUint(name, value) {\n  const parsedValue = getInt(name, value);\n\n  if (parsedValue < 0) {\n    throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n  }\n\n  return parsedValue;\n}\n\nfunction* entriesFromString(value) {\n  const keyValuePairs = value.split(',');\n\n  for (const keyValue of keyValuePairs) {\n    const [key, value] = keyValue.split(':');\n\n    if (value == null) {\n      throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n    }\n\n    yield [key, value];\n  }\n}\n\nclass CaseInsensitiveMap extends Map {\n  constructor() {\n    let entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    super(entries.map(_ref => {\n      let [k, v] = _ref;\n      return [k.toLowerCase(), v];\n    }));\n  }\n\n  has(k) {\n    return super.has(k.toLowerCase());\n  }\n\n  get(k) {\n    return super.get(k.toLowerCase());\n  }\n\n  set(k, v) {\n    return super.set(k.toLowerCase(), v);\n  }\n\n  delete(k) {\n    return super.delete(k.toLowerCase());\n  }\n\n}\n\nfunction parseOptions(uri) {\n  let mongoClient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n\n  const url = new mongodb_connection_string_url_1.default(uri);\n  const {\n    hosts,\n    isSRV\n  } = url;\n  const mongoOptions = Object.create(null); // Feature flags\n\n  for (const flag of Object.getOwnPropertySymbols(options)) {\n    if (exports.FEATURE_FLAGS.has(flag)) {\n      mongoOptions[flag] = options[flag];\n    }\n  }\n\n  mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n  const urlOptions = new CaseInsensitiveMap();\n\n  if (url.pathname !== '/' && url.pathname !== '') {\n    const dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n\n  if (url.username !== '') {\n    const auth = {\n      username: decodeURIComponent(url.username)\n    };\n\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n\n    urlOptions.set('auth', [auth]);\n  }\n\n  for (const key of url.searchParams.keys()) {\n    const values = [...url.searchParams.getAll(key)];\n\n    if (values.includes('')) {\n      throw new error_1.MongoAPIError('URI cannot contain options with no value');\n    }\n\n    if (!urlOptions.has(key)) {\n      urlOptions.set(key, values);\n    }\n  }\n\n  const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(_ref2 => {\n    let [, v] = _ref2;\n    return v != null;\n  })); // Validate options that can only be provided by one of uri or object\n\n  if (urlOptions.has('serverApi')) {\n    throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n  }\n\n  if (objectOptions.has('loadBalanced')) {\n    throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n  } // All option collection\n\n\n  const allOptions = new CaseInsensitiveMap();\n  const allKeys = new Set([...urlOptions.keys(), ...objectOptions.keys(), ...exports.DEFAULT_OPTIONS.keys()]);\n\n  for (const key of allKeys) {\n    const values = [];\n    const objectOptionValue = objectOptions.get(key);\n\n    if (objectOptionValue != null) {\n      values.push(objectOptionValue);\n    }\n\n    const urlValue = urlOptions.get(key);\n\n    if (urlValue != null) {\n      values.push(...urlValue);\n    }\n\n    const defaultOptionsValue = exports.DEFAULT_OPTIONS.get(key);\n\n    if (defaultOptionsValue != null) {\n      values.push(defaultOptionsValue);\n    }\n\n    allOptions.set(key, values);\n  }\n\n  if (allOptions.has('tlsCertificateKeyFile') && !allOptions.has('tlsCertificateFile')) {\n    allOptions.set('tlsCertificateFile', allOptions.get('tlsCertificateKeyFile'));\n  }\n\n  if (allOptions.has('tls') || allOptions.has('ssl')) {\n    const tlsAndSslOpts = (allOptions.get('tls') || []).concat(allOptions.get('ssl') || []).map(getBoolean.bind(null, 'tls/ssl'));\n\n    if (new Set(tlsAndSslOpts).size !== 1) {\n      throw new error_1.MongoParseError('All values of tls/ssl must be the same.');\n    }\n  }\n\n  const unsupportedOptions = (0, utils_1.setDifference)(allKeys, Array.from(Object.keys(exports.OPTIONS)).map(s => s.toLowerCase()));\n\n  if (unsupportedOptions.size !== 0) {\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`);\n  } // Option parsing and setting\n\n\n  for (const [key, descriptor] of Object.entries(exports.OPTIONS)) {\n    const values = allOptions.get(key);\n    if (!values || values.length === 0) continue;\n    setOption(mongoOptions, key, descriptor, values);\n  }\n\n  if (mongoOptions.credentials) {\n    const isGssapi = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI;\n    const isX509 = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_X509;\n    const isAws = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_AWS;\n\n    if ((isGssapi || isX509) && allOptions.has('authSource') && mongoOptions.credentials.source !== '$external') {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new error_1.MongoParseError(`${mongoOptions.credentials} can only have authSource set to '$external'`);\n    }\n\n    if (!(isGssapi || isX509 || isAws) && mongoOptions.dbName && !allOptions.has('authSource')) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n\n    mongoOptions.credentials.validate(); // Check if the only auth related option provided was authSource, if so we can remove credentials\n\n    if (mongoOptions.credentials.password === '' && mongoOptions.credentials.username === '' && mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && Object.keys(mongoOptions.credentials.mechanismProperties).length === 0) {\n      delete mongoOptions.credentials;\n    }\n  }\n\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n\n  checkTLSOptions(mongoOptions);\n  if (options.promiseLibrary) promise_provider_1.PromiseProvider.set(options.promiseLibrary);\n  const lbError = validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n\n  if (lbError) {\n    throw lbError;\n  }\n\n  if (mongoClient && mongoOptions.autoEncryption) {\n    encrypter_1.Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  } // Potential SRV Overrides and SRV connection string validations\n\n\n  mongoOptions.userSpecifiedAuthSource = objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet = objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n\n    if (mongoOptions.directConnection) {\n      throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n    }\n\n    if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n    } // SRV turns on TLS by default, but users can override and turn it off\n\n\n    const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n    const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n\n    if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n      mongoOptions.tls = true;\n    }\n  } else {\n    const userSpecifiedSrvOptions = urlOptions.has('srvMaxHosts') || objectOptions.has('srvMaxHosts') || urlOptions.has('srvServiceName') || objectOptions.has('srvServiceName');\n\n    if (userSpecifiedSrvOptions) {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts or srvServiceName with a non-srv connection string');\n    }\n  }\n\n  if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n    throw new error_1.MongoParseError('directConnection option requires exactly one host');\n  }\n\n  if (!mongoOptions.proxyHost && (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)) {\n    throw new error_1.MongoParseError('Must specify proxyHost if other proxy options are passed');\n  }\n\n  if (mongoOptions.proxyUsername && !mongoOptions.proxyPassword || !mongoOptions.proxyUsername && mongoOptions.proxyPassword) {\n    throw new error_1.MongoParseError('Can only specify both of proxy username/password or neither');\n  }\n\n  const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(key => {\n    var _a;\n\n    return (_a = urlOptions.get(key)) !== null && _a !== void 0 ? _a : [];\n  });\n\n  if (proxyOptions.some(options => options.length > 1)) {\n    throw new error_1.MongoParseError('Proxy options cannot be specified multiple times in the connection string');\n  }\n\n  return mongoOptions;\n}\n\nexports.parseOptions = parseOptions;\n\nfunction validateLoadBalancedOptions(hosts, mongoOptions, isSrv) {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      return new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n\n    if (mongoOptions.replicaSet) {\n      return new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n\n    if (mongoOptions.directConnection) {\n      return new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n\n    if (isSrv && mongoOptions.srvMaxHosts > 0) {\n      return new error_1.MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n    }\n  }\n\n  return;\n}\n\nfunction setOption(mongoOptions, key, descriptor, values) {\n  const {\n    target,\n    type,\n    transform,\n    deprecated\n  } = descriptor;\n  const name = target !== null && target !== void 0 ? target : key;\n\n  if (deprecated) {\n    const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n    (0, utils_1.emitWarning)(`${key} is a deprecated option${deprecatedMsg}`);\n  }\n\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n\n    case 'int':\n      mongoOptions[name] = getInt(name, values[0]);\n      break;\n\n    case 'uint':\n      mongoOptions[name] = getUint(name, values[0]);\n      break;\n\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n\n      mongoOptions[name] = String(values[0]);\n      break;\n\n    case 'record':\n      if (!(0, utils_1.isRecord)(values[0])) {\n        throw new error_1.MongoParseError(`${name} must be an object`);\n      }\n\n      mongoOptions[name] = values[0];\n      break;\n\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n\n    default:\n      {\n        if (!transform) {\n          throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n        }\n\n        const transformValue = transform({\n          name,\n          options: mongoOptions,\n          values\n        });\n        mongoOptions[name] = transformValue;\n        break;\n      }\n  }\n}\n\nexports.OPTIONS = {\n  appName: {\n    target: 'metadata',\n\n    transform(_ref3) {\n      let {\n        options,\n        values: [value]\n      } = _ref3;\n      return (0, utils_1.makeClientMetadata)({ ...options.driverInfo,\n        appName: String(value)\n      });\n    }\n\n  },\n  auth: {\n    target: 'credentials',\n\n    transform(_ref4) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref4;\n\n      if (!(0, utils_1.isRecord)(value, ['username', 'password'])) {\n        throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n      }\n\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n\n  },\n  authMechanism: {\n    target: 'credentials',\n\n    transform(_ref5) {\n      let {\n        options,\n        values: [value]\n      } = _ref5;\n\n      var _a, _b;\n\n      const mechanisms = Object.values(providers_1.AuthMechanism);\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\n\n      if (!mechanism) {\n        throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n      }\n\n      let source = (_a = options.credentials) === null || _a === void 0 ? void 0 : _a.source;\n\n      if (mechanism === providers_1.AuthMechanism.MONGODB_PLAIN || providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n\n      let password = (_b = options.credentials) === null || _b === void 0 ? void 0 : _b.password;\n\n      if (mechanism === providers_1.AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanism,\n        source,\n        password\n      });\n    }\n\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n\n    transform(_ref6) {\n      let {\n        options,\n        values: [optionValue]\n      } = _ref6;\n\n      if (typeof optionValue === 'string') {\n        const mechanismProperties = Object.create(null);\n\n        for (const [key, value] of entriesFromString(optionValue)) {\n          try {\n            mechanismProperties[key] = getBoolean(key, value);\n          } catch {\n            mechanismProperties[key] = value;\n          }\n        }\n\n        return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n          mechanismProperties\n        });\n      }\n\n      if (!(0, utils_1.isRecord)(optionValue)) {\n        throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n      }\n\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanismProperties: optionValue\n      });\n    }\n\n  },\n  authSource: {\n    target: 'credentials',\n\n    transform(_ref7) {\n      let {\n        options,\n        values: [value]\n      } = _ref7;\n      const source = String(value);\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        source\n      });\n    }\n\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n\n    transform(_ref8) {\n      let {\n        values: [version]\n      } = _ref8;\n      const serverApiToValidate = typeof version === 'string' ? {\n        version\n      } : version;\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n\n      if (!versionToValidate) {\n        throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n\n      if (!Object.values(mongo_client_1.ServerApiVersion).some(v => v === versionToValidate)) {\n        throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n\n      return serverApiToValidate;\n    }\n\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n\n    transform(_ref9) {\n      let {\n        values\n      } = _ref9;\n      const compressionList = new Set();\n\n      for (const compVal of values) {\n        const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n\n        if (!Array.isArray(compValArray)) {\n          throw new error_1.MongoInvalidArgumentError('compressors must be an array or a comma-delimited list of strings');\n        }\n\n        for (const c of compValArray) {\n          if (Object.keys(compression_1.Compressor).includes(String(c))) {\n            compressionList.add(String(c));\n          } else {\n            throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n          }\n        }\n      }\n\n      return [...compressionList];\n    }\n\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    target: 'metadata',\n    default: (0, utils_1.makeClientMetadata)(),\n\n    transform(_ref10) {\n      let {\n        options,\n        values: [value]\n      } = _ref10;\n\n      var _a, _b;\n\n      if (!(0, utils_1.isRecord)(value)) throw new error_1.MongoParseError('DriverInfo must be an object');\n      return (0, utils_1.makeClientMetadata)({\n        driverInfo: value,\n        appName: (_b = (_a = options.metadata) === null || _a === void 0 ? void 0 : _a.application) === null || _b === void 0 ? void 0 : _b.name\n      });\n    }\n\n  },\n  enableUtf8Validation: {\n    type: 'boolean',\n    default: true\n  },\n  family: {\n    transform(_ref11) {\n      let {\n        name,\n        values: [value]\n      } = _ref11;\n      const transformValue = getInt(name, value);\n\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n\n      throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n    }\n\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n\n    transform(_ref12) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref12;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          fsync: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n      return wc;\n    }\n\n  },\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n\n    transform(_ref13) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref13;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n\n  },\n  journal: {\n    target: 'writeConcern',\n\n    transform(_ref14) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref14;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n\n  },\n  keepAlive: {\n    default: true,\n    type: 'boolean'\n  },\n  keepAliveInitialDelay: {\n    default: 120000,\n    type: 'uint'\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  logger: {\n    default: new logger_1.Logger('MongoClient'),\n\n    transform(_ref15) {\n      let {\n        values: [value]\n      } = _ref15;\n\n      if (value instanceof logger_1.Logger) {\n        return value;\n      }\n\n      (0, utils_1.emitWarning)('Alternative loggers might not be supported'); // TODO: make Logger an interface that others can implement, make usage consistent in driver\n      // DRIVERS-1204\n\n      return;\n    }\n\n  },\n  loggerLevel: {\n    target: 'logger',\n\n    transform(_ref16) {\n      let {\n        values: [value]\n      } = _ref16;\n      return new logger_1.Logger('MongoClient', {\n        loggerLevel: value\n      });\n    }\n\n  },\n  maxConnecting: {\n    default: 2,\n\n    transform(_ref17) {\n      let {\n        name,\n        values: [value]\n      } = _ref17;\n      const maxConnecting = getUint(name, value);\n\n      if (maxConnecting === 0) {\n        throw new error_1.MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n      }\n\n      return maxConnecting;\n    }\n\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n\n    transform(_ref18) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref18;\n      const maxStalenessSeconds = getUint(name, value);\n\n      if (options.readPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference,\n            maxStalenessSeconds\n          }\n        });\n      } else {\n        return new read_preference_1.ReadPreference('secondary', undefined, {\n          maxStalenessSeconds\n        });\n      }\n    }\n\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n\n    transform(_ref19) {\n      let {\n        values: [value],\n        options\n      } = _ref19;\n      return { ...options.driverInfo,\n        name: String(value)\n      };\n    }\n\n  },\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: utils_1.DEFAULT_PK_FACTORY,\n\n    transform(_ref20) {\n      let {\n        values: [value]\n      } = _ref20;\n\n      if ((0, utils_1.isRecord)(value, ['createPk']) && typeof value.createPk === 'function') {\n        return value;\n      }\n\n      throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n    }\n\n  },\n  promiseLibrary: {\n    deprecated: true,\n    type: 'any'\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  proxyHost: {\n    type: 'string'\n  },\n  proxyPassword: {\n    type: 'string'\n  },\n  proxyPort: {\n    type: 'uint'\n  },\n  proxyUsername: {\n    type: 'string'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform(_ref21) {\n      let {\n        values: [value],\n        options\n      } = _ref21;\n\n      if (value instanceof read_concern_1.ReadConcern || (0, utils_1.isRecord)(value, ['level'])) {\n        return read_concern_1.ReadConcern.fromOptions({ ...options.readConcern,\n          ...value\n        });\n      }\n\n      throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n    }\n\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n\n    transform(_ref22) {\n      let {\n        values: [level],\n        options\n      } = _ref22;\n      return read_concern_1.ReadConcern.fromOptions({ ...options.readConcern,\n        level: level\n      });\n    }\n\n  },\n  readPreference: {\n    default: read_preference_1.ReadPreference.primary,\n\n    transform(_ref23) {\n      let {\n        values: [value],\n        options\n      } = _ref23;\n\n      var _a, _b, _c;\n\n      if (value instanceof read_preference_1.ReadPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n      }\n\n      if ((0, utils_1.isRecord)(value, ['mode'])) {\n        const rp = read_preference_1.ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n        if (rp) return rp;else throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n      }\n\n      if (typeof value === 'string') {\n        const rpOpts = {\n          hedge: (_a = options.readPreference) === null || _a === void 0 ? void 0 : _a.hedge,\n          maxStalenessSeconds: (_b = options.readPreference) === null || _b === void 0 ? void 0 : _b.maxStalenessSeconds\n        };\n        return new read_preference_1.ReadPreference(value, (_c = options.readPreference) === null || _c === void 0 ? void 0 : _c.tags, rpOpts);\n      }\n\n      throw new error_1.MongoParseError(`Unknown ReadPreference value: ${value}`);\n    }\n\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n\n    transform(_ref24) {\n      let {\n        values,\n        options\n      } = _ref24;\n      const tags = Array.isArray(values[0]) ? values[0] : values;\n      const readPreferenceTags = [];\n\n      for (const tag of tags) {\n        const readPreferenceTag = Object.create(null);\n\n        if (typeof tag === 'string') {\n          for (const [k, v] of entriesFromString(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n\n        if ((0, utils_1.isRecord)(tag)) {\n          for (const [k, v] of Object.entries(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n\n        readPreferenceTags.push(readPreferenceTag);\n      }\n\n      return read_preference_1.ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags\n      });\n    }\n\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  srvMaxHosts: {\n    type: 'uint',\n    default: 0\n  },\n  srvServiceName: {\n    type: 'string',\n    default: 'mongodb'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  sslCA: {\n    target: 'ca',\n\n    transform(_ref25) {\n      let {\n        values: [value]\n      } = _ref25;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  sslCRL: {\n    target: 'crl',\n\n    transform(_ref26) {\n      let {\n        values: [value]\n      } = _ref26;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  sslCert: {\n    target: 'cert',\n\n    transform(_ref27) {\n      let {\n        values: [value]\n      } = _ref27;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  sslKey: {\n    target: 'key',\n\n    transform(_ref28) {\n      let {\n        values: [value]\n      } = _ref28;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  sslPass: {\n    deprecated: true,\n    target: 'passphrase',\n    type: 'string'\n  },\n  sslValidate: {\n    target: 'rejectUnauthorized',\n    type: 'boolean'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n\n    transform(_ref29) {\n      let {\n        name,\n        values: [value]\n      } = _ref29;\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n\n    transform(_ref30) {\n      let {\n        name,\n        values: [value]\n      } = _ref30;\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? () => undefined : undefined;\n    }\n\n  },\n  tlsCAFile: {\n    target: 'ca',\n\n    transform(_ref31) {\n      let {\n        values: [value]\n      } = _ref31;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  tlsCertificateFile: {\n    target: 'cert',\n\n    transform(_ref32) {\n      let {\n        values: [value]\n      } = _ref32;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  tlsCertificateKeyFile: {\n    target: 'key',\n\n    transform(_ref33) {\n      let {\n        values: [value]\n      } = _ref33;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform(_ref34) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref34;\n      const tlsInsecure = getBoolean(name, value);\n\n      if (tlsInsecure) {\n        options.checkServerIdentity = () => undefined;\n\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames ? () => undefined : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n\n      return tlsInsecure;\n    }\n\n  },\n  w: {\n    target: 'writeConcern',\n\n    transform(_ref35) {\n      let {\n        values: [value],\n        options\n      } = _ref35;\n      return write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          w: value\n        }\n      });\n    }\n\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n\n    transform(_ref36) {\n      let {\n        values: [value],\n        options\n      } = _ref36;\n\n      if ((0, utils_1.isRecord)(value) || value instanceof write_concern_1.WriteConcern) {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: { ...options.writeConcern,\n            ...value\n          }\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: { ...options.writeConcern,\n            w: value\n          }\n        });\n      }\n\n      throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n    }\n\n  },\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n\n    transform(_ref37) {\n      let {\n        values: [value],\n        options\n      } = _ref37;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          wtimeout: getUint('wtimeout', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n\n  },\n  wtimeoutMS: {\n    target: 'writeConcern',\n\n    transform(_ref38) {\n      let {\n        values: [value],\n        options\n      } = _ref38;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          wtimeoutMS: getUint('wtimeoutMS', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: {\n    type: 'any'\n  },\n  srvPoller: {\n    type: 'any'\n  },\n  // Accepted NodeJS Options\n  minDHSize: {\n    type: 'any'\n  },\n  pskCallback: {\n    type: 'any'\n  },\n  secureContext: {\n    type: 'any'\n  },\n  enableTrace: {\n    type: 'any'\n  },\n  requestCert: {\n    type: 'any'\n  },\n  rejectUnauthorized: {\n    type: 'any'\n  },\n  checkServerIdentity: {\n    type: 'any'\n  },\n  ALPNProtocols: {\n    type: 'any'\n  },\n  SNICallback: {\n    type: 'any'\n  },\n  session: {\n    type: 'any'\n  },\n  requestOCSP: {\n    type: 'any'\n  },\n  localAddress: {\n    type: 'any'\n  },\n  localPort: {\n    type: 'any'\n  },\n  hints: {\n    type: 'any'\n  },\n  lookup: {\n    type: 'any'\n  },\n  ca: {\n    type: 'any'\n  },\n  cert: {\n    type: 'any'\n  },\n  ciphers: {\n    type: 'any'\n  },\n  crl: {\n    type: 'any'\n  },\n  ecdhCurve: {\n    type: 'any'\n  },\n  key: {\n    type: 'any'\n  },\n  passphrase: {\n    type: 'any'\n  },\n  pfx: {\n    type: 'any'\n  },\n  secureProtocol: {\n    type: 'any'\n  },\n  index: {\n    type: 'any'\n  },\n  // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n  useNewUrlParser: {\n    type: 'boolean'\n  },\n  useUnifiedTopology: {\n    type: 'boolean'\n  }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS).filter(_ref39 => {\n  let [, descriptor] = _ref39;\n  return descriptor.default != null;\n}).map(_ref40 => {\n  let [k, d] = _ref40;\n  return [k, d.default];\n}));\n/**\n * Set of permitted feature flags\n * @internal\n */\n\nexports.FEATURE_FLAGS = new Set([Symbol.for('@@mdb.skipPingOnConnect')]);","map":{"version":3,"mappings":"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","names":["VALID_TXT_RECORDS","LB_SINGLE_HOST_ERROR","LB_REPLICA_SET_ERROR","LB_DIRECT_CONNECTION_ERROR","matchesParentDomain","srvAddress","parentDomain","regex","srv","replace","parent","endsWith","resolveSRVRecord","options","callback","srvHost","error_1","split","length","lookupAddress","dns","resolveSrv","srvServiceName","err","addresses","name","hostAddresses","map","r","fromString","port","_a","lbError","validateLoadBalancedOptions","resolveTxt","record","code","txtRecordOptions","url_1","join","txtRecordOptionKeys","keys","some","key","includes","option","get","source","undefined","replicaSet","_b","loadBalanced","_c","userSpecifiedAuthSource","credentials","providers_1","has","mechanism","mongo_credentials_1","merge","userSpecifiedReplicaSet","srvMaxHosts","exports","checkTLSOptions","check","a","b","Reflect","TRUTHS","Set","FALSEHOODS","getBoolean","value","valueString","String","toLowerCase","getInt","Math","trunc","parsedValue","Number","parseInt","isNaN","getUint","entriesFromString","keyValuePairs","keyValue","CaseInsensitiveMap","Map","constructor","entries","k","v","set","delete","parseOptions","uri","mongoClient","mongo_client_1","url","mongodb_connection_string_url_1","hosts","isSRV","mongoOptions","Object","create","flag","getOwnPropertySymbols","utils_1","urlOptions","pathname","dbName","decodeURIComponent","slice","username","auth","password","searchParams","values","getAll","objectOptions","filter","allOptions","allKeys","objectOptionValue","push","urlValue","defaultOptionsValue","tlsAndSslOpts","concat","bind","size","unsupportedOptions","Array","from","s","optionWord","isOrAre","descriptor","setOption","isGssapi","MONGODB_GSSAPI","isX509","MONGODB_X509","isAws","MONGODB_AWS","validate","MONGODB_DEFAULT","mechanismProperties","promiseLibrary","promise_provider_1","autoEncryption","encrypter_1","checkForMongoCrypt","encrypter","autoEncrypter","directConnection","noUserSpecifiedTLS","noUserSpecifiedSSL","tls","userSpecifiedSrvOptions","proxyHost","proxyPort","proxyUsername","proxyPassword","proxyOptions","isSrv","target","type","transform","deprecated","deprecatedMsg","transformValue","appName","driverInfo","authMechanism","mechanisms","m","match","RegExp","raw","MONGODB_PLAIN","authMechanismProperties","optionValue","authSource","bsonRegExp","serverApi","version","serverApiToValidate","versionToValidate","checkKeys","compressors","default","compressionList","compVal","compValArray","isArray","c","compression_1","add","connectTimeoutMS","metadata","application","enableUtf8Validation","family","fieldsAsRaw","forceServerObjectId","fsync","wc","write_concern_1","fromOptions","writeConcern","heartbeatFrequencyMS","ignoreUndefined","j","journal","keepAlive","keepAliveInitialDelay","localThresholdMS","logger","logger_1","loggerLevel","maxConnecting","maxIdleTimeMS","maxPoolSize","maxStalenessSeconds","readPreference","read_preference_1","minInternalBufferSize","minPoolSize","minHeartbeatFrequencyMS","monitorCommands","noDelay","pkFactory","createPk","promoteBuffers","promoteLongs","promoteValues","readConcern","read_concern_1","JSON","stringify","readConcernLevel","level","primary","rp","rpOpts","hedge","tags","readPreferenceTags","tag","readPreferenceTag","retryReads","retryWrites","serializeFunctions","serverSelectionTimeoutMS","servername","socketTimeoutMS","ssl","sslCA","fs","readFileSync","encoding","sslCRL","sslCert","sslKey","sslPass","sslValidate","tlsAllowInvalidCertificates","tlsAllowInvalidHostnames","tlsCAFile","tlsCertificateFile","tlsCertificateKeyFile","tlsCertificateKeyFilePassword","tlsInsecure","checkServerIdentity","rejectUnauthorized","w","waitQueueTimeoutMS","wtimeout","wtimeoutMS","zlibCompressionLevel","connectionType","srvPoller","minDHSize","pskCallback","secureContext","enableTrace","requestCert","ALPNProtocols","SNICallback","session","requestOCSP","localAddress","localPort","hints","lookup","ca","cert","ciphers","crl","ecdhCurve","passphrase","pfx","secureProtocol","index","useNewUrlParser","useUnifiedTopology","d","Symbol","for"],"sources":["C:\\Users\\Anđelo\\node_modules\\mongodb\\src\\connection_string.ts"],"sourcesContent":["import * as dns from 'dns';\nimport * as fs from 'fs';\nimport ConnectionString from 'mongodb-connection-string-url';\nimport { URLSearchParams } from 'url';\n\nimport type { Document } from './bson';\nimport { MongoCredentials } from './cmap/auth/mongo_credentials';\nimport { AUTH_MECHS_AUTH_SRC_EXTERNAL, AuthMechanism } from './cmap/auth/providers';\nimport { Compressor, CompressorName } from './cmap/wire_protocol/compression';\nimport { Encrypter } from './encrypter';\nimport { MongoAPIError, MongoInvalidArgumentError, MongoParseError } from './error';\nimport { Logger, LoggerLevel } from './logger';\nimport {\n  DriverInfo,\n  MongoClient,\n  MongoClientOptions,\n  MongoOptions,\n  PkFactory,\n  ServerApi,\n  ServerApiVersion\n} from './mongo_client';\nimport { PromiseProvider } from './promise_provider';\nimport { ReadConcern, ReadConcernLevel } from './read_concern';\nimport { ReadPreference, ReadPreferenceMode } from './read_preference';\nimport type { TagSet } from './sdam/server_description';\nimport {\n  AnyOptions,\n  Callback,\n  DEFAULT_PK_FACTORY,\n  emitWarning,\n  emitWarningOnce,\n  HostAddress,\n  isRecord,\n  makeClientMetadata,\n  setDifference\n} from './utils';\nimport { W, WriteConcern } from './write_concern';\n\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\n\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR =\n  'loadBalanced option not supported when directConnection is provided';\n\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress: string, parentDomain: string): boolean {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nexport function resolveSRVRecord(options: MongoOptions, callback: Callback<HostAddress[]>): void {\n  if (typeof options.srvHost !== 'string') {\n    return callback(new MongoAPIError('Option \"srvHost\" must not be empty'));\n  }\n\n  if (options.srvHost.split('.').length < 3) {\n    // TODO(NODE-3484): Replace with MongoConnectionStringError\n    return callback(new MongoAPIError('URI must include hostname, domain name, and tld'));\n  }\n\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\n  const lookupAddress = options.srvHost;\n  dns.resolveSrv(`_${options.srvServiceName}._tcp.${lookupAddress}`, (err, addresses) => {\n    if (err) return callback(err);\n\n    if (addresses.length === 0) {\n      return callback(new MongoAPIError('No addresses found at host'));\n    }\n\n    for (const { name } of addresses) {\n      if (!matchesParentDomain(name, lookupAddress)) {\n        return callback(new MongoAPIError('Server record does not share hostname with parent URI'));\n      }\n    }\n\n    const hostAddresses = addresses.map(r =>\n      HostAddress.fromString(`${r.name}:${r.port ?? 27017}`)\n    );\n\n    const lbError = validateLoadBalancedOptions(hostAddresses, options, true);\n    if (lbError) {\n      return callback(lbError);\n    }\n\n    // Resolve TXT record and add options from there if they exist.\n    dns.resolveTxt(lookupAddress, (err, record) => {\n      if (err) {\n        if (err.code !== 'ENODATA' && err.code !== 'ENOTFOUND') {\n          return callback(err);\n        }\n      } else {\n        if (record.length > 1) {\n          return callback(new MongoParseError('Multiple text records not allowed'));\n        }\n\n        const txtRecordOptions = new URLSearchParams(record[0].join(''));\n        const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n        if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n          return callback(\n            new MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`)\n          );\n        }\n\n        if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n          return callback(new MongoParseError('Cannot have empty URI params in DNS TXT Record'));\n        }\n\n        const source = txtRecordOptions.get('authSource') ?? undefined;\n        const replicaSet = txtRecordOptions.get('replicaSet') ?? undefined;\n        const loadBalanced = txtRecordOptions.get('loadBalanced') ?? undefined;\n\n        if (\n          !options.userSpecifiedAuthSource &&\n          source &&\n          options.credentials &&\n          !AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)\n        ) {\n          options.credentials = MongoCredentials.merge(options.credentials, { source });\n        }\n\n        if (!options.userSpecifiedReplicaSet && replicaSet) {\n          options.replicaSet = replicaSet;\n        }\n\n        if (loadBalanced === 'true') {\n          options.loadBalanced = true;\n        }\n\n        if (options.replicaSet && options.srvMaxHosts > 0) {\n          return callback(new MongoParseError('Cannot combine replicaSet option with srvMaxHosts'));\n        }\n\n        const lbError = validateLoadBalancedOptions(hostAddresses, options, true);\n        if (lbError) {\n          return callback(lbError);\n        }\n      }\n\n      callback(undefined, hostAddresses);\n    });\n  });\n}\n\n/**\n * Checks if TLS options are valid\n *\n * @param options - The options used for options parsing\n * @throws MongoParseError if TLS options are invalid\n */\nexport function checkTLSOptions(options: AnyOptions): void {\n  if (!options) return;\n  const check = (a: string, b: string) => {\n    if (Reflect.has(options, a) && Reflect.has(options, b)) {\n      throw new MongoParseError(`The '${a}' option cannot be used with '${b}'`);\n    }\n  };\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\n\nconst TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nconst FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\nfunction getBoolean(name: string, value: unknown): boolean {\n  if (typeof value === 'boolean') return value;\n  const valueString = String(value).toLowerCase();\n  if (TRUTHS.has(valueString)) {\n    if (valueString !== 'true') {\n      emitWarningOnce(\n        `deprecated value for ${name} : ${valueString} - please update to ${name} : true instead`\n      );\n    }\n    return true;\n  }\n  if (FALSEHOODS.has(valueString)) {\n    if (valueString !== 'false') {\n      emitWarningOnce(\n        `deprecated value for ${name} : ${valueString} - please update to ${name} : false instead`\n      );\n    }\n    return false;\n  }\n  throw new MongoParseError(`Expected ${name} to be stringified boolean value, got: ${value}`);\n}\n\nfunction getInt(name: string, value: unknown): number {\n  if (typeof value === 'number') return Math.trunc(value);\n  const parsedValue = Number.parseInt(String(value), 10);\n  if (!Number.isNaN(parsedValue)) return parsedValue;\n  throw new MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\n\nfunction getUint(name: string, value: unknown): number {\n  const parsedValue = getInt(name, value);\n  if (parsedValue < 0) {\n    throw new MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n  }\n  return parsedValue;\n}\n\nfunction* entriesFromString(value: string): Generator<[string, string]> {\n  const keyValuePairs = value.split(',');\n  for (const keyValue of keyValuePairs) {\n    const [key, value] = keyValue.split(':');\n    if (value == null) {\n      throw new MongoParseError('Cannot have undefined values in key value pairs');\n    }\n\n    yield [key, value];\n  }\n}\n\nclass CaseInsensitiveMap<Value = any> extends Map<string, Value> {\n  constructor(entries: Array<[string, any]> = []) {\n    super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n  }\n  override has(k: string) {\n    return super.has(k.toLowerCase());\n  }\n  override get(k: string) {\n    return super.get(k.toLowerCase());\n  }\n  override set(k: string, v: any) {\n    return super.set(k.toLowerCase(), v);\n  }\n  override delete(k: string): boolean {\n    return super.delete(k.toLowerCase());\n  }\n}\n\nexport function parseOptions(\n  uri: string,\n  mongoClient: MongoClient | MongoClientOptions | undefined = undefined,\n  options: MongoClientOptions = {}\n): MongoOptions {\n  if (mongoClient != null && !(mongoClient instanceof MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n\n  const url = new ConnectionString(uri);\n  const { hosts, isSRV } = url;\n\n  const mongoOptions = Object.create(null);\n\n  // Feature flags\n  for (const flag of Object.getOwnPropertySymbols(options)) {\n    if (FEATURE_FLAGS.has(flag)) {\n      mongoOptions[flag] = options[flag];\n    }\n  }\n\n  mongoOptions.hosts = isSRV ? [] : hosts.map(HostAddress.fromString);\n\n  const urlOptions = new CaseInsensitiveMap<any[]>();\n\n  if (url.pathname !== '/' && url.pathname !== '') {\n    const dbName = decodeURIComponent(\n      url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname\n    );\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n\n  if (url.username !== '') {\n    const auth: Document = {\n      username: decodeURIComponent(url.username)\n    };\n\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n\n    urlOptions.set('auth', [auth]);\n  }\n\n  for (const key of url.searchParams.keys()) {\n    const values = [...url.searchParams.getAll(key)];\n\n    if (values.includes('')) {\n      throw new MongoAPIError('URI cannot contain options with no value');\n    }\n\n    if (!urlOptions.has(key)) {\n      urlOptions.set(key, values);\n    }\n  }\n\n  const objectOptions = new CaseInsensitiveMap(\n    Object.entries(options).filter(([, v]) => v != null)\n  );\n\n  // Validate options that can only be provided by one of uri or object\n\n  if (urlOptions.has('serverApi')) {\n    throw new MongoParseError(\n      'URI cannot contain `serverApi`, it can only be passed to the client'\n    );\n  }\n\n  if (objectOptions.has('loadBalanced')) {\n    throw new MongoParseError('loadBalanced is only a valid option in the URI');\n  }\n\n  // All option collection\n\n  const allOptions = new CaseInsensitiveMap();\n\n  const allKeys = new Set<string>([\n    ...urlOptions.keys(),\n    ...objectOptions.keys(),\n    ...DEFAULT_OPTIONS.keys()\n  ]);\n\n  for (const key of allKeys) {\n    const values = [];\n    const objectOptionValue = objectOptions.get(key);\n    if (objectOptionValue != null) {\n      values.push(objectOptionValue);\n    }\n    const urlValue = urlOptions.get(key);\n    if (urlValue != null) {\n      values.push(...urlValue);\n    }\n    const defaultOptionsValue = DEFAULT_OPTIONS.get(key);\n    if (defaultOptionsValue != null) {\n      values.push(defaultOptionsValue);\n    }\n    allOptions.set(key, values);\n  }\n\n  if (allOptions.has('tlsCertificateKeyFile') && !allOptions.has('tlsCertificateFile')) {\n    allOptions.set('tlsCertificateFile', allOptions.get('tlsCertificateKeyFile'));\n  }\n\n  if (allOptions.has('tls') || allOptions.has('ssl')) {\n    const tlsAndSslOpts = (allOptions.get('tls') || [])\n      .concat(allOptions.get('ssl') || [])\n      .map(getBoolean.bind(null, 'tls/ssl'));\n    if (new Set(tlsAndSslOpts).size !== 1) {\n      throw new MongoParseError('All values of tls/ssl must be the same.');\n    }\n  }\n\n  const unsupportedOptions = setDifference(\n    allKeys,\n    Array.from(Object.keys(OPTIONS)).map(s => s.toLowerCase())\n  );\n  if (unsupportedOptions.size !== 0) {\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new MongoParseError(\n      `${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`\n    );\n  }\n\n  // Option parsing and setting\n\n  for (const [key, descriptor] of Object.entries(OPTIONS)) {\n    const values = allOptions.get(key);\n    if (!values || values.length === 0) continue;\n    setOption(mongoOptions, key, descriptor, values);\n  }\n\n  if (mongoOptions.credentials) {\n    const isGssapi = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_GSSAPI;\n    const isX509 = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_X509;\n    const isAws = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_AWS;\n    if (\n      (isGssapi || isX509) &&\n      allOptions.has('authSource') &&\n      mongoOptions.credentials.source !== '$external'\n    ) {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new MongoParseError(\n        `${mongoOptions.credentials} can only have authSource set to '$external'`\n      );\n    }\n\n    if (!(isGssapi || isX509 || isAws) && mongoOptions.dbName && !allOptions.has('authSource')) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n\n    mongoOptions.credentials.validate();\n\n    // Check if the only auth related option provided was authSource, if so we can remove credentials\n    if (\n      mongoOptions.credentials.password === '' &&\n      mongoOptions.credentials.username === '' &&\n      mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_DEFAULT &&\n      Object.keys(mongoOptions.credentials.mechanismProperties).length === 0\n    ) {\n      delete mongoOptions.credentials;\n    }\n  }\n\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n\n  checkTLSOptions(mongoOptions);\n\n  if (options.promiseLibrary) PromiseProvider.set(options.promiseLibrary);\n\n  const lbError = validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n  if (lbError) {\n    throw lbError;\n  }\n  if (mongoClient && mongoOptions.autoEncryption) {\n    Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  }\n\n  // Potential SRV Overrides and SRV connection string validations\n\n  mongoOptions.userSpecifiedAuthSource =\n    objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet =\n    objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n\n    if (mongoOptions.directConnection) {\n      throw new MongoAPIError('SRV URI does not support directConnection');\n    }\n\n    if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n      throw new MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n    }\n\n    // SRV turns on TLS by default, but users can override and turn it off\n    const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n    const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n    if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n      mongoOptions.tls = true;\n    }\n  } else {\n    const userSpecifiedSrvOptions =\n      urlOptions.has('srvMaxHosts') ||\n      objectOptions.has('srvMaxHosts') ||\n      urlOptions.has('srvServiceName') ||\n      objectOptions.has('srvServiceName');\n\n    if (userSpecifiedSrvOptions) {\n      throw new MongoParseError(\n        'Cannot use srvMaxHosts or srvServiceName with a non-srv connection string'\n      );\n    }\n  }\n\n  if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n    throw new MongoParseError('directConnection option requires exactly one host');\n  }\n\n  if (\n    !mongoOptions.proxyHost &&\n    (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)\n  ) {\n    throw new MongoParseError('Must specify proxyHost if other proxy options are passed');\n  }\n\n  if (\n    (mongoOptions.proxyUsername && !mongoOptions.proxyPassword) ||\n    (!mongoOptions.proxyUsername && mongoOptions.proxyPassword)\n  ) {\n    throw new MongoParseError('Can only specify both of proxy username/password or neither');\n  }\n\n  const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(\n    key => urlOptions.get(key) ?? []\n  );\n\n  if (proxyOptions.some(options => options.length > 1)) {\n    throw new MongoParseError(\n      'Proxy options cannot be specified multiple times in the connection string'\n    );\n  }\n\n  return mongoOptions;\n}\n\nfunction validateLoadBalancedOptions(\n  hosts: HostAddress[] | string[],\n  mongoOptions: MongoOptions,\n  isSrv: boolean\n): MongoParseError | undefined {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      return new MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n    if (mongoOptions.replicaSet) {\n      return new MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n    if (mongoOptions.directConnection) {\n      return new MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n\n    if (isSrv && mongoOptions.srvMaxHosts > 0) {\n      return new MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n    }\n  }\n  return;\n}\n\nfunction setOption(\n  mongoOptions: any,\n  key: string,\n  descriptor: OptionDescriptor,\n  values: unknown[]\n) {\n  const { target, type, transform, deprecated } = descriptor;\n  const name = target ?? key;\n\n  if (deprecated) {\n    const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n    emitWarning(`${key} is a deprecated option${deprecatedMsg}`);\n  }\n\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n    case 'int':\n      mongoOptions[name] = getInt(name, values[0]);\n      break;\n    case 'uint':\n      mongoOptions[name] = getUint(name, values[0]);\n      break;\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n      mongoOptions[name] = String(values[0]);\n      break;\n    case 'record':\n      if (!isRecord(values[0])) {\n        throw new MongoParseError(`${name} must be an object`);\n      }\n      mongoOptions[name] = values[0];\n      break;\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n    default: {\n      if (!transform) {\n        throw new MongoParseError('Descriptors missing a type must define a transform');\n      }\n      const transformValue = transform({ name, options: mongoOptions, values });\n      mongoOptions[name] = transformValue;\n      break;\n    }\n  }\n}\n\ninterface OptionDescriptor {\n  target?: string;\n  type?: 'boolean' | 'int' | 'uint' | 'record' | 'string' | 'any';\n  default?: any;\n\n  deprecated?: boolean | string;\n  /**\n   * @param name - the original option name\n   * @param options - the options so far for resolution\n   * @param values - the possible values in precedence order\n   */\n  transform?: (args: { name: string; options: MongoOptions; values: unknown[] }) => unknown;\n}\n\nexport const OPTIONS = {\n  appName: {\n    target: 'metadata',\n    transform({ options, values: [value] }): DriverInfo {\n      return makeClientMetadata({ ...options.driverInfo, appName: String(value) });\n    }\n  },\n  auth: {\n    target: 'credentials',\n    transform({ name, options, values: [value] }): MongoCredentials {\n      if (!isRecord(value, ['username', 'password'] as const)) {\n        throw new MongoParseError(\n          `${name} must be an object with 'username' and 'password' properties`\n        );\n      }\n      return MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n  },\n  authMechanism: {\n    target: 'credentials',\n    transform({ options, values: [value] }): MongoCredentials {\n      const mechanisms = Object.values(AuthMechanism);\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\n      if (!mechanism) {\n        throw new MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n      }\n      let source = options.credentials?.source;\n      if (\n        mechanism === AuthMechanism.MONGODB_PLAIN ||\n        AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)\n      ) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n\n      let password = options.credentials?.password;\n      if (mechanism === AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n      return MongoCredentials.merge(options.credentials, {\n        mechanism,\n        source,\n        password\n      });\n    }\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n    transform({ options, values: [optionValue] }): MongoCredentials {\n      if (typeof optionValue === 'string') {\n        const mechanismProperties = Object.create(null);\n\n        for (const [key, value] of entriesFromString(optionValue)) {\n          try {\n            mechanismProperties[key] = getBoolean(key, value);\n          } catch {\n            mechanismProperties[key] = value;\n          }\n        }\n\n        return MongoCredentials.merge(options.credentials, {\n          mechanismProperties\n        });\n      }\n      if (!isRecord(optionValue)) {\n        throw new MongoParseError('AuthMechanismProperties must be an object');\n      }\n      return MongoCredentials.merge(options.credentials, { mechanismProperties: optionValue });\n    }\n  },\n  authSource: {\n    target: 'credentials',\n    transform({ options, values: [value] }): MongoCredentials {\n      const source = String(value);\n      return MongoCredentials.merge(options.credentials, { source });\n    }\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n    transform({ values: [version] }): ServerApi {\n      const serverApiToValidate =\n        typeof version === 'string' ? ({ version } as ServerApi) : (version as ServerApi);\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n      if (!versionToValidate) {\n        throw new MongoParseError(\n          `Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(\n            ServerApiVersion\n          ).join('\", \"')}\"]`\n        );\n      }\n      if (!Object.values(ServerApiVersion).some(v => v === versionToValidate)) {\n        throw new MongoParseError(\n          `Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(\n            ServerApiVersion\n          ).join('\", \"')}\"]`\n        );\n      }\n      return serverApiToValidate;\n    }\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n    transform({ values }) {\n      const compressionList = new Set();\n      for (const compVal of values as (CompressorName[] | string)[]) {\n        const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n        if (!Array.isArray(compValArray)) {\n          throw new MongoInvalidArgumentError(\n            'compressors must be an array or a comma-delimited list of strings'\n          );\n        }\n        for (const c of compValArray) {\n          if (Object.keys(Compressor).includes(String(c))) {\n            compressionList.add(String(c));\n          } else {\n            throw new MongoInvalidArgumentError(\n              `${c} is not a valid compression mechanism. Must be one of: ${Object.keys(\n                Compressor\n              )}.`\n            );\n          }\n        }\n      }\n      return [...compressionList];\n    }\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    target: 'metadata',\n    default: makeClientMetadata(),\n    transform({ options, values: [value] }) {\n      if (!isRecord(value)) throw new MongoParseError('DriverInfo must be an object');\n      return makeClientMetadata({\n        driverInfo: value,\n        appName: options.metadata?.application?.name\n      });\n    }\n  },\n  enableUtf8Validation: { type: 'boolean', default: true },\n  family: {\n    transform({ name, values: [value] }): 4 | 6 {\n      const transformValue = getInt(name, value);\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n      throw new MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n    }\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          fsync: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n      return wc;\n    }\n  } as OptionDescriptor,\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  } as OptionDescriptor,\n  journal: {\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  keepAlive: {\n    default: true,\n    type: 'boolean'\n  },\n  keepAliveInitialDelay: {\n    default: 120000,\n    type: 'uint'\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  logger: {\n    default: new Logger('MongoClient'),\n    transform({ values: [value] }) {\n      if (value instanceof Logger) {\n        return value;\n      }\n      emitWarning('Alternative loggers might not be supported');\n      // TODO: make Logger an interface that others can implement, make usage consistent in driver\n      // DRIVERS-1204\n      return;\n    }\n  },\n  loggerLevel: {\n    target: 'logger',\n    transform({ values: [value] }) {\n      return new Logger('MongoClient', { loggerLevel: value as LoggerLevel });\n    }\n  },\n  maxConnecting: {\n    default: 2,\n    transform({ name, values: [value] }): number {\n      const maxConnecting = getUint(name, value);\n      if (maxConnecting === 0) {\n        throw new MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n      }\n      return maxConnecting;\n    }\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n    transform({ name, options, values: [value] }) {\n      const maxStalenessSeconds = getUint(name, value);\n      if (options.readPreference) {\n        return ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, maxStalenessSeconds }\n        });\n      } else {\n        return new ReadPreference('secondary', undefined, { maxStalenessSeconds });\n      }\n    }\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n    transform({ values: [value], options }) {\n      return { ...options.driverInfo, name: String(value) };\n    }\n  } as OptionDescriptor,\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: DEFAULT_PK_FACTORY,\n    transform({ values: [value] }): PkFactory {\n      if (isRecord(value, ['createPk'] as const) && typeof value.createPk === 'function') {\n        return value as PkFactory;\n      }\n      throw new MongoParseError(\n        `Option pkFactory must be an object with a createPk function, got ${value}`\n      );\n    }\n  },\n  promiseLibrary: {\n    deprecated: true,\n    type: 'any'\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  proxyHost: {\n    type: 'string'\n  },\n  proxyPassword: {\n    type: 'string'\n  },\n  proxyPort: {\n    type: 'uint'\n  },\n  proxyUsername: {\n    type: 'string'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform({ values: [value], options }) {\n      if (value instanceof ReadConcern || isRecord(value, ['level'] as const)) {\n        return ReadConcern.fromOptions({ ...options.readConcern, ...value } as any);\n      }\n      throw new MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n    }\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n    transform({ values: [level], options }) {\n      return ReadConcern.fromOptions({\n        ...options.readConcern,\n        level: level as ReadConcernLevel\n      });\n    }\n  },\n  readPreference: {\n    default: ReadPreference.primary,\n    transform({ values: [value], options }) {\n      if (value instanceof ReadPreference) {\n        return ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, ...value },\n          ...value\n        } as any);\n      }\n      if (isRecord(value, ['mode'] as const)) {\n        const rp = ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, ...value },\n          ...value\n        } as any);\n        if (rp) return rp;\n        else throw new MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n      }\n      if (typeof value === 'string') {\n        const rpOpts = {\n          hedge: options.readPreference?.hedge,\n          maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n        };\n        return new ReadPreference(\n          value as ReadPreferenceMode,\n          options.readPreference?.tags,\n          rpOpts\n        );\n      }\n      throw new MongoParseError(`Unknown ReadPreference value: ${value}`);\n    }\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n    transform({\n      values,\n      options\n    }: {\n      values: Array<string | Record<string, string>[]>;\n      options: MongoClientOptions;\n    }) {\n      const tags: Array<string | Record<string, string>> = Array.isArray(values[0])\n        ? values[0]\n        : (values as Array<string>);\n      const readPreferenceTags = [];\n      for (const tag of tags) {\n        const readPreferenceTag: TagSet = Object.create(null);\n        if (typeof tag === 'string') {\n          for (const [k, v] of entriesFromString(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        if (isRecord(tag)) {\n          for (const [k, v] of Object.entries(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        readPreferenceTags.push(readPreferenceTag);\n      }\n      return ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags\n      });\n    }\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  srvMaxHosts: {\n    type: 'uint',\n    default: 0\n  },\n  srvServiceName: {\n    type: 'string',\n    default: 'mongodb'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  sslCA: {\n    target: 'ca',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslCRL: {\n    target: 'crl',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslCert: {\n    target: 'cert',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslKey: {\n    target: 'key',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslPass: {\n    deprecated: true,\n    target: 'passphrase',\n    type: 'string'\n  },\n  sslValidate: {\n    target: 'rejectUnauthorized',\n    type: 'boolean'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n    transform({ name, values: [value] }) {\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n    transform({ name, values: [value] }) {\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? () => undefined : undefined;\n    }\n  },\n  tlsCAFile: {\n    target: 'ca',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  tlsCertificateFile: {\n    target: 'cert',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  tlsCertificateKeyFile: {\n    target: 'key',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform({ name, options, values: [value] }) {\n      const tlsInsecure = getBoolean(name, value);\n      if (tlsInsecure) {\n        options.checkServerIdentity = () => undefined;\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames\n          ? () => undefined\n          : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n      return tlsInsecure;\n    }\n  },\n  w: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      return WriteConcern.fromOptions({ writeConcern: { ...options.writeConcern, w: value as W } });\n    }\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      if (isRecord(value) || value instanceof WriteConcern) {\n        return WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            ...value\n          }\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            w: value\n          }\n        });\n      }\n\n      throw new MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n    }\n  } as OptionDescriptor,\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeout: getUint('wtimeout', value)\n        }\n      });\n      if (wc) return wc;\n      throw new MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  } as OptionDescriptor,\n  wtimeoutMS: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeoutMS: getUint('wtimeoutMS', value)\n        }\n      });\n      if (wc) return wc;\n      throw new MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: { type: 'any' },\n  srvPoller: { type: 'any' },\n  // Accepted NodeJS Options\n  minDHSize: { type: 'any' },\n  pskCallback: { type: 'any' },\n  secureContext: { type: 'any' },\n  enableTrace: { type: 'any' },\n  requestCert: { type: 'any' },\n  rejectUnauthorized: { type: 'any' },\n  checkServerIdentity: { type: 'any' },\n  ALPNProtocols: { type: 'any' },\n  SNICallback: { type: 'any' },\n  session: { type: 'any' },\n  requestOCSP: { type: 'any' },\n  localAddress: { type: 'any' },\n  localPort: { type: 'any' },\n  hints: { type: 'any' },\n  lookup: { type: 'any' },\n  ca: { type: 'any' },\n  cert: { type: 'any' },\n  ciphers: { type: 'any' },\n  crl: { type: 'any' },\n  ecdhCurve: { type: 'any' },\n  key: { type: 'any' },\n  passphrase: { type: 'any' },\n  pfx: { type: 'any' },\n  secureProtocol: { type: 'any' },\n  index: { type: 'any' },\n  // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n  useNewUrlParser: { type: 'boolean' } as OptionDescriptor,\n  useUnifiedTopology: { type: 'boolean' } as OptionDescriptor\n} as Record<keyof MongoClientOptions, OptionDescriptor>;\n\nexport const DEFAULT_OPTIONS = new CaseInsensitiveMap(\n  Object.entries(OPTIONS)\n    .filter(([, descriptor]) => descriptor.default != null)\n    .map(([k, d]) => [k, d.default])\n);\n\n/**\n * Set of permitted feature flags\n * @internal\n */\nexport const FEATURE_FLAGS = new Set([Symbol.for('@@mdb.skipPingOnConnect')]);\n"]},"metadata":{},"sourceType":"script"}