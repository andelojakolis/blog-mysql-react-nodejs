{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.executeOperation = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst read_preference_1 = require(\"../read_preference\");\n\nconst server_selection_1 = require(\"../sdam/server_selection\");\n\nconst utils_1 = require(\"../utils\");\n\nconst operation_1 = require(\"./operation\");\n\nconst MMAPv1_RETRY_WRITES_ERROR_CODE = error_1.MONGODB_ERROR_CODES.IllegalOperation;\nconst MMAPv1_RETRY_WRITES_ERROR_MESSAGE = 'This MongoDB deployment does not support retryable writes. Please add retryWrites=false to your connection string.';\n\nfunction executeOperation(client, operation, callback) {\n  if (!(operation instanceof operation_1.AbstractOperation)) {\n    // TODO(NODE-3483): Extend MongoRuntimeError\n    throw new error_1.MongoRuntimeError('This method requires a valid operation instance');\n  }\n\n  return (0, utils_1.maybePromise)(callback, callback => {\n    const topology = client.topology;\n\n    if (topology == null) {\n      if (client.s.hasBeenClosed) {\n        return callback(new error_1.MongoNotConnectedError('Client must be connected before running operations'));\n      }\n\n      client.s.options[Symbol.for('@@mdb.skipPingOnConnect')] = true;\n      return client.connect(error => {\n        delete client.s.options[Symbol.for('@@mdb.skipPingOnConnect')];\n\n        if (error) {\n          return callback(error);\n        }\n\n        return executeOperation(client, operation, callback);\n      });\n    }\n\n    if (topology.shouldCheckForSessionSupport()) {\n      return topology.selectServer(read_preference_1.ReadPreference.primaryPreferred, {}, err => {\n        if (err) return callback(err);\n        executeOperation(client, operation, callback);\n      });\n    } // The driver sessions spec mandates that we implicitly create sessions for operations\n    // that are not explicitly provided with a session.\n\n\n    let session = operation.session;\n    let owner;\n\n    if (topology.hasSessionSupport()) {\n      if (session == null) {\n        owner = Symbol();\n        session = client.startSession({\n          owner,\n          explicit: false\n        });\n      } else if (session.hasEnded) {\n        return callback(new error_1.MongoExpiredSessionError('Use of expired sessions is not permitted'));\n      } else if (session.snapshotEnabled && !topology.capabilities.supportsSnapshotReads) {\n        return callback(new error_1.MongoCompatibilityError('Snapshot reads require MongoDB 5.0 or later'));\n      }\n    } else {\n      // no session support\n      if (session && session.explicit) {\n        // If the user passed an explicit session and we are still, after server selection,\n        // trying to run against a topology that doesn't support sessions we error out.\n        return callback(new error_1.MongoCompatibilityError('Current topology does not support sessions'));\n      } else if (session && !session.explicit) {\n        // We do not have to worry about ending the session because the server session has not been acquired yet\n        delete operation.options.session;\n        operation.clearSession();\n        session = undefined;\n      }\n    }\n\n    try {\n      executeWithServerSelection(topology, session, operation, (error, result) => {\n        if ((session === null || session === void 0 ? void 0 : session.owner) != null && session.owner === owner) {\n          return session.endSession(endSessionError => callback(endSessionError !== null && endSessionError !== void 0 ? endSessionError : error, result));\n        }\n\n        callback(error, result);\n      });\n    } catch (error) {\n      if ((session === null || session === void 0 ? void 0 : session.owner) != null && session.owner === owner) {\n        session.endSession().catch(() => null);\n      }\n\n      throw error;\n    }\n  });\n}\n\nexports.executeOperation = executeOperation;\n\nfunction executeWithServerSelection(topology, session, operation, callback) {\n  var _a, _b;\n\n  const readPreference = (_a = operation.readPreference) !== null && _a !== void 0 ? _a : read_preference_1.ReadPreference.primary;\n  const inTransaction = !!(session === null || session === void 0 ? void 0 : session.inTransaction());\n\n  if (inTransaction && !readPreference.equals(read_preference_1.ReadPreference.primary)) {\n    return callback(new error_1.MongoTransactionError(`Read preference in a transaction must be primary, not: ${readPreference.mode}`));\n  }\n\n  if ((session === null || session === void 0 ? void 0 : session.isPinned) && session.transaction.isCommitted && !operation.bypassPinningCheck) {\n    session.unpin();\n  }\n\n  let selector;\n\n  if (operation.hasAspect(operation_1.Aspect.MUST_SELECT_SAME_SERVER)) {\n    // GetMore and KillCursor operations must always select the same server, but run through\n    // server selection to potentially force monitor checks if the server is\n    // in an unknown state.\n    selector = (0, server_selection_1.sameServerSelector)((_b = operation.server) === null || _b === void 0 ? void 0 : _b.description);\n  } else if (operation.trySecondaryWrite) {\n    // If operation should try to write to secondary use the custom server selector\n    // otherwise provide the read preference.\n    selector = (0, server_selection_1.secondaryWritableServerSelector)(topology.commonWireVersion, readPreference);\n  } else {\n    selector = readPreference;\n  }\n\n  const serverSelectionOptions = {\n    session\n  };\n\n  function retryOperation(originalError) {\n    const isWriteOperation = operation.hasAspect(operation_1.Aspect.WRITE_OPERATION);\n    const isReadOperation = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n\n    if (isWriteOperation && originalError.code === MMAPv1_RETRY_WRITES_ERROR_CODE) {\n      return callback(new error_1.MongoServerError({\n        message: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n        errmsg: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n        originalError\n      }));\n    }\n\n    if (isWriteOperation && !(0, error_1.isRetryableWriteError)(originalError)) {\n      return callback(originalError);\n    }\n\n    if (isReadOperation && !(0, error_1.isRetryableReadError)(originalError)) {\n      return callback(originalError);\n    }\n\n    if (originalError instanceof error_1.MongoNetworkError && (session === null || session === void 0 ? void 0 : session.isPinned) && !session.inTransaction() && operation.hasAspect(operation_1.Aspect.CURSOR_CREATING)) {\n      // If we have a cursor and the initial command fails with a network error,\n      // we can retry it on another connection. So we need to check it back in, clear the\n      // pool for the service id, and retry again.\n      session.unpin({\n        force: true,\n        forceClear: true\n      });\n    } // select a new server, and attempt to retry the operation\n\n\n    topology.selectServer(selector, serverSelectionOptions, (error, server) => {\n      if (!error && isWriteOperation && !(0, utils_1.supportsRetryableWrites)(server)) {\n        return callback(new error_1.MongoUnexpectedServerResponseError('Selected server does not support retryable writes'));\n      }\n\n      if (error || !server) {\n        return callback(error !== null && error !== void 0 ? error : new error_1.MongoUnexpectedServerResponseError('Server selection failed without error'));\n      }\n\n      operation.execute(server, session, callback);\n    });\n  }\n\n  if (readPreference && !readPreference.equals(read_preference_1.ReadPreference.primary) && (session === null || session === void 0 ? void 0 : session.inTransaction())) {\n    callback(new error_1.MongoTransactionError(`Read preference in a transaction must be primary, not: ${readPreference.mode}`));\n    return;\n  } // select a server, and execute the operation against it\n\n\n  topology.selectServer(selector, serverSelectionOptions, (error, server) => {\n    if (error || !server) {\n      return callback(error);\n    }\n\n    if (session && operation.hasAspect(operation_1.Aspect.RETRYABLE)) {\n      const willRetryRead = topology.s.options.retryReads && !inTransaction && operation.canRetryRead;\n      const willRetryWrite = topology.s.options.retryWrites && !inTransaction && (0, utils_1.supportsRetryableWrites)(server) && operation.canRetryWrite;\n      const hasReadAspect = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n      const hasWriteAspect = operation.hasAspect(operation_1.Aspect.WRITE_OPERATION);\n\n      if (hasReadAspect && willRetryRead || hasWriteAspect && willRetryWrite) {\n        if (hasWriteAspect && willRetryWrite) {\n          operation.options.willRetryWrite = true;\n          session.incrementTransactionNumber();\n        }\n\n        return operation.execute(server, session, (error, result) => {\n          if (error instanceof error_1.MongoError) {\n            return retryOperation(error);\n          } else if (error) {\n            return callback(error);\n          }\n\n          callback(undefined, result);\n        });\n      }\n    }\n\n    return operation.execute(server, session, callback);\n  });\n}","map":{"version":3,"mappings":"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","names":["MMAPv1_RETRY_WRITES_ERROR_CODE","error_1","IllegalOperation","MMAPv1_RETRY_WRITES_ERROR_MESSAGE","executeOperation","client","operation","callback","operation_1","topology","s","hasBeenClosed","options","Symbol","for","connect","error","shouldCheckForSessionSupport","selectServer","read_preference_1","primaryPreferred","err","session","owner","hasSessionSupport","startSession","explicit","hasEnded","snapshotEnabled","capabilities","supportsSnapshotReads","clearSession","undefined","executeWithServerSelection","result","endSession","endSessionError","catch","exports","readPreference","_a","primary","inTransaction","equals","mode","isPinned","transaction","isCommitted","bypassPinningCheck","unpin","selector","hasAspect","MUST_SELECT_SAME_SERVER","server","_b","description","trySecondaryWrite","commonWireVersion","serverSelectionOptions","retryOperation","originalError","isWriteOperation","WRITE_OPERATION","isReadOperation","READ_OPERATION","code","message","errmsg","CURSOR_CREATING","force","forceClear","execute","RETRYABLE","willRetryRead","retryReads","canRetryRead","willRetryWrite","retryWrites","canRetryWrite","hasReadAspect","hasWriteAspect","incrementTransactionNumber"],"sources":["C:\\Users\\Anđelo\\node_modules\\mongodb\\src\\operations\\execute_operation.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport {\n  isRetryableReadError,\n  isRetryableWriteError,\n  MongoCompatibilityError,\n  MONGODB_ERROR_CODES,\n  MongoError,\n  MongoExpiredSessionError,\n  MongoNetworkError,\n  MongoNotConnectedError,\n  MongoRuntimeError,\n  MongoServerError,\n  MongoTransactionError,\n  MongoUnexpectedServerResponseError\n} from '../error';\nimport type { MongoClient } from '../mongo_client';\nimport { ReadPreference } from '../read_preference';\nimport type { Server } from '../sdam/server';\nimport {\n  sameServerSelector,\n  secondaryWritableServerSelector,\n  ServerSelector\n} from '../sdam/server_selection';\nimport type { Topology } from '../sdam/topology';\nimport type { ClientSession } from '../sessions';\nimport { Callback, maybePromise, supportsRetryableWrites } from '../utils';\nimport { AbstractOperation, Aspect } from './operation';\n\nconst MMAPv1_RETRY_WRITES_ERROR_CODE = MONGODB_ERROR_CODES.IllegalOperation;\nconst MMAPv1_RETRY_WRITES_ERROR_MESSAGE =\n  'This MongoDB deployment does not support retryable writes. Please add retryWrites=false to your connection string.';\n\ntype ResultTypeFromOperation<TOperation> = TOperation extends AbstractOperation<infer K>\n  ? K\n  : never;\n\n/** @internal */\nexport interface ExecutionResult {\n  /** The server selected for the operation */\n  server: Server;\n  /** The session used for this operation, may be implicitly created */\n  session?: ClientSession;\n  /** The raw server response for the operation */\n  response: Document;\n}\n\n/**\n * Executes the given operation with provided arguments.\n * @internal\n *\n * @remarks\n * This method reduces large amounts of duplication in the entire codebase by providing\n * a single point for determining whether callbacks or promises should be used. Additionally\n * it allows for a single point of entry to provide features such as implicit sessions, which\n * are required by the Driver Sessions specification in the event that a ClientSession is\n * not provided\n *\n * @param topology - The topology to execute this operation on\n * @param operation - The operation to execute\n * @param callback - The command result callback\n */\nexport function executeOperation<\n  T extends AbstractOperation<TResult>,\n  TResult = ResultTypeFromOperation<T>\n>(client: MongoClient, operation: T): Promise<TResult>;\nexport function executeOperation<\n  T extends AbstractOperation<TResult>,\n  TResult = ResultTypeFromOperation<T>\n>(client: MongoClient, operation: T, callback: Callback<TResult>): void;\nexport function executeOperation<\n  T extends AbstractOperation<TResult>,\n  TResult = ResultTypeFromOperation<T>\n>(client: MongoClient, operation: T, callback?: Callback<TResult>): Promise<TResult> | void;\nexport function executeOperation<\n  T extends AbstractOperation<TResult>,\n  TResult = ResultTypeFromOperation<T>\n>(client: MongoClient, operation: T, callback?: Callback<TResult>): Promise<TResult> | void {\n  if (!(operation instanceof AbstractOperation)) {\n    // TODO(NODE-3483): Extend MongoRuntimeError\n    throw new MongoRuntimeError('This method requires a valid operation instance');\n  }\n\n  return maybePromise(callback, callback => {\n    const topology = client.topology;\n\n    if (topology == null) {\n      if (client.s.hasBeenClosed) {\n        return callback(\n          new MongoNotConnectedError('Client must be connected before running operations')\n        );\n      }\n      client.s.options[Symbol.for('@@mdb.skipPingOnConnect')] = true;\n      return client.connect(error => {\n        delete client.s.options[Symbol.for('@@mdb.skipPingOnConnect')];\n        if (error) {\n          return callback(error);\n        }\n        return executeOperation<T, TResult>(client, operation, callback);\n      });\n    }\n\n    if (topology.shouldCheckForSessionSupport()) {\n      return topology.selectServer(ReadPreference.primaryPreferred, {}, err => {\n        if (err) return callback(err);\n\n        executeOperation<T, TResult>(client, operation, callback);\n      });\n    }\n\n    // The driver sessions spec mandates that we implicitly create sessions for operations\n    // that are not explicitly provided with a session.\n    let session = operation.session;\n    let owner: symbol | undefined;\n    if (topology.hasSessionSupport()) {\n      if (session == null) {\n        owner = Symbol();\n        session = client.startSession({ owner, explicit: false });\n      } else if (session.hasEnded) {\n        return callback(new MongoExpiredSessionError('Use of expired sessions is not permitted'));\n      } else if (session.snapshotEnabled && !topology.capabilities.supportsSnapshotReads) {\n        return callback(new MongoCompatibilityError('Snapshot reads require MongoDB 5.0 or later'));\n      }\n    } else {\n      // no session support\n      if (session && session.explicit) {\n        // If the user passed an explicit session and we are still, after server selection,\n        // trying to run against a topology that doesn't support sessions we error out.\n        return callback(new MongoCompatibilityError('Current topology does not support sessions'));\n      } else if (session && !session.explicit) {\n        // We do not have to worry about ending the session because the server session has not been acquired yet\n        delete operation.options.session;\n        operation.clearSession();\n        session = undefined;\n      }\n    }\n\n    try {\n      executeWithServerSelection<TResult>(topology, session, operation, (error, result) => {\n        if (session?.owner != null && session.owner === owner) {\n          return session.endSession(endSessionError => callback(endSessionError ?? error, result));\n        }\n\n        callback(error, result);\n      });\n    } catch (error) {\n      if (session?.owner != null && session.owner === owner) {\n        session.endSession().catch(() => null);\n      }\n\n      throw error;\n    }\n  });\n}\n\nfunction executeWithServerSelection<TResult>(\n  topology: Topology,\n  session: ClientSession | undefined,\n  operation: AbstractOperation,\n  callback: Callback<TResult>\n) {\n  const readPreference = operation.readPreference ?? ReadPreference.primary;\n  const inTransaction = !!session?.inTransaction();\n\n  if (inTransaction && !readPreference.equals(ReadPreference.primary)) {\n    return callback(\n      new MongoTransactionError(\n        `Read preference in a transaction must be primary, not: ${readPreference.mode}`\n      )\n    );\n  }\n\n  if (session?.isPinned && session.transaction.isCommitted && !operation.bypassPinningCheck) {\n    session.unpin();\n  }\n\n  let selector: ReadPreference | ServerSelector;\n\n  if (operation.hasAspect(Aspect.MUST_SELECT_SAME_SERVER)) {\n    // GetMore and KillCursor operations must always select the same server, but run through\n    // server selection to potentially force monitor checks if the server is\n    // in an unknown state.\n    selector = sameServerSelector(operation.server?.description);\n  } else if (operation.trySecondaryWrite) {\n    // If operation should try to write to secondary use the custom server selector\n    // otherwise provide the read preference.\n    selector = secondaryWritableServerSelector(topology.commonWireVersion, readPreference);\n  } else {\n    selector = readPreference;\n  }\n\n  const serverSelectionOptions = { session };\n  function retryOperation(originalError: MongoError) {\n    const isWriteOperation = operation.hasAspect(Aspect.WRITE_OPERATION);\n    const isReadOperation = operation.hasAspect(Aspect.READ_OPERATION);\n\n    if (isWriteOperation && originalError.code === MMAPv1_RETRY_WRITES_ERROR_CODE) {\n      return callback(\n        new MongoServerError({\n          message: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n          errmsg: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n          originalError\n        })\n      );\n    }\n\n    if (isWriteOperation && !isRetryableWriteError(originalError)) {\n      return callback(originalError);\n    }\n\n    if (isReadOperation && !isRetryableReadError(originalError)) {\n      return callback(originalError);\n    }\n\n    if (\n      originalError instanceof MongoNetworkError &&\n      session?.isPinned &&\n      !session.inTransaction() &&\n      operation.hasAspect(Aspect.CURSOR_CREATING)\n    ) {\n      // If we have a cursor and the initial command fails with a network error,\n      // we can retry it on another connection. So we need to check it back in, clear the\n      // pool for the service id, and retry again.\n      session.unpin({ force: true, forceClear: true });\n    }\n\n    // select a new server, and attempt to retry the operation\n    topology.selectServer(selector, serverSelectionOptions, (error?: Error, server?: Server) => {\n      if (!error && isWriteOperation && !supportsRetryableWrites(server)) {\n        return callback(\n          new MongoUnexpectedServerResponseError(\n            'Selected server does not support retryable writes'\n          )\n        );\n      }\n\n      if (error || !server) {\n        return callback(\n          error ?? new MongoUnexpectedServerResponseError('Server selection failed without error')\n        );\n      }\n\n      operation.execute(server, session, callback);\n    });\n  }\n\n  if (\n    readPreference &&\n    !readPreference.equals(ReadPreference.primary) &&\n    session?.inTransaction()\n  ) {\n    callback(\n      new MongoTransactionError(\n        `Read preference in a transaction must be primary, not: ${readPreference.mode}`\n      )\n    );\n\n    return;\n  }\n\n  // select a server, and execute the operation against it\n  topology.selectServer(selector, serverSelectionOptions, (error, server) => {\n    if (error || !server) {\n      return callback(error);\n    }\n\n    if (session && operation.hasAspect(Aspect.RETRYABLE)) {\n      const willRetryRead =\n        topology.s.options.retryReads && !inTransaction && operation.canRetryRead;\n\n      const willRetryWrite =\n        topology.s.options.retryWrites &&\n        !inTransaction &&\n        supportsRetryableWrites(server) &&\n        operation.canRetryWrite;\n\n      const hasReadAspect = operation.hasAspect(Aspect.READ_OPERATION);\n      const hasWriteAspect = operation.hasAspect(Aspect.WRITE_OPERATION);\n\n      if ((hasReadAspect && willRetryRead) || (hasWriteAspect && willRetryWrite)) {\n        if (hasWriteAspect && willRetryWrite) {\n          operation.options.willRetryWrite = true;\n          session.incrementTransactionNumber();\n        }\n\n        return operation.execute(server, session, (error, result) => {\n          if (error instanceof MongoError) {\n            return retryOperation(error);\n          } else if (error) {\n            return callback(error);\n          }\n          callback(undefined, result);\n        });\n      }\n    }\n\n    return operation.execute(server, session, callback);\n  });\n}\n"]},"metadata":{},"sourceType":"script"}