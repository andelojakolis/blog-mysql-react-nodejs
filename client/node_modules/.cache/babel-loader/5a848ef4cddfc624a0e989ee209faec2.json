{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Server = void 0;\n\nconst connection_1 = require(\"../cmap/connection\");\n\nconst connection_pool_1 = require(\"../cmap/connection_pool\");\n\nconst constants_1 = require(\"../constants\");\n\nconst error_1 = require(\"../error\");\n\nconst logger_1 = require(\"../logger\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst transactions_1 = require(\"../transactions\");\n\nconst utils_1 = require(\"../utils\");\n\nconst common_1 = require(\"./common\");\n\nconst monitor_1 = require(\"./monitor\");\n\nconst server_description_1 = require(\"./server_description\");\n\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n  [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n  [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\n\nconst kMonitor = Symbol('monitor');\n/** @internal */\n\nclass Server extends mongo_types_1.TypedEventEmitter {\n  /**\n   * Create a server\n   */\n  constructor(topology, description, options) {\n    super();\n    this.serverApi = options.serverApi;\n    const poolOptions = {\n      hostAddress: description.hostAddress,\n      ...options\n    };\n    this.s = {\n      description,\n      options,\n      logger: new logger_1.Logger('Server'),\n      state: common_1.STATE_CLOSED,\n      topology,\n      pool: new connection_pool_1.ConnectionPool(poolOptions),\n      operationCount: 0\n    };\n\n    for (const event of [...constants_1.CMAP_EVENTS, ...constants_1.APM_EVENTS]) {\n      this.s.pool.on(event, e => this.emit(event, e));\n    }\n\n    this.s.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, clusterTime => {\n      this.clusterTime = clusterTime;\n    });\n\n    if (this.loadBalanced) {\n      this[kMonitor] = null; // monitoring is disabled in load balancing mode\n\n      return;\n    } // create the monitor\n    // TODO(NODE-4144): Remove new variable for type narrowing\n\n\n    const monitor = new monitor_1.Monitor(this, this.s.options);\n    this[kMonitor] = monitor;\n\n    for (const event of constants_1.HEARTBEAT_EVENTS) {\n      monitor.on(event, e => this.emit(event, e));\n    }\n\n    monitor.on('resetConnectionPool', () => {\n      this.s.pool.clear();\n    });\n    monitor.on('resetServer', error => markServerUnknown(this, error));\n    monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, event => {\n      this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(this.description.hostAddress, event.reply, {\n        roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n      }));\n\n      if (this.s.state === common_1.STATE_CONNECTING) {\n        stateTransition(this, common_1.STATE_CONNECTED);\n        this.emit(Server.CONNECT, this);\n      }\n    });\n  }\n\n  get clusterTime() {\n    return this.s.topology.clusterTime;\n  }\n\n  set clusterTime(clusterTime) {\n    this.s.topology.clusterTime = clusterTime;\n  }\n\n  get description() {\n    return this.s.description;\n  }\n\n  get name() {\n    return this.s.description.address;\n  }\n\n  get autoEncrypter() {\n    if (this.s.options && this.s.options.autoEncrypter) {\n      return this.s.options.autoEncrypter;\n    }\n\n    return;\n  }\n\n  get loadBalanced() {\n    return this.s.topology.description.type === common_1.TopologyType.LoadBalanced;\n  }\n  /**\n   * Initiate server connect\n   */\n\n\n  connect() {\n    var _a;\n\n    if (this.s.state !== common_1.STATE_CLOSED) {\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CONNECTING); // If in load balancer mode we automatically set the server to\n    // a load balancer. It never transitions out of this state and\n    // has no monitor.\n\n    if (!this.loadBalanced) {\n      (_a = this[kMonitor]) === null || _a === void 0 ? void 0 : _a.connect();\n    } else {\n      stateTransition(this, common_1.STATE_CONNECTED);\n      this.emit(Server.CONNECT, this);\n    }\n  }\n  /** Destroy the server connection */\n\n\n  destroy(options, callback) {\n    var _a;\n\n    if (typeof options === 'function') callback = options, options = {};\n    options = Object.assign({}, {\n      force: false\n    }, options);\n\n    if (this.s.state === common_1.STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CLOSING);\n\n    if (!this.loadBalanced) {\n      (_a = this[kMonitor]) === null || _a === void 0 ? void 0 : _a.close();\n    }\n\n    this.s.pool.close(options, err => {\n      stateTransition(this, common_1.STATE_CLOSED);\n      this.emit('closed');\n\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n    });\n  }\n  /**\n   * Immediately schedule monitoring of this server. If there already an attempt being made\n   * this will be a no-op.\n   */\n\n\n  requestCheck() {\n    var _a;\n\n    if (!this.loadBalanced) {\n      (_a = this[kMonitor]) === null || _a === void 0 ? void 0 : _a.requestCheck();\n    }\n  }\n  /**\n   * Execute a command\n   * @internal\n   */\n\n\n  command(ns, cmd, options, callback) {\n    if (callback == null) {\n      throw new error_1.MongoInvalidArgumentError('Callback must be provided');\n    }\n\n    if (ns.db == null || typeof ns === 'string') {\n      throw new error_1.MongoInvalidArgumentError('Namespace must not be a string');\n    }\n\n    if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n      callback(new error_1.MongoServerClosedError());\n      return;\n    } // Clone the options\n\n\n    const finalOptions = Object.assign({}, options, {\n      wireProtocolCommand: false\n    }); // There are cases where we need to flag the read preference not to get sent in\n    // the command, such as pre-5.0 servers attempting to perform an aggregate write\n    // with a non-primary read preference. In this case the effective read preference\n    // (primary) is not the same as the provided and must be removed completely.\n\n    if (finalOptions.omitReadPreference) {\n      delete finalOptions.readPreference;\n    } // error if collation not supported\n\n\n    if ((0, utils_1.collationNotSupported)(this, cmd)) {\n      callback(new error_1.MongoCompatibilityError(`Server ${this.name} does not support collation`));\n      return;\n    }\n\n    const session = finalOptions.session;\n    const conn = session === null || session === void 0 ? void 0 : session.pinnedConnection; // NOTE: This is a hack! We can't retrieve the connections used for executing an operation\n    //       (and prevent them from being checked back in) at the point of operation execution.\n    //       This should be considered as part of the work for NODE-2882\n    // NOTE:\n    //       When incrementing operation count, it's important that we increment it before we\n    //       attempt to check out a connection from the pool.  This ensures that operations that\n    //       are waiting for a connection are included in the operation count.  Load balanced\n    //       mode will only ever have a single server, so the operation count doesn't matter.\n    //       Incrementing the operation count above the logic to handle load balanced mode would\n    //       require special logic to decrement it again, or would double increment (the load\n    //       balanced code makes a recursive call).  Instead, we increment the count after this\n    //       check.\n\n    if (this.loadBalanced && session && conn == null && isPinnableCommand(cmd, session)) {\n      this.s.pool.checkOut((err, checkedOut) => {\n        if (err || checkedOut == null) {\n          if (callback) return callback(err);\n          return;\n        }\n\n        session.pin(checkedOut);\n        this.command(ns, cmd, finalOptions, callback);\n      });\n      return;\n    }\n\n    this.s.operationCount += 1;\n    this.s.pool.withConnection(conn, (err, conn, cb) => {\n      if (err || !conn) {\n        this.s.operationCount -= 1;\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.command(ns, cmd, finalOptions, makeOperationHandler(this, conn, cmd, finalOptions, (error, response) => {\n        this.s.operationCount -= 1;\n        cb(error, response);\n      }));\n    }, callback);\n  }\n\n}\n\nexports.Server = Server;\n/** @event */\n\nServer.SERVER_HEARTBEAT_STARTED = constants_1.SERVER_HEARTBEAT_STARTED;\n/** @event */\n\nServer.SERVER_HEARTBEAT_SUCCEEDED = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n/** @event */\n\nServer.SERVER_HEARTBEAT_FAILED = constants_1.SERVER_HEARTBEAT_FAILED;\n/** @event */\n\nServer.CONNECT = constants_1.CONNECT;\n/** @event */\n\nServer.DESCRIPTION_RECEIVED = constants_1.DESCRIPTION_RECEIVED;\n/** @event */\n\nServer.CLOSED = constants_1.CLOSED;\n/** @event */\n\nServer.ENDED = constants_1.ENDED;\n\nfunction calculateRoundTripTime(oldRtt, duration) {\n  if (oldRtt === -1) {\n    return duration;\n  }\n\n  const alpha = 0.2;\n  return alpha * duration + (1 - alpha) * oldRtt;\n}\n\nfunction markServerUnknown(server, error) {\n  var _a; // Load balancer servers can never be marked unknown.\n\n\n  if (server.loadBalanced) {\n    return;\n  }\n\n  if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {\n    (_a = server[kMonitor]) === null || _a === void 0 ? void 0 : _a.reset();\n  }\n\n  server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, {\n    error,\n    topologyVersion: error && error.topologyVersion ? error.topologyVersion : server.description.topologyVersion\n  }));\n}\n\nfunction isPinnableCommand(cmd, session) {\n  if (session) {\n    return session.inTransaction() || 'aggregate' in cmd || 'find' in cmd || 'getMore' in cmd || 'listCollections' in cmd || 'listIndexes' in cmd;\n  }\n\n  return false;\n}\n\nfunction connectionIsStale(pool, connection) {\n  if (connection.serviceId) {\n    return connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString());\n  }\n\n  return connection.generation !== pool.generation;\n}\n\nfunction shouldHandleStateChangeError(server, err) {\n  const etv = err.topologyVersion;\n  const stv = server.description.topologyVersion;\n  return (0, server_description_1.compareTopologyVersion)(stv, etv) < 0;\n}\n\nfunction inActiveTransaction(session, cmd) {\n  return session && session.inTransaction() && !(0, transactions_1.isTransactionCommand)(cmd);\n}\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\n\n\nfunction isRetryableWritesEnabled(topology) {\n  return topology.s.options.retryWrites !== false;\n}\n\nfunction makeOperationHandler(server, connection, cmd, options, callback) {\n  const session = options === null || options === void 0 ? void 0 : options.session;\n  return function handleOperationResult(error, result) {\n    if (result != null) {\n      return callback(undefined, result);\n    }\n\n    if (!error) {\n      return callback(new error_1.MongoUnexpectedServerResponseError('Empty response with no error'));\n    }\n\n    if (!(error instanceof error_1.MongoError)) {\n      // Node.js or some other error we have not special handling for\n      return callback(error);\n    }\n\n    if (connectionIsStale(server.s.pool, connection)) {\n      return callback(error);\n    }\n\n    if (error instanceof error_1.MongoNetworkError) {\n      if (session && !session.hasEnded && session.serverSession) {\n        session.serverSession.isDirty = true;\n      } // inActiveTransaction check handles commit and abort.\n\n\n      if (inActiveTransaction(session, cmd) && !error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.TransientTransactionError);\n      }\n\n      if ((isRetryableWritesEnabled(server.s.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, utils_1.supportsRetryableWrites)(server) && !inActiveTransaction(session, cmd)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n      }\n\n      if (!(error instanceof error_1.MongoNetworkTimeoutError) || (0, error_1.isNetworkErrorBeforeHandshake)(error)) {\n        // In load balanced mode we never mark the server as unknown and always\n        // clear for the specific service id.\n        server.s.pool.clear(connection.serviceId);\n\n        if (!server.loadBalanced) {\n          markServerUnknown(server, error);\n        }\n      }\n    } else {\n      if ((isRetryableWritesEnabled(server.s.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, error_1.needsRetryableWriteLabel)(error, (0, utils_1.maxWireVersion)(server)) && !inActiveTransaction(session, cmd)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n      }\n\n      if ((0, error_1.isSDAMUnrecoverableError)(error)) {\n        if (shouldHandleStateChangeError(server, error)) {\n          if ((0, utils_1.maxWireVersion)(server) <= 7 || (0, error_1.isNodeShuttingDownError)(error)) {\n            server.s.pool.clear(connection.serviceId);\n          }\n\n          if (!server.loadBalanced) {\n            markServerUnknown(server, error);\n            process.nextTick(() => server.requestCheck());\n          }\n        }\n      }\n    }\n\n    if (session && session.isPinned && error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n      session.unpin({\n        force: true\n      });\n    }\n\n    return callback(error);\n  };\n}","map":{"version":3,"mappings":"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","names":["stateTransition","common_1","kMonitor","Symbol","Server","mongo_types_1","constructor","topology","description","options","serverApi","poolOptions","hostAddress","s","logger","logger_1","state","pool","connection_pool_1","operationCount","event","constants_1","on","e","emit","connection_1","CLUSTER_TIME_RECEIVED","clusterTime","loadBalanced","monitor","monitor_1","clear","error","markServerUnknown","SERVER_HEARTBEAT_SUCCEEDED","DESCRIPTION_RECEIVED","server_description_1","reply","roundTripTime","calculateRoundTripTime","duration","CONNECT","name","address","autoEncrypter","type","LoadBalanced","connect","_a","destroy","callback","Object","assign","force","close","err","requestCheck","command","ns","cmd","error_1","db","finalOptions","wireProtocolCommand","omitReadPreference","readPreference","session","conn","pinnedConnection","isPinnableCommand","checkOut","checkedOut","pin","withConnection","cb","makeOperationHandler","response","exports","oldRtt","alpha","server","reset","undefined","topologyVersion","inTransaction","connectionIsStale","connection","serviceId","generation","serviceGenerations","get","toHexString","shouldHandleStateChangeError","etv","stv","inActiveTransaction","isRetryableWritesEnabled","retryWrites","handleOperationResult","result","hasEnded","serverSession","isDirty","hasErrorLabel","TransientTransactionError","addErrorLabel","RetryableWriteError","process","nextTick","isPinned","unpin"],"sources":["C:\\Users\\Anđelo\\node_modules\\mongodb\\src\\sdam\\server.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport { CommandOptions, Connection, DestroyOptions, GetMoreOptions } from '../cmap/connection';\nimport {\n  ConnectionPool,\n  ConnectionPoolEvents,\n  ConnectionPoolOptions\n} from '../cmap/connection_pool';\nimport {\n  APM_EVENTS,\n  CLOSED,\n  CMAP_EVENTS,\n  CONNECT,\n  DESCRIPTION_RECEIVED,\n  ENDED,\n  HEARTBEAT_EVENTS,\n  SERVER_HEARTBEAT_FAILED,\n  SERVER_HEARTBEAT_STARTED,\n  SERVER_HEARTBEAT_SUCCEEDED\n} from '../constants';\nimport type { AutoEncrypter } from '../deps';\nimport {\n  isNetworkErrorBeforeHandshake,\n  isNodeShuttingDownError,\n  isSDAMUnrecoverableError,\n  MongoCompatibilityError,\n  MongoError,\n  MongoErrorLabel,\n  MongoInvalidArgumentError,\n  MongoNetworkError,\n  MongoNetworkTimeoutError,\n  MongoServerClosedError,\n  MongoUnexpectedServerResponseError,\n  needsRetryableWriteLabel\n} from '../error';\nimport { Logger } from '../logger';\nimport type { ServerApi } from '../mongo_client';\nimport { TypedEventEmitter } from '../mongo_types';\nimport type { ClientSession } from '../sessions';\nimport { isTransactionCommand } from '../transactions';\nimport {\n  Callback,\n  collationNotSupported,\n  EventEmitterWithState,\n  makeStateMachine,\n  maxWireVersion,\n  MongoDBNamespace,\n  supportsRetryableWrites\n} from '../utils';\nimport {\n  ClusterTime,\n  STATE_CLOSED,\n  STATE_CLOSING,\n  STATE_CONNECTED,\n  STATE_CONNECTING,\n  TopologyType\n} from './common';\nimport type {\n  ServerHeartbeatFailedEvent,\n  ServerHeartbeatStartedEvent,\n  ServerHeartbeatSucceededEvent\n} from './events';\nimport { Monitor, MonitorOptions } from './monitor';\nimport { compareTopologyVersion, ServerDescription } from './server_description';\nimport type { Topology } from './topology';\n\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\n});\n\n/** @internal */\nconst kMonitor = Symbol('monitor');\n\n/** @public */\nexport type ServerOptions = Omit<ConnectionPoolOptions, 'id' | 'generation' | 'hostAddress'> &\n  MonitorOptions;\n\n/** @internal */\nexport interface ServerPrivate {\n  /** The server description for this server */\n  description: ServerDescription;\n  /** A copy of the options used to construct this instance */\n  options: ServerOptions;\n  /** A logger instance */\n  logger: Logger;\n  /** The current state of the Server */\n  state: string;\n  /** The topology this server is a part of */\n  topology: Topology;\n  /** A connection pool for this server */\n  pool: ConnectionPool;\n  /** MongoDB server API version */\n  serverApi?: ServerApi;\n  /** A count of the operations currently running against the server. */\n  operationCount: number;\n}\n\n/** @public */\nexport type ServerEvents = {\n  serverHeartbeatStarted(event: ServerHeartbeatStartedEvent): void;\n  serverHeartbeatSucceeded(event: ServerHeartbeatSucceededEvent): void;\n  serverHeartbeatFailed(event: ServerHeartbeatFailedEvent): void;\n  /** Top level MongoClient doesn't emit this so it is marked: @internal */\n  connect(server: Server): void;\n  descriptionReceived(description: ServerDescription): void;\n  closed(): void;\n  ended(): void;\n} & ConnectionPoolEvents &\n  EventEmitterWithState;\n\n/** @internal */\nexport class Server extends TypedEventEmitter<ServerEvents> {\n  /** @internal */\n  s: ServerPrivate;\n  serverApi?: ServerApi;\n  hello?: Document;\n  [kMonitor]: Monitor | null;\n\n  /** @event */\n  static readonly SERVER_HEARTBEAT_STARTED = SERVER_HEARTBEAT_STARTED;\n  /** @event */\n  static readonly SERVER_HEARTBEAT_SUCCEEDED = SERVER_HEARTBEAT_SUCCEEDED;\n  /** @event */\n  static readonly SERVER_HEARTBEAT_FAILED = SERVER_HEARTBEAT_FAILED;\n  /** @event */\n  static readonly CONNECT = CONNECT;\n  /** @event */\n  static readonly DESCRIPTION_RECEIVED = DESCRIPTION_RECEIVED;\n  /** @event */\n  static readonly CLOSED = CLOSED;\n  /** @event */\n  static readonly ENDED = ENDED;\n\n  /**\n   * Create a server\n   */\n  constructor(topology: Topology, description: ServerDescription, options: ServerOptions) {\n    super();\n\n    this.serverApi = options.serverApi;\n\n    const poolOptions = { hostAddress: description.hostAddress, ...options };\n\n    this.s = {\n      description,\n      options,\n      logger: new Logger('Server'),\n      state: STATE_CLOSED,\n      topology,\n      pool: new ConnectionPool(poolOptions),\n      operationCount: 0\n    };\n\n    for (const event of [...CMAP_EVENTS, ...APM_EVENTS]) {\n      this.s.pool.on(event, (e: any) => this.emit(event, e));\n    }\n\n    this.s.pool.on(Connection.CLUSTER_TIME_RECEIVED, (clusterTime: ClusterTime) => {\n      this.clusterTime = clusterTime;\n    });\n\n    if (this.loadBalanced) {\n      this[kMonitor] = null;\n      // monitoring is disabled in load balancing mode\n      return;\n    }\n\n    // create the monitor\n    // TODO(NODE-4144): Remove new variable for type narrowing\n    const monitor = new Monitor(this, this.s.options);\n    this[kMonitor] = monitor;\n\n    for (const event of HEARTBEAT_EVENTS) {\n      monitor.on(event, (e: any) => this.emit(event, e));\n    }\n\n    monitor.on('resetConnectionPool', () => {\n      this.s.pool.clear();\n    });\n\n    monitor.on('resetServer', (error: MongoError) => markServerUnknown(this, error));\n    monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, (event: ServerHeartbeatSucceededEvent) => {\n      this.emit(\n        Server.DESCRIPTION_RECEIVED,\n        new ServerDescription(this.description.hostAddress, event.reply, {\n          roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n        })\n      );\n\n      if (this.s.state === STATE_CONNECTING) {\n        stateTransition(this, STATE_CONNECTED);\n        this.emit(Server.CONNECT, this);\n      }\n    });\n  }\n\n  get clusterTime(): ClusterTime | undefined {\n    return this.s.topology.clusterTime;\n  }\n\n  set clusterTime(clusterTime: ClusterTime | undefined) {\n    this.s.topology.clusterTime = clusterTime;\n  }\n\n  get description(): ServerDescription {\n    return this.s.description;\n  }\n\n  get name(): string {\n    return this.s.description.address;\n  }\n\n  get autoEncrypter(): AutoEncrypter | undefined {\n    if (this.s.options && this.s.options.autoEncrypter) {\n      return this.s.options.autoEncrypter;\n    }\n    return;\n  }\n\n  get loadBalanced(): boolean {\n    return this.s.topology.description.type === TopologyType.LoadBalanced;\n  }\n\n  /**\n   * Initiate server connect\n   */\n  connect(): void {\n    if (this.s.state !== STATE_CLOSED) {\n      return;\n    }\n\n    stateTransition(this, STATE_CONNECTING);\n\n    // If in load balancer mode we automatically set the server to\n    // a load balancer. It never transitions out of this state and\n    // has no monitor.\n    if (!this.loadBalanced) {\n      this[kMonitor]?.connect();\n    } else {\n      stateTransition(this, STATE_CONNECTED);\n      this.emit(Server.CONNECT, this);\n    }\n  }\n\n  /** Destroy the server connection */\n  destroy(options?: DestroyOptions, callback?: Callback): void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = Object.assign({}, { force: false }, options);\n\n    if (this.s.state === STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n\n    if (!this.loadBalanced) {\n      this[kMonitor]?.close();\n    }\n\n    this.s.pool.close(options, err => {\n      stateTransition(this, STATE_CLOSED);\n      this.emit('closed');\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n    });\n  }\n\n  /**\n   * Immediately schedule monitoring of this server. If there already an attempt being made\n   * this will be a no-op.\n   */\n  requestCheck(): void {\n    if (!this.loadBalanced) {\n      this[kMonitor]?.requestCheck();\n    }\n  }\n\n  /**\n   * Execute a command\n   * @internal\n   */\n  command(\n    ns: MongoDBNamespace,\n    cmd: Document,\n    options: CommandOptions,\n    callback: Callback<Document>\n  ): void {\n    if (callback == null) {\n      throw new MongoInvalidArgumentError('Callback must be provided');\n    }\n\n    if (ns.db == null || typeof ns === 'string') {\n      throw new MongoInvalidArgumentError('Namespace must not be a string');\n    }\n\n    if (this.s.state === STATE_CLOSING || this.s.state === STATE_CLOSED) {\n      callback(new MongoServerClosedError());\n      return;\n    }\n\n    // Clone the options\n    const finalOptions = Object.assign({}, options, { wireProtocolCommand: false });\n\n    // There are cases where we need to flag the read preference not to get sent in\n    // the command, such as pre-5.0 servers attempting to perform an aggregate write\n    // with a non-primary read preference. In this case the effective read preference\n    // (primary) is not the same as the provided and must be removed completely.\n    if (finalOptions.omitReadPreference) {\n      delete finalOptions.readPreference;\n    }\n\n    // error if collation not supported\n    if (collationNotSupported(this, cmd)) {\n      callback(new MongoCompatibilityError(`Server ${this.name} does not support collation`));\n      return;\n    }\n\n    const session = finalOptions.session;\n    const conn = session?.pinnedConnection;\n\n    // NOTE: This is a hack! We can't retrieve the connections used for executing an operation\n    //       (and prevent them from being checked back in) at the point of operation execution.\n    //       This should be considered as part of the work for NODE-2882\n    // NOTE:\n    //       When incrementing operation count, it's important that we increment it before we\n    //       attempt to check out a connection from the pool.  This ensures that operations that\n    //       are waiting for a connection are included in the operation count.  Load balanced\n    //       mode will only ever have a single server, so the operation count doesn't matter.\n    //       Incrementing the operation count above the logic to handle load balanced mode would\n    //       require special logic to decrement it again, or would double increment (the load\n    //       balanced code makes a recursive call).  Instead, we increment the count after this\n    //       check.\n    if (this.loadBalanced && session && conn == null && isPinnableCommand(cmd, session)) {\n      this.s.pool.checkOut((err, checkedOut) => {\n        if (err || checkedOut == null) {\n          if (callback) return callback(err);\n          return;\n        }\n\n        session.pin(checkedOut);\n        this.command(ns, cmd, finalOptions, callback);\n      });\n      return;\n    }\n\n    this.s.operationCount += 1;\n\n    this.s.pool.withConnection(\n      conn,\n      (err, conn, cb) => {\n        if (err || !conn) {\n          this.s.operationCount -= 1;\n          markServerUnknown(this, err);\n          return cb(err);\n        }\n\n        conn.command(\n          ns,\n          cmd,\n          finalOptions,\n          makeOperationHandler(this, conn, cmd, finalOptions, (error, response) => {\n            this.s.operationCount -= 1;\n            cb(error, response);\n          })\n        );\n      },\n      callback\n    );\n  }\n}\n\nfunction calculateRoundTripTime(oldRtt: number, duration: number): number {\n  if (oldRtt === -1) {\n    return duration;\n  }\n\n  const alpha = 0.2;\n  return alpha * duration + (1 - alpha) * oldRtt;\n}\n\nfunction markServerUnknown(server: Server, error?: MongoError) {\n  // Load balancer servers can never be marked unknown.\n  if (server.loadBalanced) {\n    return;\n  }\n\n  if (error instanceof MongoNetworkError && !(error instanceof MongoNetworkTimeoutError)) {\n    server[kMonitor]?.reset();\n  }\n\n  server.emit(\n    Server.DESCRIPTION_RECEIVED,\n    new ServerDescription(server.description.hostAddress, undefined, {\n      error,\n      topologyVersion:\n        error && error.topologyVersion ? error.topologyVersion : server.description.topologyVersion\n    })\n  );\n}\n\nfunction isPinnableCommand(cmd: Document, session?: ClientSession): boolean {\n  if (session) {\n    return (\n      session.inTransaction() ||\n      'aggregate' in cmd ||\n      'find' in cmd ||\n      'getMore' in cmd ||\n      'listCollections' in cmd ||\n      'listIndexes' in cmd\n    );\n  }\n\n  return false;\n}\n\nfunction connectionIsStale(pool: ConnectionPool, connection: Connection) {\n  if (connection.serviceId) {\n    return (\n      connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString())\n    );\n  }\n\n  return connection.generation !== pool.generation;\n}\n\nfunction shouldHandleStateChangeError(server: Server, err: MongoError) {\n  const etv = err.topologyVersion;\n  const stv = server.description.topologyVersion;\n  return compareTopologyVersion(stv, etv) < 0;\n}\n\nfunction inActiveTransaction(session: ClientSession | undefined, cmd: Document) {\n  return session && session.inTransaction() && !isTransactionCommand(cmd);\n}\n\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\nfunction isRetryableWritesEnabled(topology: Topology) {\n  return topology.s.options.retryWrites !== false;\n}\n\nfunction makeOperationHandler(\n  server: Server,\n  connection: Connection,\n  cmd: Document,\n  options: CommandOptions | GetMoreOptions | undefined,\n  callback: Callback\n): Callback {\n  const session = options?.session;\n  return function handleOperationResult(error, result) {\n    if (result != null) {\n      return callback(undefined, result);\n    }\n\n    if (!error) {\n      return callback(new MongoUnexpectedServerResponseError('Empty response with no error'));\n    }\n\n    if (!(error instanceof MongoError)) {\n      // Node.js or some other error we have not special handling for\n      return callback(error);\n    }\n\n    if (connectionIsStale(server.s.pool, connection)) {\n      return callback(error);\n    }\n\n    if (error instanceof MongoNetworkError) {\n      if (session && !session.hasEnded && session.serverSession) {\n        session.serverSession.isDirty = true;\n      }\n\n      // inActiveTransaction check handles commit and abort.\n      if (\n        inActiveTransaction(session, cmd) &&\n        !error.hasErrorLabel(MongoErrorLabel.TransientTransactionError)\n      ) {\n        error.addErrorLabel(MongoErrorLabel.TransientTransactionError);\n      }\n\n      if (\n        (isRetryableWritesEnabled(server.s.topology) || isTransactionCommand(cmd)) &&\n        supportsRetryableWrites(server) &&\n        !inActiveTransaction(session, cmd)\n      ) {\n        error.addErrorLabel(MongoErrorLabel.RetryableWriteError);\n      }\n\n      if (!(error instanceof MongoNetworkTimeoutError) || isNetworkErrorBeforeHandshake(error)) {\n        // In load balanced mode we never mark the server as unknown and always\n        // clear for the specific service id.\n\n        server.s.pool.clear(connection.serviceId);\n        if (!server.loadBalanced) {\n          markServerUnknown(server, error);\n        }\n      }\n    } else {\n      if (\n        (isRetryableWritesEnabled(server.s.topology) || isTransactionCommand(cmd)) &&\n        needsRetryableWriteLabel(error, maxWireVersion(server)) &&\n        !inActiveTransaction(session, cmd)\n      ) {\n        error.addErrorLabel(MongoErrorLabel.RetryableWriteError);\n      }\n\n      if (isSDAMUnrecoverableError(error)) {\n        if (shouldHandleStateChangeError(server, error)) {\n          if (maxWireVersion(server) <= 7 || isNodeShuttingDownError(error)) {\n            server.s.pool.clear(connection.serviceId);\n          }\n\n          if (!server.loadBalanced) {\n            markServerUnknown(server, error);\n            process.nextTick(() => server.requestCheck());\n          }\n        }\n      }\n    }\n\n    if (\n      session &&\n      session.isPinned &&\n      error.hasErrorLabel(MongoErrorLabel.TransientTransactionError)\n    ) {\n      session.unpin({ force: true });\n    }\n\n    return callback(error);\n  };\n}\n"]},"metadata":{},"sourceType":"script"}